[{"filePath":"/home/drigo/projects/Duration/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/AppNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ConnectionTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/CurrencyDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/SettingsMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/TranslatedText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/__tests__/Footer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/__tests__/Navbar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/CharityLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/CharityVettingForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'validateField'. Either include it or remove the dependency array.","line":150,"column":5,"nodeType":"ArrayExpression","endLine":150,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [formData.category, formData.city, formData.confirmPassword, formData.contactEmail, formData.contactName, formData.contactPhone, formData.country, formData.description, formData.organizationName, formData.password, formData.postalCode, formData.state, formData.streetAddress, formData.taxId, register, validateField]","fix":{"range":[4957,4977],"text":"[formData.category, formData.city, formData.confirmPassword, formData.contactEmail, formData.contactName, formData.contactPhone, formData.country, formData.description, formData.organizationName, formData.password, formData.postalCode, formData.state, formData.streetAddress, formData.taxId, register, validateField]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { useCountries } from '@/hooks/useCountries';\nimport { validateEmail, validatePassword, validateName, validatePhoneNumber } from '@/utils/validation';\nimport { AlertCircle } from 'lucide-react';\n\nexport const CharityVettingForm: React.FC = () => {\n  const { register, loading } = useAuth();\n  const { countries } = useCountries();\n  const [error, setError] = useState('');\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  const [formData, setFormData] = useState({\n    organizationName: '',\n    description: '',\n    category: '',\n    streetAddress: '',\n    city: '',\n    state: '',\n    country: '',\n    postalCode: '',\n    taxId: '',\n    contactName: '',\n    contactEmail: '',\n    contactPhone: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n      const { name, value } = e.target;\n      setFormData(prev => ({ ...prev, [name]: value }));\n      setError('');\n      \n      // Clear validation error for this field\n      if (validationErrors[name]) {\n        setValidationErrors(prev => {\n          const { [name]: _, ...rest } = prev;\n          return rest;\n        });\n      }\n    },\n    [validationErrors],\n  );\n\n  const validateField = (name: string, value: string): string => {\n    switch (name) {\n      case 'organizationName':\n        return validateName(value) ? '' : 'Organization name must be between 2 and 100 characters';\n      case 'contactName':\n        return validateName(value) ? '' : 'Contact name must be between 2 and 100 characters';\n      case 'contactEmail':\n        return validateEmail(value) ? '' : 'Please enter a valid email address';\n      case 'contactPhone':\n        return validatePhoneNumber(value) ? '' : 'Please enter a valid phone number';\n      case 'password':\n        return validatePassword(value) ? '' : 'Password must be at least 8 characters long';\n      case 'confirmPassword':\n        return value === formData.password ? '' : 'Passwords do not match';\n      default:\n        return '';\n    }\n  };\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      setError('');\n      setValidationErrors({});\n\n      // Validate all fields\n      const errors: Record<string, string> = {};\n      \n      // Required fields to validate\n      const fieldsToValidate = [\n        { name: 'organizationName', value: formData.organizationName },\n        { name: 'contactName', value: formData.contactName },\n        { name: 'contactEmail', value: formData.contactEmail },\n        { name: 'contactPhone', value: formData.contactPhone },\n        { name: 'password', value: formData.password },\n        { name: 'confirmPassword', value: formData.confirmPassword }\n      ];\n      \n      fieldsToValidate.forEach(({ name, value }) => {\n        const error = validateField(name, value);\n        if (error) {\n          errors[name] = error;\n        }\n      });\n      \n      // Additional required fields\n      if (!formData.description.trim()) {\n        errors['description'] = 'Description is required';\n      }\n      \n      if (!formData.category.trim()) {\n        errors['category'] = 'Category is required';\n      }\n      \n      if (!formData.taxId.trim()) {\n        errors['taxId'] = 'Tax ID is required';\n      }\n      \n      if (!formData.streetAddress.trim()) {\n        errors['streetAddress'] = 'Street address is required';\n      }\n      \n      if (!formData.city.trim()) {\n        errors['city'] = 'City is required';\n      }\n      \n      if (!formData.country) {\n        errors['country'] = 'Country is required';\n      }\n\n      // If there are validation errors, don't submit\n      if (Object.keys(errors).length > 0) {\n        setValidationErrors(errors);\n        setError('Please correct the validation errors');\n        return;\n      }\n\n      try {\n        await register(formData.contactEmail, formData.password, 'charity', {\n          organizationName: formData.organizationName,\n          description: formData.description,\n          category: formData.category,\n          type: 'charity', // Explicitly set type to ensure it's stored in metadata\n          address: {\n            street: formData.streetAddress,\n            city: formData.city,\n            state: formData.state,\n            country: formData.country,\n            postalCode: formData.postalCode\n          },\n          taxId: formData.taxId,\n          contact: {\n            name: formData.contactName,\n            phone: formData.contactPhone\n          }\n        });\n      } catch (err) {\n        const message = err instanceof Error ? err.message : 'Failed to submit application';\n        setError(message);\n      }\n    },\n    [formData, register],\n  );\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {error && (\n        <div className=\"p-3 bg-red-50 text-red-600 rounded-md flex items-start\">\n          <AlertCircle className=\"h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n\n      <h3 className=\"text-lg font-semibold text-gray-900\">Organization Details</h3>\n        <Input\n          label=\"Organization Name\"\n          name=\"organizationName\"\n          value={formData.organizationName}\n          onChange={handleChange}\n          required\n          error={validationErrors['organizationName']}\n        />\n\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n          Description\n          <textarea\n            name=\"description\"\n            value={formData.description}\n            onChange={handleChange}\n            rows={4}\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-indigo-50 mt-1\"\n            required\n          />\n          {validationErrors['description'] && (\n            <p className=\"mt-1 text-sm text-red-600\">{validationErrors['description']}</p>\n          )}\n        </label>\n\n        <Input\n          label=\"Category of Entity\"\n          name=\"category\"\n          value={formData.category}\n          onChange={handleChange}\n          required\n          error={validationErrors['category']}\n        />\n\n        <Input\n          label=\"Tax or Registration ID\"\n          name=\"taxId\"\n          value={formData.taxId}\n          onChange={handleChange}\n          required\n          error={validationErrors['taxId']}\n        />\n      \n      <h3 className=\"text-lg font-semibold text-gray-900\">Address</h3>\n        <Input\n          label=\"Street Address\"\n          name=\"streetAddress\"\n          value={formData.streetAddress}\n          onChange={handleChange}\n          required\n          error={validationErrors['streetAddress']}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Input\n            label=\"City\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleChange}\n            required\n            error={validationErrors['city']}\n          />\n          <Input\n            label=\"State/Province\"\n            name=\"state\"\n            value={formData.state}\n            onChange={handleChange}\n            required\n            error={validationErrors['state']}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <label className=\"block\">\n            <span className=\"text-sm font-medium text-gray-700 mb-1 block\">Country</span>\n            <select\n              name=\"country\"\n              value={formData.country}\n              onChange={handleChange}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-indigo-50\"\n              required\n            >\n              <option value=\"\">Select Country</option>\n              {countries.map(country => (\n                <option key={country.code} value={country.code}>\n                  {country.name}\n                </option>\n              ))}\n            </select>\n            {validationErrors['country'] && (\n              <p className=\"mt-1 text-sm text-red-600\">{validationErrors['country']}</p>\n            )}\n          </label>\n          <Input\n            label=\"Postal Code\"\n            name=\"postalCode\"\n            value={formData.postalCode}\n            onChange={handleChange}\n            required\n            error={validationErrors['postalCode']}\n          />\n        </div>\n      \n      <h3 className=\"text-lg font-semibold text-gray-900\">Contact Information</h3>\n        <Input\n          label=\"Contact Name\"\n          name=\"contactName\"\n          value={formData.contactName}\n          onChange={handleChange}\n          required\n          error={validationErrors['contactName']}\n        />\n        <Input\n          label=\"Contact Email\"\n          type=\"email\"\n          name=\"contactEmail\"\n          value={formData.contactEmail}\n          onChange={handleChange}\n          required\n          error={validationErrors['contactEmail']}\n        />\n        <Input\n          label=\"Contact Phone\"\n          type=\"tel\"\n          name=\"contactPhone\"\n          value={formData.contactPhone}\n          onChange={handleChange}\n          required\n          error={validationErrors['contactPhone']}\n        />\n      \n      <h3 className=\"text-lg font-semibold text-gray-900\">Account Security</h3>\n        <Input\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          required\n          error={validationErrors['password']}\n        />\n        <Input\n          label=\"Confirm Password\"\n          type=\"password\"\n          name=\"confirmPassword\"\n          value={formData.confirmPassword}\n          onChange={handleChange}\n          required\n          error={validationErrors['confirmPassword']}\n        />\n      \n      <Button\n        type=\"submit\"\n        className=\"w-full\"\n        disabled={loading}\n      >\n        {loading ? 'Submitting Application...' : 'Submit Charity Application'}\n      </Button>\n    </form>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/DonorLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/DonorRegistration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/ForgotCredentials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/ForgotUsername.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/__tests__/CharityLogin.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/__tests__/CharityVettingForm.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/__tests__/DonorLogin.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/__tests__/ForgotCredentials.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CauseGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/OpportunityManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/PortfolioGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/WithdrawalForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/WithdrawalHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/__tests__/OpportunityManagement.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/__tests__/SearchBar.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/CharityProfileCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/CharityProfileSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/ProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/stats/CharityStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/stats/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalRequestForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/ContributionFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationExportModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationLeaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/GlobalContributions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/GlobalStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/LeaderboardRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/PersonalContributions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/RecentDonations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/RegionFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/TimeRangeFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/VolunteerImpact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/VolunteerLeaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/__tests__/ContributionFilters.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/__tests__/GlobalContributions.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/__tests__/PersonalContributions.test.tsx","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":32,"column":3,"nodeType":"Identifier","messageId":"noAssertions","endLine":32,"endColumn":5},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":43,"column":3,"nodeType":"Identifier","messageId":"noAssertions","endLine":43,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport { PersonalContributions } from '../PersonalContributions';\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: () => ({ user: { id: 'user-123' } })\n}));\n\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({\n          data: [\n            { amount: '50', created_at: '2024-01-01', charity: { name: 'Test Charity' } },\n            { amount: '75', created_at: '2024-01-02', charity: { name: 'Another Charity' } }\n          ],\n          error: null\n        }))\n      }))\n    }))\n  }\n}));\n\ndescribe('PersonalContributions', () => {\n  it('renders personal contributions', async () => {\n    render(<PersonalContributions />);\n    \n    await screen.findByText(/test charity/i);\n    expect(screen.getByText(/another charity/i)).toBeInTheDocument();\n  });\n\n  it('displays total personal contributions', async () => {\n    render(<PersonalContributions />);\n    \n    await screen.findByText(/125/); // 50 + 75\n  });\n\n  it('shows loading state', () => {\n    render(<PersonalContributions />);\n    expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  });\n\n  it('handles empty contributions', async () => {\n    const mockSupabase = jest.requireMock('@/lib/supabase').supabase;\n    mockSupabase.from.mockReturnValueOnce({\n      select: () => ({\n        eq: () => Promise.resolve({ data: [], error: null })\n      })\n    });\n    \n    render(<PersonalContributions />);\n    \n    await screen.findByText(/no contributions/i);\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/DonationHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/DonorStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/ScheduledDonations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/__tests__/DonationHistory.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/__tests__/DonorStats.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/__tests__/ScheduledDonations.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/ActionButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/FeatureCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/Hero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/ProtocolStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/__tests__/ActionButtons.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/__tests__/ProtocolStats.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/layout/StaticPageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/layout/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/settings/WalletAliasSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/settings/__tests__/WalletAliasSettings.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":187,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":187,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":192,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":192,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":197,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":197,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":202,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":202,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/CharityHeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Editor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/ImageWithFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/ImportantNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/OptimizedImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/__tests__/Editor.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/__tests__/Tabs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ApplicationAcceptance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ApplicationForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":371,"column":5,"nodeType":"ArrayExpression","endLine":371,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[11172,11174],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":378,"column":5,"nodeType":"ArrayExpression","endLine":378,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[11340,11342],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":385,"column":5,"nodeType":"ArrayExpression","endLine":385,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[11502,11504],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":392,"column":5,"nodeType":"ArrayExpression","endLine":392,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[11676,11678],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":405,"column":5,"nodeType":"ArrayExpression","endLine":405,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [formData.availability, handleInputChange]","fix":{"range":[12050,12091],"text":"[formData.availability, handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":418,"column":5,"nodeType":"ArrayExpression","endLine":418,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [formData.availability, handleInputChange]","fix":{"range":[12471,12512],"text":"[formData.availability, handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":425,"column":5,"nodeType":"ArrayExpression","endLine":425,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[12687,12689],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":432,"column":5,"nodeType":"ArrayExpression","endLine":432,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[12862,12864],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":439,"column":5,"nodeType":"ArrayExpression","endLine":439,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[13026,13028],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":446,"column":5,"nodeType":"ArrayExpression","endLine":446,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[13206,13208],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":453,"column":5,"nodeType":"ArrayExpression","endLine":453,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[13376,13378],"text":"[handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":462,"column":5,"nodeType":"ArrayExpression","endLine":462,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [formData.references, handleInputChange]","fix":{"range":[13703,13742],"text":"[formData.references, handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":474,"column":5,"nodeType":"ArrayExpression","endLine":474,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [formData.references, handleInputChange]","fix":{"range":[14096,14135],"text":"[formData.references, handleInputChange]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleInputChange'. Either include it or remove the dependency array.","line":481,"column":5,"nodeType":"ArrayExpression","endLine":481,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [handleInputChange]","fix":{"range":[14307,14309],"text":"[handleInputChange]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useProfile } from \"@/hooks/useProfile\";\nimport { Button } from \"@/components/ui/Button\";\nimport { Input } from \"@/components/ui/Input\";\nimport { Logger } from \"@/utils/logger\";\nimport {\n  validateEmail,\n  validateName,\n  validatePhoneNumber,\n} from \"@/utils/validation\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface ApplicationFormProps {\n  opportunityId: string;\n  opportunityTitle: string;\n  onClose: () => void;\n  onSuccess?: () => void;\n}\n\ninterface ApplicationFormContentProps {\n  formData: {\n    fullName: string;\n    phoneNumber: string;\n    email: string;\n    dateOfBirth: string;\n    availability: {\n      days: string[];\n      times: string[];\n    };\n    commitmentType: string;\n    experience: string;\n    skills: string;\n    certifications: string;\n    interests: string;\n    references: { id: string; name: string; contact: string }[];\n    workSamples: string;\n  };\n  validationErrors: Record<string, string>;\n  loading: boolean;\n  inputClasses: string;\n  textareaClasses: string;\n  selectClasses: string;\n  onSubmit: (_e: React.FormEvent) => void;\n  onClose: () => void;\n  handlers: {\n    handleFullNameChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handlePhoneChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleEmailChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleDateOfBirthChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleDaysChange: (\n      _day: string,\n    ) => (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleTimesChange: (\n      _time: string,\n    ) => (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleCommitmentChange: (_e: React.ChangeEvent<HTMLSelectElement>) => void;\n    handleExperienceChange: (\n      _e: React.ChangeEvent<HTMLTextAreaElement>,\n    ) => void;\n    handleSkillsChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleCertificationsChange: (\n      _e: React.ChangeEvent<HTMLInputElement>,\n    ) => void;\n    handleInterestsChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleReferenceNameChange: (\n      _index: number,\n    ) => (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleReferenceContactChange: (\n      _index: number,\n    ) => (_e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleWorkSamplesChange: (_e: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n}\n\nconst ApplicationFormContent: React.FC<ApplicationFormContentProps> = ({\n  formData,\n  validationErrors,\n  loading,\n  inputClasses,\n  textareaClasses,\n  selectClasses,\n  onSubmit,\n  onClose,\n  handlers,\n}) => (\n  <form onSubmit={onSubmit} className=\"space-y-6\">\n    {/* Personal Information */}\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">\n        Personal Information\n      </h3>\n      <Input\n        label=\"Full Name *\"\n        value={formData.fullName}\n        onChange={handlers.handleFullNameChange}\n        required\n        className={inputClasses}\n        error={validationErrors[\"fullName\"]}\n      />\n      <Input\n        label=\"Phone Number *\"\n        type=\"tel\"\n        value={formData.phoneNumber}\n        onChange={handlers.handlePhoneChange}\n        required\n        className={inputClasses}\n        error={validationErrors[\"phoneNumber\"]}\n      />\n      <Input\n        label=\"Email Address *\"\n        type=\"email\"\n        value={formData.email}\n        onChange={handlers.handleEmailChange}\n        required\n        className={inputClasses}\n        error={validationErrors[\"email\"]}\n      />\n      <Input\n        label=\"Date of Birth\"\n        type=\"date\"\n        value={formData.dateOfBirth}\n        onChange={handlers.handleDateOfBirthChange}\n        className={inputClasses}\n      />\n    </div>\n\n    {/* Availability */}\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">Availability</h3>\n      <p className=\"block text-sm font-medium text-gray-700 mb-1\">\n        Preferred Days\n      </p>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {[\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ].map((day) => (\n          <label key={day} className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.availability.days.includes(day)}\n              onChange={handlers.handleDaysChange(day)}\n              className=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 mr-2\"\n            />\n            {day}\n          </label>\n        ))}\n      </div>\n      {validationErrors[\"availability.days\"] && (\n        <p className=\"text-sm text-red-600 mb-1\">\n          {validationErrors[\"availability.days\"]}\n        </p>\n      )}\n      <p className=\"block text-sm font-medium text-gray-700 mb-1 mt-4\">\n        Preferred Times\n      </p>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {[\"Morning\", \"Afternoon\", \"Evening\"].map((time) => (\n          <label key={time} className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              checked={formData.availability.times.includes(time)}\n              onChange={handlers.handleTimesChange(time)}\n              className=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 mr-2\"\n            />\n            {time}\n          </label>\n        ))}\n      </div>\n      {validationErrors[\"availability.times\"] && (\n        <p className=\"text-sm text-red-600 mb-1\">\n          {validationErrors[\"availability.times\"]}\n        </p>\n      )}\n      <label className=\"block text-sm font-medium text-gray-700 mb-1 mt-4\">\n        Commitment Level\n        <select\n          value={formData.commitmentType}\n          onChange={handlers.handleCommitmentChange}\n          className={`${selectClasses} mt-1`}\n        >\n          <option value=\"one-time\">One-time</option>\n          <option value=\"short-term\">Short-term</option>\n          <option value=\"long-term\">Long-term</option>\n        </select>\n      </label>\n    </div>\n\n    {/* Skills & Experience */}\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">Skills & Experience</h3>\n      <label className=\"block\">\n        <span className=\"text-sm font-medium text-gray-700 mb-1 block\">\n          Relevant Experience *\n        </span>\n        <textarea\n          value={formData.experience}\n          onChange={handlers.handleExperienceChange}\n          rows={4}\n          className={textareaClasses}\n          required\n        />\n        {validationErrors[\"experience\"] && (\n          <p className=\"text-sm text-red-600 mb-1\">\n            {validationErrors[\"experience\"]}\n          </p>\n        )}\n      </label>\n      <Input\n        label=\"Skills (comma-separated)\"\n        value={formData.skills}\n        onChange={handlers.handleSkillsChange}\n        className={inputClasses}\n      />\n      <Input\n        label=\"Certifications (comma-separated)\"\n        value={formData.certifications}\n        onChange={handlers.handleCertificationsChange}\n        className={inputClasses}\n      />\n    </div>\n\n    {/* Interests */}\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">\n        Interests & Preferences\n      </h3>\n      <Input\n        label=\"Areas of Interest (comma-separated)\"\n        value={formData.interests}\n        onChange={handlers.handleInterestsChange}\n        className={inputClasses}\n      />\n    </div>\n\n    {/* References */}\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-medium text-gray-900\">References</h3>\n      {formData.references.map((ref, index) => (\n        <div key={ref.id} className=\"space-y-2\">\n          <Input\n            label={`Reference ${index + 1} Name`}\n            value={ref.name}\n            onChange={handlers.handleReferenceNameChange(index)}\n            className={inputClasses}\n          />\n          <Input\n            label={`Reference ${index + 1} Contact`}\n            value={ref.contact}\n            onChange={handlers.handleReferenceContactChange(index)}\n            className={inputClasses}\n          />\n        </div>\n      ))}\n    </div>\n\n    {/* Work Samples */}\n    <div>\n      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Work Samples</h3>\n      <Input\n        label=\"Links to Work Samples (comma-separated)\"\n        value={formData.workSamples}\n        onChange={handlers.handleWorkSamplesChange}\n        className={inputClasses}\n      />\n    </div>\n\n    <div className=\"flex justify-end space-x-3\">\n      <Button variant=\"secondary\" onClick={onClose} disabled={loading}>\n        Cancel\n      </Button>\n      <Button type=\"submit\" disabled={loading}>\n        {loading ? \"Submitting...\" : \"Submit Application\"}\n      </Button>\n    </div>\n  </form>\n);\n\nexport const ApplicationForm: React.FC<ApplicationFormProps> = ({\n  opportunityId,\n  opportunityTitle,\n  onClose,\n  onSuccess,\n}) => {\n  const { user } = useAuth();\n  const { profile } = useProfile();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [validationErrors, setValidationErrors] = useState<\n    Record<string, string>\n  >({});\n\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n    dateOfBirth: \"\",\n    availability: {\n      days: [] as string[],\n      times: [] as string[],\n    },\n    commitmentType: \"short-term\",\n    experience: \"\",\n    skills: \"\",\n    certifications: \"\",\n    interests: \"\",\n    references: [\n      { id: \"ref-1\", name: \"\", contact: \"\" },\n      { id: \"ref-2\", name: \"\", contact: \"\" },\n    ],\n    workSamples: \"\",\n  });\n\n  const validateField = (\n    name: string,\n    value: string | number | boolean,\n  ): string => {\n    switch (name) {\n      case \"fullName\":\n        return validateName(value)\n          ? \"\"\n          : \"Please enter a valid name (2-100 characters)\";\n      case \"email\":\n        return validateEmail(value) ? \"\" : \"Please enter a valid email address\";\n      case \"phoneNumber\":\n        return validatePhoneNumber(value)\n          ? \"\"\n          : \"Please enter a valid phone number\";\n      case \"experience\":\n        return value.trim().length > 0\n          ? \"\"\n          : \"Please provide information about your experience\";\n      default:\n        return \"\";\n    }\n  };\n\n  const handleInputChange = useCallback(\n    (\n      field: string,\n      value: string | string[] | { name: string; contact: string }[],\n    ) => {\n      setFormData((prev) => ({\n        ...prev,\n        [field]: value,\n      }));\n\n      // Clear validation error for this field\n      if (validationErrors[field]) {\n        setValidationErrors((prev) => {\n          const { [field]: _, ...rest } = prev;\n          return rest;\n        });\n      }\n    },\n    [validationErrors],\n  );\n\n  // useCallback handlers for form inputs\n  const handleFullNameChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"fullName\", e.target.value);\n    },\n    [],\n  );\n\n  const handlePhoneChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"phoneNumber\", e.target.value);\n    },\n    [],\n  );\n\n  const handleEmailChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"email\", e.target.value);\n    },\n    [],\n  );\n\n  const handleDateOfBirthChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"dateOfBirth\", e.target.value);\n    },\n    [],\n  );\n\n  const handleDaysChange = useCallback(\n    (day: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      const days = e.target.checked\n        ? [...formData.availability.days, day]\n        : formData.availability.days.filter((d) => d !== day);\n      handleInputChange(\"availability\", {\n        ...formData.availability,\n        days,\n      });\n    },\n    [formData.availability, validationErrors],\n  );\n\n  const handleTimesChange = useCallback(\n    (time: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      const times = e.target.checked\n        ? [...formData.availability.times, time]\n        : formData.availability.times.filter((t) => t !== time);\n      handleInputChange(\"availability\", {\n        ...formData.availability,\n        times,\n      });\n    },\n    [formData.availability, validationErrors],\n  );\n\n  const handleCommitmentChange = useCallback(\n    (e: React.ChangeEvent<HTMLSelectElement>) => {\n      handleInputChange(\"commitmentType\", e.target.value);\n    },\n    [],\n  );\n\n  const handleExperienceChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      handleInputChange(\"experience\", e.target.value);\n    },\n    [],\n  );\n\n  const handleSkillsChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"skills\", e.target.value);\n    },\n    [],\n  );\n\n  const handleCertificationsChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"certifications\", e.target.value);\n    },\n    [],\n  );\n\n  const handleInterestsChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"interests\", e.target.value);\n    },\n    [],\n  );\n\n  const handleReferenceNameChange = useCallback(\n    (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newReferences = [...formData.references];\n      newReferences[index] = { ...newReferences[index], name: e.target.value };\n      handleInputChange(\"references\", newReferences);\n    },\n    [formData.references, validationErrors],\n  );\n\n  const handleReferenceContactChange = useCallback(\n    (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newReferences = [...formData.references];\n      newReferences[index] = {\n        ...newReferences[index],\n        contact: e.target.value,\n      };\n      handleInputChange(\"references\", newReferences);\n    },\n    [formData.references, validationErrors],\n  );\n\n  const handleWorkSamplesChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleInputChange(\"workSamples\", e.target.value);\n    },\n    [],\n  );\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!user || !profile) {\n        setError(\"User profile not found\");\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        setValidationErrors({});\n\n        // Validate all required fields\n        const errors: Record<string, string> = {};\n\n        const fieldsToValidate = [\n          { name: \"fullName\", value: formData.fullName },\n          { name: \"email\", value: formData.email },\n          { name: \"phoneNumber\", value: formData.phoneNumber },\n          { name: \"experience\", value: formData.experience },\n        ];\n\n        fieldsToValidate.forEach(({ name, value }) => {\n          const error = validateField(name, value);\n          if (error) {\n            errors[name] = error;\n          }\n        });\n\n        // Check if availability is selected\n        if (formData.availability.days.length === 0) {\n          errors[\"availability.days\"] = \"Please select at least one day\";\n        }\n\n        if (formData.availability.times.length === 0) {\n          errors[\"availability.times\"] = \"Please select at least one time\";\n        }\n\n        // If there are validation errors, don't submit\n        if (Object.keys(errors).length > 0) {\n          setValidationErrors(errors);\n          throw new Error(\"Please correct the validation errors\");\n        }\n\n        Logger.info(\"Submitting volunteer application\", {\n          opportunityId,\n          applicantId: profile.id,\n        });\n\n        const { error: submitError } = await supabase\n          .from(\"volunteer_applications\")\n          .insert({\n            opportunity_id: opportunityId,\n            applicant_id: profile.id,\n            full_name: formData.fullName,\n            phone_number: formData.phoneNumber,\n            email: formData.email,\n            date_of_birth: formData.dateOfBirth || null,\n            availability: {\n              days: formData.availability.days,\n              times: formData.availability.times,\n            },\n            commitment_type: formData.commitmentType,\n            experience: formData.experience,\n            skills: formData.skills\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean),\n            certifications: formData.certifications\n              .split(\",\")\n              .map((c) => c.trim())\n              .filter(Boolean),\n            interests: formData.interests\n              .split(\",\")\n              .map((i) => i.trim())\n              .filter(Boolean),\n            reference_contacts: formData.references,\n            work_samples: formData.workSamples\n              .split(\",\")\n              .map((w) => w.trim())\n              .filter(Boolean),\n          });\n\n        if (submitError) throw submitError;\n\n        Logger.info(\"Volunteer application submitted\", {\n          opportunityId,\n          applicantId: profile.id,\n        });\n\n        onSuccess?.();\n        onClose();\n      } catch (err) {\n        const message =\n          err instanceof Error ? err.message : \"Failed to submit application\";\n        setError(message);\n        Logger.error(\"Application submission failed\", { error: err });\n      } finally {\n        setLoading(false);\n      }\n    },\n    [formData, user, profile, opportunityId, onSuccess, onClose],\n  );\n\n  const inputClasses =\n    \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-indigo-50 font-sans\";\n  const textareaClasses =\n    \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-indigo-50 font-sans\";\n  const selectClasses =\n    \"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-indigo-50 font-sans\";\n\n  const handlers = {\n    handleFullNameChange,\n    handlePhoneChange,\n    handleEmailChange,\n    handleDateOfBirthChange,\n    handleDaysChange,\n    handleTimesChange,\n    handleCommitmentChange,\n    handleExperienceChange,\n    handleSkillsChange,\n    handleCertificationsChange,\n    handleInterestsChange,\n    handleReferenceNameChange,\n    handleReferenceContactChange,\n    handleWorkSamplesChange,\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6 space-y-4\">\n        <h2 className=\"text-2xl font-semibold text-gray-900\">\n          Apply for: {opportunityTitle}\n        </h2>\n\n        {error && (\n          <div className=\"p-3 bg-red-50 text-red-600 rounded-md flex items-start\">\n            <AlertCircle className=\"h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n            <span>{error}</span>\n          </div>\n        )}\n\n        <ApplicationFormContent\n          formData={formData}\n          validationErrors={validationErrors}\n          loading={loading}\n          inputClasses={inputClasses}\n          textareaClasses={textareaClasses}\n          selectClasses={selectClasses}\n          onSubmit={handleSubmit}\n          onClose={onClose}\n          handlers={handlers}\n        />\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ConsentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/OpportunityForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'validateField'. Either include it or remove the dependency array.","line":186,"column":5,"nodeType":"ArrayExpression","endLine":186,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [profile.id, formData.title, formData.description, formData.skills, formData.location, formData.commitment, formData.type, formData.workLanguage, onSuccess, validateField, navigate]","fix":{"range":[5728,5772],"text":"[profile.id, formData.title, formData.description, formData.skills, formData.location, formData.commitment, formData.type, formData.workLanguage, onSuccess, validateField, navigate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/Button\";\nimport { Input } from \"@/components/ui/Input\";\nimport { Editor } from \"@/components/ui/Editor\";\nimport { useProfile } from \"@/hooks/useProfile\";\nimport { supabase } from \"@/lib/supabase\";\nimport {\n  CommitmentType,\n  OpportunityType,\n  WorkLanguage,\n} from \"@/types/volunteer\";\nimport { useTranslation } from \"@/hooks/useTranslation\";\nimport { Logger } from \"@/utils/logger\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface OpportunityFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport const OpportunityForm: React.FC<OpportunityFormProps> = ({\n  onSuccess,\n  onCancel,\n}) => {\n  const { profile } = useProfile();\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"<p></p>\", // Empty paragraph for Tiptap editor\n    skills: \"\",\n    commitment: CommitmentType.SHORT_TERM,\n    location: \"\",\n    type: OpportunityType.REMOTE,\n    workLanguage: WorkLanguage.ENGLISH,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [validationErrors, setValidationErrors] = useState<\n    Record<string, string>\n  >({});\n\n  // Safely strip HTML by removing individual characters that could form HTML\n  // This prevents incomplete multi-character sanitization vulnerabilities\n  const stripHtmlTags = (input: string): string => {\n    // Remove all < and > characters which are the core of HTML tags\n    // This is more secure than trying to match complete tag patterns\n    return input.replace(/[<>]/g, \"\");\n  };\n\n  const validateField = (name: string, value: string): string => {\n    switch (name) {\n      case \"title\":\n        return value.trim().length > 0 ? \"\" : \"Title is required\";\n      case \"description\": {\n        // Safely strip HTML tags to check if there's actual content\n        const textContent = stripHtmlTags(value).trim();\n        return textContent.length > 0 ? \"\" : \"Description is required\";\n      }\n      case \"skills\":\n        return value.trim().length > 0 ? \"\" : \"At least one skill is required\";\n      case \"location\":\n        return value.trim().length > 0 ? \"\" : \"Location is required\";\n      default:\n        return \"\";\n    }\n  };\n\n  const handleChange = useCallback(\n    (\n      e: React.ChangeEvent<\n        HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n      >,\n    ) => {\n      const { name, value } = e.target;\n      setFormData((prev) => ({ ...prev, [name]: value }));\n\n      // Clear validation error for this field\n      if (validationErrors[name]) {\n        setValidationErrors((prev) => {\n          const { [name]: _, ...rest } = prev;\n          return rest;\n        });\n      }\n    },\n    [validationErrors],\n  );\n\n  const handleDescriptionChange = useCallback(\n    (content: string) => {\n      setFormData((prev) => ({ ...prev, description: content }));\n      // Clear validation error for description\n      if (validationErrors.description) {\n        setValidationErrors((prev) => {\n          const { description: _description, ...rest } = prev;\n          return rest;\n        });\n      }\n    },\n    [validationErrors.description],\n  );\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n\n      if (!profile?.id) {\n        setError(\"User profile not found\");\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        setValidationErrors({});\n\n        // Validate all required fields\n        const errors: Record<string, string> = {};\n\n        const fieldsToValidate = [\n          { name: \"title\", value: formData.title },\n          { name: \"description\", value: formData.description },\n          { name: \"skills\", value: formData.skills },\n          { name: \"location\", value: formData.location },\n        ];\n\n        fieldsToValidate.forEach(({ name, value }) => {\n          const error = validateField(name, value);\n          if (error) {\n            errors[name] = error;\n          }\n        });\n\n        // If there are validation errors, don't submit\n        if (Object.keys(errors).length > 0) {\n          setValidationErrors(errors);\n          throw new Error(\"Please correct the validation errors\");\n        }\n\n        Logger.info(\"Creating volunteer opportunity\", {\n          charityId: profile.id,\n          title: formData.title.trim(),\n        });\n\n        const { error: submitError } = await supabase\n          .from(\"volunteer_opportunities\")\n          .insert({\n            charity_id: profile.id,\n            title: formData.title.trim(),\n            description: formData.description.trim(),\n            skills: formData.skills\n              .split(\",\")\n              .map((s) => s.trim())\n              .filter(Boolean),\n            commitment: formData.commitment,\n            location: formData.location.trim(),\n            type: formData.type,\n            work_language: formData.workLanguage,\n            status: \"active\",\n          });\n\n        if (submitError) throw submitError;\n\n        Logger.info(\"Volunteer opportunity created\", {\n          charityId: profile.id,\n          title: formData.title,\n        });\n\n        if (onSuccess) {\n          onSuccess();\n        } else {\n          navigate(\"/charity-portal\");\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error ? err.message : \"Failed to create opportunity\";\n        setError(errorMessage);\n        Logger.error(\"Failed to create volunteer opportunity\", { error: err });\n      } finally {\n        setLoading(false);\n      }\n    },\n    [formData, profile?.id, onSuccess, navigate],\n  );\n\n  const formatLanguageName = (language: string): string => {\n    return language\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">\n        {t(\"volunteer.createOpportunity\", \"Create Volunteer Opportunity\")}\n      </h2>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 text-red-600 rounded-md flex items-start\">\n          <AlertCircle className=\"h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <Input\n          label={t(\"volunteer.opportunityTitle\", \"Opportunity Title\")}\n          name=\"title\"\n          value={formData.title}\n          onChange={handleChange}\n          variant=\"enhanced\"\n          required\n          error={validationErrors[\"title\"]}\n        />\n\n        <div>\n          <label\n            htmlFor=\"opportunity-description\"\n            className=\"block text-sm font-medium text-gray-700 mb-1\"\n          >\n            {t(\"volunteer.description\", \"Description\")}\n          </label>\n          <Editor\n            id=\"opportunity-description\"\n            content={formData.description}\n            onChange={handleDescriptionChange}\n            placeholder=\"Describe the volunteer opportunity in detail...\"\n            variant=\"enhanced\"\n          />\n          {validationErrors[\"description\"] && (\n            <p className=\"mt-1 text-sm text-red-600\">\n              {validationErrors[\"description\"]}\n            </p>\n          )}\n        </div>\n\n        <Input\n          label={t(\"volunteer.skills\", \"Skills (comma-separated)\")}\n          name=\"skills\"\n          value={formData.skills}\n          onChange={handleChange}\n          variant=\"enhanced\"\n          placeholder=\"e.g., Web Development, Project Management, Translation\"\n          required\n          error={validationErrors[\"skills\"]}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              {t(\"volunteer.commitment\", \"Commitment\")}\n            </label>\n            <select\n              name=\"commitment\"\n              value={formData.commitment}\n              onChange={handleChange}\n              className=\"block w-full border-[1.5px] border-[#e1e4e8] rounded-lg px-4 py-3 text-base transition-all duration-200 bg-[#fafbfc] focus:border-[#0366d6] focus:shadow-[0_0_0_3px_rgba(3,102,214,0.1)] focus:bg-white focus:outline-none\"\n              required\n            >\n              <option value={CommitmentType.ONE_TIME}>\n                {t(\"volunteer.commitment.oneTime\", \"One-time\")}\n              </option>\n              <option value={CommitmentType.SHORT_TERM}>\n                {t(\"volunteer.commitment.shortTerm\", \"Short-term\")}\n              </option>\n              <option value={CommitmentType.LONG_TERM}>\n                {t(\"volunteer.commitment.longTerm\", \"Long-term\")}\n              </option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              {t(\"volunteer.type\", \"Type\")}\n            </label>\n            <select\n              name=\"type\"\n              value={formData.type}\n              onChange={handleChange}\n              className=\"block w-full border-[1.5px] border-[#e1e4e8] rounded-lg px-4 py-3 text-base transition-all duration-200 bg-[#fafbfc] focus:border-[#0366d6] focus:shadow-[0_0_0_3px_rgba(3,102,214,0.1)] focus:bg-white focus:outline-none\"\n              required\n            >\n              <option value={OpportunityType.REMOTE}>\n                {t(\"volunteer.type.remote\", \"Remote\")}\n              </option>\n              <option value={OpportunityType.ONSITE}>\n                {t(\"volunteer.type.onsite\", \"Onsite\")}\n              </option>\n              <option value={OpportunityType.HYBRID}>\n                {t(\"volunteer.type.hybrid\", \"Hybrid\")}\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Input\n            label={t(\"volunteer.location\", \"Location\")}\n            name=\"location\"\n            value={formData.location}\n            onChange={handleChange}\n            variant=\"enhanced\"\n            placeholder=\"e.g., Remote, New York, Berlin\"\n            required\n            error={validationErrors[\"location\"]}\n          />\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              {t(\"volunteer.workLanguage\", \"Work Language\")}\n            </label>\n            <select\n              name=\"workLanguage\"\n              value={formData.workLanguage}\n              onChange={handleChange}\n              className=\"block w-full border-[1.5px] border-[#e1e4e8] rounded-lg px-4 py-3 text-base transition-all duration-200 bg-[#fafbfc] focus:border-[#0366d6] focus:shadow-[0_0_0_3px_rgba(3,102,214,0.1)] focus:bg-white focus:outline-none\"\n              required\n            >\n              {Object.values(WorkLanguage).map((language) => (\n                <option key={language} value={language}>\n                  {t(`language.${language}`, formatLanguageName(language))}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-3\">\n          {onCancel && (\n            <Button type=\"button\" variant=\"secondary\" onClick={onCancel}>\n              {t(\"common.cancel\", \"Cancel\")}\n            </Button>\n          )}\n\n          <Button type=\"submit\" disabled={loading}>\n            {loading\n              ? t(\"common.creating\", \"Creating...\")\n              : t(\"volunteer.createOpportunity\", \"Create Opportunity\")}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VerificationLookup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VolunteerHoursVerification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VolunteerVerificationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/__tests__/ApplicationAcceptance.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/__tests__/VolunteerHoursVerification.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/ConnectButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/__tests__/ConnectButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/contracts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/docs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":597,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":597,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from \"react\";\nimport { User, AuthError as _AuthError } from \"@supabase/supabase-js\";\nimport { supabase } from \"@/lib/supabase\";\nimport { useToast } from \"./ToastContext\";\nimport { Logger } from \"@/utils/logger\";\nimport { ENV as _ENV } from \"@/config/env\";\nimport { setSentryUser, clearSentryUser } from \"@/lib/sentry\";\n\ninterface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: Error | null;\n  userType: \"donor\" | \"charity\" | \"admin\" | null;\n}\n\ninterface AuthContextType extends AuthState {\n  login: (\n    _email: string,\n    _password: string,\n    _accountType: \"donor\" | \"charity\",\n  ) => Promise<void>;\n  loginWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (_email: string) => Promise<void>;\n  refreshSession: () => Promise<void>;\n  register: (\n    _email: string,\n    _password: string,\n    _type: \"donor\" | \"charity\",\n    _metadata?: Record<string, unknown>,\n  ) => Promise<void>;\n  sendUsernameReminder: (_email: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst SESSION_REFRESH_INTERVAL = 10 * 60 * 1000; // 10 minutes\nconst MAX_RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\n/**\n * Authentication provider component that manages user authentication state\n * Handles session initialization, refresh, and auth state changes\n * @param children - React components to wrap with auth context\n */\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    loading: true,\n    error: null,\n    userType: null,\n  });\n  const { showToast } = useToast();\n  const [retryCount, setRetryCount] = useState(0);\n\n  const refreshSession = useCallback(async () => {\n    try {\n      const {\n        data: { session },\n        error,\n      } = await supabase.auth.refreshSession();\n      if (error) {\n        Logger.error(\"Session refresh error\", {\n          error: error.message,\n          stack: error.stack,\n          code: error.status,\n        });\n        throw error;\n      }\n\n      const userType = session?.user?.user_metadata?.type as\n        | \"donor\"\n        | \"charity\"\n        | null;\n\n      setState((prev) => ({\n        ...prev,\n        user: session?.user ?? null,\n        userType,\n      }));\n\n      Logger.info(\"Session refreshed successfully\");\n    } catch (err) {\n      Logger.error(\"Session refresh failed\", {\n        error:\n          err instanceof Error\n            ? { message: err.message, stack: err.stack }\n            : err,\n        retryCount,\n      });\n\n      if (retryCount < MAX_RETRY_ATTEMPTS) {\n        setRetryCount((prev) => prev + 1);\n        setTimeout(refreshSession, RETRY_DELAY * Math.pow(2, retryCount));\n      } else {\n        // Force re-login if refresh fails repeatedly\n        setState((prev) => ({\n          ...prev,\n          user: null,\n          userType: null,\n          error: new Error(\"Session expired. Please login again.\"),\n        }));\n        showToast(\"error\", \"Session expired\", \"Please login again\");\n      }\n    }\n  }, [retryCount, showToast]);\n\n  useEffect(() => {\n    let mounted = true;\n    let refreshInterval: ReturnType<typeof setTimeout>;\n\n    const initializeAuth = async () => {\n      try {\n        // Check active session\n        const {\n          data: { session },\n          error: sessionError,\n        } = await supabase.auth.getSession();\n\n        if (sessionError) {\n          Logger.error(\"Get session error\", {\n            error: sessionError.message,\n            stack: sessionError.stack,\n            code: sessionError.status,\n          });\n          throw sessionError;\n        }\n\n        if (mounted) {\n          let userType = session?.user?.user_metadata?.type as\n            | \"donor\"\n            | \"charity\"\n            | \"admin\"\n            | null;\n\n          // If type not in metadata, fetch from profile\n          if (!userType && session?.user) {\n            const { data: profile } = await supabase\n              .from(\"profiles\")\n              .select(\"type\")\n              .eq(\"user_id\", session.user.id)\n              .single();\n\n            if (profile) {\n              userType = profile.type as \"donor\" | \"charity\" | \"admin\";\n            }\n          }\n\n          setState((prev) => ({\n            ...prev,\n            user: session?.user ?? null,\n            userType,\n            loading: false,\n          }));\n\n          // Update Sentry user context\n          if (session?.user) {\n            setSentryUser({\n              id: session.user.id,\n              email: session.user.email,\n              userType: userType || undefined,\n            });\n          } else {\n            clearSentryUser();\n          }\n\n          // Start session refresh interval if user is logged in\n          if (session?.user) {\n            refreshInterval = setInterval(\n              refreshSession,\n              SESSION_REFRESH_INTERVAL,\n            );\n          }\n        }\n\n        // Listen for auth changes\n        const {\n          data: { subscription },\n        } = supabase.auth.onAuthStateChange(async (event, session) => {\n          if (!mounted) return;\n\n          Logger.info(\"Auth state changed\", { event });\n\n          let userType = session?.user?.user_metadata?.type as\n            | \"donor\"\n            | \"charity\"\n            | \"admin\"\n            | null;\n\n          // If type not in metadata, fetch from profile\n          if (!userType && session?.user) {\n            const { data: profile } = await supabase\n              .from(\"profiles\")\n              .select(\"type\")\n              .eq(\"user_id\", session.user.id)\n              .single();\n\n            if (profile) {\n              userType = profile.type as \"donor\" | \"charity\" | \"admin\";\n            }\n          }\n\n          if (event === \"SIGNED_IN\") {\n            showToast(\"success\", \"Signed in successfully\");\n            refreshInterval = setInterval(\n              refreshSession,\n              SESSION_REFRESH_INTERVAL,\n            );\n          }\n\n          if (event === \"SIGNED_OUT\") {\n            showToast(\"success\", \"Signed out successfully\");\n            if (refreshInterval) {\n              clearInterval(refreshInterval);\n            }\n          }\n\n          if (event === \"USER_UPDATED\") {\n            showToast(\"success\", \"Profile updated successfully\");\n          }\n\n          setState((prev) => ({\n            ...prev,\n            user: session?.user ?? null,\n            userType,\n            loading: false,\n          }));\n\n          // Update Sentry user context on auth state change\n          if (session?.user) {\n            setSentryUser({\n              id: session.user.id,\n              email: session.user.email,\n              userType: userType || undefined,\n            });\n          } else {\n            clearSentryUser();\n          }\n        });\n\n        return () => {\n          mounted = false;\n          subscription.unsubscribe();\n          if (refreshInterval) {\n            clearInterval(refreshInterval);\n          }\n        };\n      } catch (err) {\n        Logger.error(\"Auth initialization failed\", {\n          error:\n            err instanceof Error\n              ? { message: err.message, stack: err.stack }\n              : err,\n        });\n\n        if (mounted) {\n          setState((prev) => ({\n            ...prev,\n            error:\n              err instanceof Error\n                ? err\n                : new Error(\"Failed to initialize auth\"),\n            loading: false,\n          }));\n        }\n        return undefined;\n      }\n    };\n\n    initializeAuth();\n  }, [refreshSession, showToast]);\n\n  const login = async (\n    email: string,\n    password: string,\n    accountType: \"donor\" | \"charity\",\n  ) => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      // First, check if the user exists\n      const {\n        data: { user },\n        error: checkError,\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (checkError) {\n        Logger.error(\"Login error from Supabase\", {\n          error: checkError.message,\n          code: checkError.status,\n          email,\n        });\n        throw checkError;\n      }\n\n      // Verify the user has the correct account type\n      // First check user metadata\n      let userType = user?.user_metadata?.type;\n\n      // If not in metadata, check the profile table\n      if (!userType && user) {\n        const { data: profile, error: profileError } = await supabase\n          .from(\"profiles\")\n          .select(\"type\")\n          .eq(\"user_id\", user.id)\n          .single();\n\n        if (!profileError && profile) {\n          userType = profile.type;\n        }\n      }\n\n      // Check account type compatibility\n      // - Donor login: only allows 'donor' users\n      // - Charity login: allows both 'charity' and 'admin' users\n      const isValidLogin =\n        (accountType === \"donor\" && userType === \"donor\") ||\n        (accountType === \"charity\" &&\n          (userType === \"charity\" || userType === \"admin\"));\n\n      if (!isValidLogin) {\n        // Sign out the user immediately to prevent session creation\n        await supabase.auth.signOut();\n        throw new Error(\n          \"Account not found. Please check your email and password.\",\n        );\n      }\n\n      // Determine redirect path based on actual user type (not login type)\n      let redirectPath = \"/give-dashboard\"; // Default for donor\n\n      if (userType === \"admin\") {\n        redirectPath = \"/admin\";\n      } else if (userType === \"charity\") {\n        redirectPath = \"/charity-portal\";\n      }\n\n      // Redirect to the appropriate dashboard on current domain\n      window.location.href = `${window.location.origin}${redirectPath}`;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : \"Failed to sign in\";\n      showToast(\"error\", \"Authentication Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n      }));\n      throw err;\n    } finally {\n      setState((prev) => ({ ...prev, loading: false }));\n    }\n  };\n\n  const loginWithGoogle = async () => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: \"google\",\n        options: {\n          redirectTo: `${window.location.origin}/login`,\n          queryParams: {\n            access_type: \"offline\",\n            prompt: \"consent\",\n          },\n        },\n      });\n\n      if (error) {\n        Logger.error(\"Google login error\", {\n          error: error.message,\n          code: error.status,\n        });\n        throw error;\n      }\n    } catch (err) {\n      const message =\n        err instanceof Error ? err.message : \"Failed to sign in with Google\";\n      showToast(\"error\", \"Authentication Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n      }));\n      throw err;\n    } finally {\n      setState((prev) => ({ ...prev, loading: false }));\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        Logger.error(\"Logout error\", {\n          error: error.message,\n          code: error.status,\n        });\n        throw error;\n      }\n\n      // Clear user state immediately\n      setState({\n        user: null,\n        userType: null,\n        loading: false,\n        error: null,\n      });\n\n      // Stay on current domain instead of redirecting\n      window.location.href = `${window.location.origin}/`;\n\n      showToast(\"success\", \"Logged out successfully\");\n    } catch (err) {\n      const message = err instanceof Error ? err.message : \"Failed to log out\";\n      showToast(\"error\", \"Logout Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n        loading: false,\n      }));\n      throw err;\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n\n      if (error) {\n        Logger.error(\"Password reset error\", {\n          error: error.message,\n          code: error.status,\n          email,\n        });\n        throw error;\n      }\n      showToast(\"success\", \"Password reset email sent\");\n    } catch (err) {\n      const message =\n        err instanceof Error ? err.message : \"Failed to send reset email\";\n      showToast(\"error\", \"Reset Password Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n      }));\n      throw err;\n    } finally {\n      setState((prev) => ({ ...prev, loading: false }));\n    }\n  };\n\n  const register = async (\n    email: string,\n    password: string,\n    type: \"donor\" | \"charity\",\n    metadata = {},\n  ) => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n\n      // Attempt to sign up the user\n      // If the email is already registered, Supabase will return an error\n      // This approach avoids using dummy credentials for checking\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            type,\n            ...metadata,\n          },\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      });\n\n      if (error) {\n        // Check if error is because user already exists\n        if (\n          error.message?.toLowerCase().includes(\"already registered\") ||\n          error.message?.toLowerCase().includes(\"already exists\") ||\n          error.message?.toLowerCase().includes(\"user already registered\")\n        ) {\n          // For better UX, we don't reveal which account type the email is registered with\n          throw new Error(\n            \"This email is already registered. Please sign in or use a different email.\",\n          );\n        }\n        Logger.error(\"Registration error\", {\n          error: error.message,\n          code: error.status,\n          email,\n          type,\n        });\n        throw error;\n      }\n\n      if (data.user) {\n        const { error: profileError } = await supabase.from(\"profiles\").insert({\n          user_id: data.user.id,\n          type,\n        });\n\n        if (profileError) {\n          Logger.error(\"Profile creation error\", {\n            error: profileError.message,\n            code: profileError.code,\n            userId: data.user.id,\n            type,\n          });\n          throw profileError;\n        }\n      }\n\n      showToast(\n        \"success\",\n        \"Registration successful\",\n        \"Please check your email to verify your account\",\n      );\n\n      // Redirect to the appropriate login page\n      window.location.href = `/login?type=${type}`;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : \"Failed to register\";\n      showToast(\"error\", \"Registration Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n      }));\n      throw err;\n    } finally {\n      setState((prev) => ({ ...prev, loading: false }));\n    }\n  };\n\n  const sendUsernameReminder = async (_email: string) => {\n    try {\n      setState((prev) => ({ ...prev, loading: true, error: null }));\n      // In a real app, this would send an email with the username\n      // For this demo, we'll just show a success message\n      showToast(\n        \"success\",\n        \"Username reminder sent\",\n        \"If an account exists with this email, a reminder will be sent\",\n      );\n      return Promise.resolve();\n    } catch (err) {\n      const message =\n        err instanceof Error ? err.message : \"Failed to send username reminder\";\n      showToast(\"error\", \"Username Reminder Error\", message);\n      setState((prev) => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n      }));\n      throw err;\n    } finally {\n      setState((prev) => ({ ...prev, loading: false }));\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        login,\n        loginWithGoogle,\n        logout,\n        resetPassword,\n        refreshSession,\n        register,\n        sendUsernameReminder,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// eslint-disable-next-line react-refresh/only-export-components\n/**\n * Hook to access the authentication context\n * Must be used within an AuthProvider component\n * @returns AuthContextType containing user state and authentication methods\n * @throws Error if used outside of AuthProvider\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/SettingsContext.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/ToastContext.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":11,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":11,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":69,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":69,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/Web3Context.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":362,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":362,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport { ethers } from \"ethers\";\nimport { Logger } from \"@/utils/logger\";\nimport { CHAIN_IDS } from \"@/config/contracts\";\n\n// Error type guards for Web3 errors\ninterface WalletError {\n  code?: number;\n  message?: string;\n}\n\n/**\n * Type guard to check if an error is a wallet error with code and message properties\n * @param error - The error object to check\n * @returns True if the error is a wallet error, false otherwise\n */\nfunction isWalletError(error: unknown): error is WalletError {\n  return typeof error === \"object\" && error !== null;\n}\n\n/**\n * Checks if an error has a specific error code\n * @param error - The error object to check\n * @param code - The error code to match\n * @returns True if the error has the specified code, false otherwise\n */\nfunction hasErrorCode(error: unknown, code: number): boolean {\n  return isWalletError(error) && error.code === code;\n}\n\n/**\n * Checks if an error message contains a specific substring\n * @param error - The error object to check\n * @param message - The message substring to search for\n * @returns True if the error message contains the substring, false otherwise\n */\nfunction hasErrorMessage(error: unknown, message: string): boolean {\n  return (\n    isWalletError(error) &&\n    typeof error.message === \"string\" &&\n    error.message.includes(message)\n  );\n}\n\ninterface Web3ContextType {\n  provider: ethers.Provider | null;\n  address: string | null;\n  chainId: number | null;\n  isConnected: boolean;\n  isConnecting: boolean;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  error: Error | null;\n  switchChain: (_chainId: number) => Promise<void>;\n}\n\nconst Web3Context = createContext<Web3ContextType | undefined>(undefined);\n\nconst MOONBASE_CHAIN_INFO = {\n  chainId: `0x${CHAIN_IDS.MOONBASE.toString(16)}`,\n  chainName: \"Moonbase Alpha\",\n  nativeCurrency: {\n    name: \"DEV\",\n    symbol: \"DEV\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc.api.moonbase.moonbeam.network\"],\n  blockExplorerUrls: [\"https://moonbase.moonscan.io/\"],\n};\n\n/**\n * Web3 provider component that manages blockchain wallet connections and state\n * Handles MetaMask/wallet connections, chain switching, and account management\n * @param children - React components to wrap with Web3 context\n */\nexport function Web3Provider({ children }: { children: React.ReactNode }) {\n  const [provider, setProvider] = useState<ethers.Provider | null>(null);\n  const [address, setAddress] = useState<string | null>(null);\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Handle account changes\n  const handleAccountsChanged = useCallback((accounts: string[]) => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      setAddress(null);\n      setProvider(null);\n      setChainId(null);\n      Logger.info(\"Wallet disconnected\");\n    } else {\n      setAddress(accounts[0]);\n      Logger.info(\"Account changed\", { address: accounts[0] });\n    }\n  }, []);\n\n  // Handle chain changes\n  const handleChainChanged = useCallback((chainIdHex: string) => {\n    const newChainId = parseInt(chainIdHex, 16);\n    setChainId(newChainId);\n    Logger.info(\"Chain changed\", { chainId: newChainId });\n\n    // Reload the page when chain changes to ensure all state is fresh\n    window.location.reload();\n  }, []);\n\n  // Initialize provider and check for existing connection\n  useEffect(() => {\n    const initProvider = async () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        try {\n          // Check if already connected\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n          if (accounts.length > 0) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const network = await provider.getNetwork();\n\n            setProvider(provider);\n            setAddress(accounts[0]);\n            setChainId(Number(network.chainId));\n            Logger.info(\"Restored existing connection\", {\n              address: accounts[0],\n              chainId: network.chainId,\n            });\n          }\n        } catch (err: unknown) {\n          // Clear any existing connection state\n          setProvider(null);\n          setAddress(null);\n          setChainId(null);\n\n          // Handle unauthorized error specifically\n          if (hasErrorMessage(err, \"has not been authorized\")) {\n            const error = new Error(\n              'Wallet connection needs authorization. Please click \"Connect\" to continue.',\n            );\n            setError(error);\n            Logger.info(\"Wallet needs reauthorization\");\n          } else {\n            Logger.error(\"Failed to restore connection\", { error: err });\n          }\n        }\n      }\n    };\n\n    initProvider();\n  }, []);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      window.ethereum.on(\"disconnect\", () => {\n        setProvider(null);\n        setAddress(null);\n        setChainId(null);\n      });\n\n      return () => {\n        if (window.ethereum?.removeListener) {\n          window.ethereum.removeListener(\n            \"accountsChanged\",\n            handleAccountsChanged,\n          );\n          window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          window.ethereum.removeListener(\"disconnect\", () => {\n            // Empty handler for disconnect event cleanup\n          });\n        }\n      };\n    }\n    return undefined;\n  }, [handleAccountsChanged, handleChainChanged]);\n\n  const switchChain = useCallback(async (targetChainId: number) => {\n    if (typeof window.ethereum === \"undefined\") {\n      throw new Error(\"Please install MetaMask to switch networks\");\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n      });\n      Logger.info(\"Switched network\", { chainId: targetChainId });\n    } catch (error: unknown) {\n      // If the chain hasn't been added to MetaMask\n      if (error.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [MOONBASE_CHAIN_INFO],\n          });\n          Logger.info(\"Added Moonbase Alpha network\");\n        } catch (addError) {\n          Logger.error(\"Failed to add network\", { error: addError });\n          throw new Error(\"Failed to add Moonbase Alpha network\");\n        }\n      } else {\n        Logger.error(\"Failed to switch network\", { error });\n        throw error;\n      }\n    }\n  }, []);\n\n  const connect = useCallback(async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      const error = new Error(\"Please install MetaMask to connect\");\n      Logger.error(\"MetaMask not found\", { error });\n      setError(error);\n      throw error;\n    }\n\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error(\"No accounts found\");\n      }\n\n      // Create Web3 provider\n      const provider = new ethers.BrowserProvider(window.ethereum);\n\n      // Get connected chain ID\n      const network = await provider.getNetwork();\n      const currentChainId = Number(network.chainId);\n\n      // Set provider first so it's available for chain switching\n      setProvider(provider);\n\n      // Switch to Moonbase Alpha if on wrong network\n      if (currentChainId !== CHAIN_IDS.MOONBASE) {\n        try {\n          await switchChain(CHAIN_IDS.MOONBASE);\n        } catch (switchError: unknown) {\n          // If user rejected the switch, throw error\n          if (switchError?.code === 4001) {\n            throw new Error(\"Please switch to Moonbase Alpha (TestNet)\");\n          }\n          // For other errors, log warning but continue\n          Logger.warn(\"Failed to switch to Moonbase Alpha\", {\n            error: switchError,\n          });\n        }\n      }\n\n      // Get chain ID again in case it changed\n      const finalNetwork = await provider.getNetwork();\n      setChainId(Number(finalNetwork.chainId));\n\n      // Set connected account\n      setAddress(accounts[0]);\n\n      Logger.info(\"Wallet connected successfully\", {\n        address: accounts[0],\n        chainId: Number(finalNetwork.chainId),\n      });\n    } catch (err: unknown) {\n      // Handle user rejected request\n      if (hasErrorCode(err, 4001)) {\n        const error = new Error(\"User rejected wallet connection\");\n        setError(error);\n        throw error;\n      }\n\n      // Handle other errors\n      const message = err?.message || \"Failed to connect wallet\";\n      const error = new Error(message);\n      Logger.error(\"Wallet connection failed\", { error });\n      setError(error);\n      throw error;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [switchChain]);\n\n  const disconnect = useCallback(async () => {\n    try {\n      // Clear state immediately\n      setProvider(null);\n      setAddress(null);\n      setChainId(null);\n      setError(null);\n\n      // Most wallets don't have a disconnect method, but we can try various approaches\n      if (window.ethereum) {\n        try {\n          // Try the WalletConnect disconnect method if available\n          if (typeof window.ethereum.disconnect === \"function\") {\n            await window.ethereum.disconnect();\n          }\n          // Try to clear permissions (MetaMask)\n          else if (typeof window.ethereum.request === \"function\") {\n            try {\n              await window.ethereum.request({\n                method: \"wallet_revokePermissions\",\n                params: [{ eth_accounts: {} }],\n              });\n            } catch (revokeError) {\n              // Silently ignore if method doesn't exist\n              Logger.info(\"Revoke permissions not supported\", {\n                error: revokeError,\n              });\n            }\n          }\n        } catch (walletError) {\n          // Log but don't throw - state is already cleared\n          Logger.info(\"Wallet-specific disconnect failed, but state cleared\", {\n            error: walletError,\n          });\n        }\n      }\n\n      Logger.info(\"Wallet disconnected successfully\");\n    } catch (err) {\n      Logger.error(\"Error during wallet disconnect\", { error: err });\n      // Don't throw error - we still want to clear the state\n    }\n  }, []);\n\n  return (\n    <Web3Context.Provider\n      value={{\n        provider,\n        address,\n        chainId,\n        isConnected: Boolean(address),\n        isConnecting,\n        connect,\n        disconnect,\n        error,\n        switchChain,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n}\n\n// eslint-disable-next-line react-refresh/only-export-components\n/**\n * Hook to access Web3 context for blockchain interactions\n * Provides wallet connection state, provider access, and connection methods\n * @returns Web3ContextType containing wallet state and blockchain interaction methods\n * @throws Error if used outside of Web3Provider\n */\nexport function useWeb3() {\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error(\"useWeb3 must be used within a Web3Provider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/__tests__/AuthContext.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":622,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":622,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":625,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":625,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":628,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":628,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":631,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":631,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/data/__tests__/charities.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/data/charities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/useAuthActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/useAuthState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useAdminPanel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharityProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharityVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCountries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDonationAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDonorData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTransactionForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTransactionTracking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTranslation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useVolunteerVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWallet.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWalletAlias.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWithdrawals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useCharity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useContract.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useDonation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useScheduledDonation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useTransactionForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/__tests__/en.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/__tests__/index.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/de.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/en.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/es.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/fr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/hi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ja.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ko.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/th.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/vi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/zh-CN.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/zh-TW.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/lib/sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/lib/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/middleware/errorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/middleware/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityBrowser.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/ComingSoon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/ContributionTracker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Documentation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/DonorPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/GiveDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Governance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Legal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/PortfolioFundDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Privacy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/SentryTest.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'nonExistentFunction' is not defined.","line":111,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/VolunteerOpportunities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/__tests__/CharityPortal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/__tests__/GiveDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/admin/AdminDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/CleanWaterInitiative.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/EducationAccessProgram.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/ReforestationProject.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/ClimateActionNow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/EducationForAll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/GlobalWaterFoundation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charity/CreateOpportunity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/donor/ScheduledDonationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/EducationPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/EnvironmentPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/PovertyPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/volunteer/VerifyContribution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/RouteTransition.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/__tests__/index.test.tsx","messages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":64,"column":7,"nodeType":"Identifier","messageId":"noAssertions","endLine":64,"endColumn":9},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":76,"column":7,"nodeType":"Identifier","messageId":"noAssertions","endLine":76,"endColumn":9},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":88,"column":7,"nodeType":"Identifier","messageId":"noAssertions","endLine":88,"endColumn":9},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":137,"column":7,"nodeType":"Identifier","messageId":"noAssertions","endLine":137,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { setupAllRouteMocks } from '@/test-utils/routeMocks';\nimport { AppRoutes } from '../index';\n\n// Setup all route mocks using shared utility\nsetupAllRouteMocks();\n\n// Mock auth context\njest.mock('@/contexts/AuthContext');\n\nconst mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;\n\ndescribe('AppRoutes', () => {\n  const renderWithRouter = (initialEntries = ['/']) => {\n    return render(\n      <MemoryRouter initialEntries={initialEntries}>\n        <AppRoutes />\n      </MemoryRouter>\n    );\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Public Routes', () => {\n    beforeEach(() => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        userType: null,\n        loading: false,\n        error: null,\n        login: jest.fn(),\n        logout: jest.fn(),\n        register: jest.fn(),\n        resetPassword: jest.fn(),\n        loginWithGoogle: jest.fn(),\n        refreshSession: jest.fn(),\n        sendUsernameReminder: jest.fn()\n      });\n    });\n\n    const publicRoutes = [\n      { path: '/', testId: 'home', name: 'Home' },\n      { path: '/login', testId: 'login', name: 'Login' },\n      { path: '/register', testId: 'register', name: 'Register' },\n      { path: '/charities', testId: 'charity-browser', name: 'Charity Browser' },\n      { path: '/about', testId: 'about', name: 'About' },\n      { path: '/legal', testId: 'legal', name: 'Legal' },\n      { path: '/privacy', testId: 'privacy', name: 'Privacy' },\n      { path: '/whitepaper', testId: 'whitepaper', name: 'Whitepaper' }\n    ];\n\n    const testPublicRoute = async (path: string, testId: string, _name: string) => {\n      renderWithRouter([path]);\n      await waitFor(() => {\n        expect(screen.getByTestId(testId)).toBeInTheDocument();\n      });\n    };\n\n    for (const { path, testId, name } of publicRoutes) {\n      it(`renders ${name} page at ${path}`, async () => {\n        await testPublicRoute(path, testId, name);\n      });\n    }\n\n    const charityRoutes = [\n      { path: '/charities/global-water-foundation', testId: 'global-water', name: 'Global Water Foundation' },\n      { path: '/charities/education-for-all', testId: 'education-for-all', name: 'Education For All' },\n      { path: '/charities/climate-action-now', testId: 'climate-action', name: 'Climate Action Now' }\n    ];\n\n    for (const { path, testId, name } of charityRoutes) {\n      it(`renders ${name} page at ${path}`, async () => {\n        await testPublicRoute(path, testId, name);\n      });\n    }\n\n    const portfolioRoutes = [\n      { path: '/portfolios/environment', testId: 'environment-portfolio', name: 'Environment Portfolio' },\n      { path: '/portfolios/education', testId: 'education-portfolio', name: 'Education Portfolio' },\n      { path: '/portfolios/poverty', testId: 'poverty-portfolio', name: 'Poverty Portfolio' }\n    ];\n\n    for (const { path, testId, name } of portfolioRoutes) {\n      it(`renders ${name} page at ${path}`, async () => {\n        await testPublicRoute(path, testId, name);\n      });\n    }\n  });\n\n  describe('Protected Routes', () => {\n    const mockUser = {\n      id: 'user-123',\n      email: 'test@example.com',\n      user_metadata: { user_type: 'donor' },\n      app_metadata: {},\n      aud: 'authenticated',\n      created_at: new Date().toISOString()\n    };\n\n    beforeEach(() => {\n      mockUseAuth.mockReturnValue({\n        user: mockUser,\n        userType: 'donor',\n        loading: false,\n        error: null,\n        login: jest.fn(),\n        logout: jest.fn(),\n        register: jest.fn(),\n        resetPassword: jest.fn(),\n        loginWithGoogle: jest.fn(),\n        refreshSession: jest.fn(),\n        sendUsernameReminder: jest.fn()\n      });\n    });\n\n    const protectedRoutes = [\n      { path: '/dashboard', testId: 'give-dashboard', name: 'Give Dashboard' },\n      { path: '/charity-portal', testId: 'charity-portal', name: 'Charity Portal' },\n      { path: '/volunteer-dashboard', testId: 'volunteer-dashboard', name: 'Volunteer Dashboard' },\n      { path: '/admin', testId: 'admin-dashboard', name: 'Admin Dashboard' },\n      { path: '/contributions', testId: 'contribution-tracker', name: 'Contribution Tracker' },\n      { path: '/volunteer-opportunities', testId: 'volunteer-opportunities', name: 'Volunteer Opportunities' }\n    ];\n\n    const testProtectedRoute = async (path: string, _name: string) => {\n      renderWithRouter([path]);\n      await waitFor(() => {\n        expect(screen.getByTestId('protected-route')).toBeInTheDocument();\n      });\n    };\n\n    for (const { path, testId: _testId, name } of protectedRoutes) {\n      it(`renders ${name} page at ${path} when authenticated`, async () => {\n        await testProtectedRoute(path, name);\n      });\n    }\n  });\n\n  describe('Loading State', () => {\n    it('shows loading spinner when auth is loading', () => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        userType: null,\n        loading: true,\n        error: null,\n        login: jest.fn(),\n        logout: jest.fn(),\n        register: jest.fn(),\n        resetPassword: jest.fn(),\n        loginWithGoogle: jest.fn(),\n        refreshSession: jest.fn(),\n        sendUsernameReminder: jest.fn()\n      });\n\n      renderWithRouter(['/']);\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles auth errors gracefully', () => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        userType: null,\n        loading: false,\n        error: 'Authentication failed',\n        login: jest.fn(),\n        logout: jest.fn(),\n        register: jest.fn(),\n        resetPassword: jest.fn(),\n        loginWithGoogle: jest.fn(),\n        refreshSession: jest.fn(),\n        sendUsernameReminder: jest.fn()\n      });\n\n      expect(() => renderWithRouter(['/'])).not.toThrow();\n    });\n  });\n\n  describe('Lazy Loading', () => {\n    it('handles lazy-loaded components', async () => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        userType: null,\n        loading: false,\n        error: null,\n        login: jest.fn(),\n        logout: jest.fn(),\n        register: jest.fn(),\n        resetPassword: jest.fn(),\n        loginWithGoogle: jest.fn(),\n        refreshSession: jest.fn(),\n        sendUsernameReminder: jest.fn()\n      });\n\n      renderWithRouter(['/']);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('home')).toBeInTheDocument();\n      });\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/styles/__tests__/colors.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/styles/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/styles/colors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/authTestHelpers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/jestSetup.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/mockSetup.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/routeMocks.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/supabaseMocks.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/templates.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/testHelpers.test.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/testUtilities.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/types.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/__tests__/validationTestData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/authTestHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/fileMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/jest.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/jestSetup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/mockSetup.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":10,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":10,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":25,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":25,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":41,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":41,"endColumn":45},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":54,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":54,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":64,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":64,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":77,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":77,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":89,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":89,"endColumn":24},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":98,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":98,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":103,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":103,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":141,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":141,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":150,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":150,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":170,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":170,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":227,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":227,"endColumn":32}],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared mock configurations for tests\nimport React from 'react'; // eslint-disable-line no-unused-vars\nimport { MockButtonProps, MockInputProps, MockCardProps, MockUIComponentProps } from './types';\n\n/**\n * Creates a mock Web3 context object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock Web3 context object\n */\nexport const createMockWeb3 = (overrides = {}) => ({\n  address: null,\n  chainId: null,\n  isConnected: false,\n  connect: jest.fn(),\n  disconnect: jest.fn(),\n  switchChain: jest.fn(),\n  ...overrides,\n});\n\n/**\n * Creates a mock wallet alias hook object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock wallet alias hook object\n */\nexport const createMockWalletAlias = (overrides = {}) => ({\n  alias: null,\n  aliases: {},\n  isLoading: false,\n  loading: false,\n  error: null,\n  setWalletAlias: jest.fn(),\n  deleteWalletAlias: jest.fn(),\n  ...overrides,\n});\n\n/**\n * Creates a mock volunteer verification hook object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock volunteer verification hook object\n */\nexport const createMockVolunteerVerification = (overrides = {}) => ({\n  verifyHours: jest.fn(),\n  acceptApplication: jest.fn(),\n  loading: false,\n  error: null,\n  ...overrides,\n});\n\n/**\n * Creates a mock translation hook object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock translation hook object\n */\nexport const createMockTranslation = (overrides = {}) => ({\n  t: jest.fn((key: string, fallback?: string) => fallback || key),\n  ...overrides,\n});\n\n/**\n * Creates a mock auth context object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock auth context object\n */\nexport const createMockAuth = (overrides = {}) => ({\n  user: null,\n  userType: null,\n  signOut: jest.fn(),\n  loading: false,\n  ...overrides,\n});\n\n/**\n * Creates a mock profile hook object for testing\n * @param overrides - Properties to override in the default mock\n * @returns Mock profile hook object\n */\nexport const createMockProfile = (overrides = {}) => ({\n  profile: null,\n  loading: false,\n  error: null,\n  refetch: jest.fn(),\n  ...overrides,\n});\n\n// Common mock implementations\n/**\n * Mock logger object for testing\n */\nexport const mockLogger = {\n  error: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n};\n\n/**\n * Mock date formatting function for testing\n */\nexport const mockFormatDate = jest.fn((date: string) => `Formatted: ${date}`);\n\n/**\n * Mock address shortening function for testing\n */\nexport const mockShortenAddress = jest.fn((address: string) => \n  `${address.slice(0, 6)}...${address.slice(-4)}`\n);\n\n// Mock React components using shared types\n// These are kept for backward compatibility with existing tests\n\n/**\n * Mock Button component for testing\n * @param props - Button component props\n * @returns Mock button element\n */\nexport const MockButton = (props: MockButtonProps) => (\n  <button {...props} data-variant={props.variant}>{props.children}</button>\n);\n\n/**\n * Mock Input component for testing\n * @param props - Input component props\n * @returns Mock input element\n */\nexport const MockInput = (props: MockInputProps) => (\n  <input {...props} data-testid=\"alias-input\" />\n);\n\n/**\n * Mock Card component for testing\n * @param props - Card component props\n * @returns Mock card element\n */\nexport const MockCard = (props: MockCardProps) => (\n  <div {...props} data-testid=\"card\">{props.children}</div>\n);\n\n// Common test data\n/**\n * Common test wallet addresses\n */\nexport const testAddresses = {\n  mainWallet: '0x1234567890123456789012345678901234567890',\n  shortAddress: '0x1234...7890',\n};\n\n\n/**\n * Default props for test components\n */\nexport const testPropsDefaults = {\n  applicationAcceptance: {\n    applicationId: 'app-123',\n    applicantName: 'John Doe',\n    opportunityTitle: 'Beach Cleanup Volunteer',\n  },\n  volunteerHours: {\n    hoursId: 'hours-123',\n    volunteerId: 'volunteer-456',\n    volunteerName: 'Jane Smith',\n    hours: 8,\n    datePerformed: '2024-01-15',\n    description: 'Helped with beach cleanup and waste sorting',\n  },\n};\n\n/**\n * Setup common mock implementations used across multiple test files\n * This centralizes repetitive mocking patterns to reduce duplication\n */\nexport const setupCommonMocks = () => {\n  // Mock date utilities\n  jest.mock('@/utils/date', () => ({\n    formatDate: jest.fn((date: string, includeTime?: boolean) => \n      includeTime ? `${date} 10:00 AM` : date\n    ),\n  }));\n\n  // Mock logger\n  jest.mock('@/utils/logger', () => ({\n    Logger: {\n      error: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn(),\n    },\n  }));\n\n  // Mock common UI components\n  jest.mock('@/components/ui/LoadingSpinner', () => ({\n    LoadingSpinner: ({ size }: { size?: string }) => (\n      <div data-testid=\"loading-spinner\" data-size={size}>Loading...</div>\n    ),\n  }));\n\n  jest.mock('@/components/ui/Button', () => ({\n    Button: ({ children, onClick, variant, disabled, className, ...props }: MockUIComponentProps) => (\n      <button \n        onClick={onClick}\n        disabled={disabled}\n        data-variant={variant} \n        className={className}\n        {...props}\n      >\n        {children}\n      </button>\n    ),\n  }));\n\n  jest.mock('@/components/ui/Card', () => ({\n    Card: ({ children, className, ...props }: MockUIComponentProps) => (\n      <div className={className} {...props}>{children}</div>\n    ),\n  }));\n\n  jest.mock('@/components/CurrencyDisplay', () => ({\n    CurrencyDisplay: ({ amount }: { amount: number }) => (\n      <span data-testid=\"currency-display\">${amount}</span>\n    ),\n  }));\n};\n\n/**\n * Creates a standardized mock Supabase client for testing\n * @param customResponses - Custom responses for specific tables\n * @returns Mock Supabase client object\n */\nexport const createMockSupabase = (customResponses = {}) => ({\n  from: jest.fn((table: string) => {\n    const defaultResponse = { data: [], error: null };\n    const customResponse = customResponses[table] || defaultResponse;\n    \n    return {\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve(customResponse)),\n          single: jest.fn(() => Promise.resolve(customResponse)),\n          order: jest.fn(() => Promise.resolve(customResponse)),\n          in: jest.fn(() => ({\n            order: jest.fn(() => Promise.resolve(customResponse)),\n          })),\n        })),\n        order: jest.fn(() => Promise.resolve(customResponse)),\n        single: jest.fn(() => Promise.resolve(customResponse)),\n      })),\n    };\n  }),\n});","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/routeMocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/styleMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/supabaseMocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/templates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/testHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test-utils/validationTestData.ts","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":49,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/mocks/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/mocks/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/utils.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":52,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":52,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/__tests__/charity.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/__tests__/volunteer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/blockchain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/charity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/contribution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/volunteer.ts","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ENGLISH' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'SPANISH' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'GERMAN' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'FRENCH' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'JAPANESE' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/caching.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/cn.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/date.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/env.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/errors.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/inputValidation.test.ts","messages":[],"suppressedMessages":[{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":7,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":7,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":11,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":11,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":17,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":17,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":21,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":21,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":27,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":27,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":31,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":31,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":71,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":71,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":75,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":75,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":79,"column":5,"nodeType":"Identifier","messageId":"noAssertions","endLine":79,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/money.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/volunteer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/caching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/date.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/errorBoundary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/inputValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/money.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/__tests__/caching.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/__tests__/metrics.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/caching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/sanitizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/volunteer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/web3.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/vite-env.d.ts","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Window' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ImportMeta' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]