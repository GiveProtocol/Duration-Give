[{"filePath":"/home/drigo/projects/Duration/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/AppNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ConnectionTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/CurrencyDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Logo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/SettingsMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/TranslatedText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/CharityLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/CharityVettingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/DonorLogin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/DonorRegistration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/auth/ForgotUsername.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CauseGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/CharityStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/OpportunityManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/PortfolioGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/WithdrawalForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/WithdrawalHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/CharityProfileCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/CharityProfileSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/profile/ProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/stats/CharityStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/stats/StatCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalRequestForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/charity/withdrawals/WithdrawalTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/ContributionFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationExportModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationLeaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/DonationStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/GlobalContributions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/GlobalStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/LeaderboardRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/PersonalContributions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/RecentDonations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/RegionFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/TimeRangeFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/VolunteerImpact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/contribution/VolunteerLeaderboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/DonationHistory.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Download, Filter, Calendar } from 'lucide-react';\nimport { formatCurrency } from '@/utils/money';\nimport { formatDate } from '@/utils/date';\nimport { Button } from '@/components/ui/Button';\nimport { Transaction } from '@/types/contribution';\nimport { DonationExportModal } from '@/components/contribution/DonationExportModal';\n\ninterface DonationHistoryProps {\n  donations: Transaction[];\n}\n\nexport const DonationHistory: React.FC<DonationHistoryProps> = ({ donations }) => {\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [timeFilter, setTimeFilter] = useState('all');\n\n  const handleTimeFilterChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setTimeFilter(e.target.value);\n  }, []);\n\n  const handleShowExportModal = useCallback(() => {\n    setShowExportModal(true);\n  }, []);\n\n  const handleCloseExportModal = useCallback(() => {\n    setShowExportModal(false);\n  }, []);\n\n  const filteredDonations = donations.filter(donation => {\n    if (timeFilter === 'all') return true;\n    \n    const donationDate = new Date(donation.timestamp);\n    const now = new Date();\n    \n    switch (timeFilter) {\n      case 'week': {\n        const weekAgo = new Date();\n        weekAgo.setDate(now.getDate() - 7);\n        return donationDate >= weekAgo;\n      }\n      case 'month': {\n        const monthAgo = new Date();\n        monthAgo.setMonth(now.getMonth() - 1);\n        return donationDate >= monthAgo;\n      }\n      case 'year': {\n        const yearAgo = new Date();\n        yearAgo.setFullYear(now.getFullYear() - 1);\n        return donationDate >= yearAgo;\n      }\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Donation History</h2>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5 text-gray-400\" />\n              <select\n                value={timeFilter}\n                onChange={handleTimeFilterChange}\n                className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n                aria-label=\"Filter by time period\"\n              >\n                <option value=\"all\">All Time</option>\n                <option value=\"week\">Past Week</option>\n                <option value=\"month\">Past Month</option>\n                <option value=\"year\">Past Year</option>\n              </select>\n            </div>\n            <Button\n              onClick={handleShowExportModal}\n              variant=\"secondary\"\n              className=\"flex items-center\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Charity</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Amount</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Fiat Value</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Transaction ID</th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200\">\n            {filteredDonations.map((donation) => (\n              <tr key={donation.id}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {formatDate(donation.timestamp, true)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {donation.metadata?.organization || 'Unknown'}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {donation.amount} {donation.cryptoType || 'GLMR'}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {donation.fiatValue ? formatCurrency(donation.fiatValue) : 'N/A'}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  {donation.hash ? (\n                    <a \n                      href={`https://moonscan.io/tx/${donation.hash}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-indigo-600 hover:text-indigo-900 truncate block max-w-xs\"\n                    >\n                      {donation.hash.substring(0, 10)}...\n                    </a>\n                  ) : (\n                    'N/A'\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                    donation.status === 'completed' \n                      ? 'bg-green-100 text-green-800'\n                      : donation.status === 'pending'\n                      ? 'bg-yellow-100 text-yellow-800'\n                      : 'bg-red-100 text-red-800'\n                  }`}>\n                    {donation.status.charAt(0).toUpperCase() + donation.status.slice(1)}\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Export Modal */}\n      {showExportModal && (\n        <DonationExportModal\n          donations={donations}\n          onClose={handleCloseExportModal}\n        />\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/DonorStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/donor/ScheduledDonations.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'XCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":42},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSchedules'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSchedules]","fix":{"range":[1297,1299],"text":"[fetchSchedules]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useScheduledDonation } from '@/hooks/web3/useScheduledDonation';\nimport { Card } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Calendar, AlertTriangle, XCircle } from 'lucide-react';\nimport { formatDate } from '@/utils/date';\nimport { useToast } from '@/contexts/ToastContext';\nimport { Logger } from '@/utils/logger';\n\ninterface ScheduledDonation {\n  id: number;\n  charity: string;\n  token: string;\n  totalAmount: string;\n  amountPerMonth: string;\n  monthsRemaining: number;\n  nextDistribution: Date;\n  active: boolean;\n}\n\nexport const ScheduledDonations: React.FC = () => {\n  const { getDonorSchedules, cancelSchedule, loading, error } = useScheduledDonation();\n  const [schedules, setSchedules] = useState<ScheduledDonation[]>([]);\n  const [loadingSchedules, setLoadingSchedules] = useState(true);\n  const [selectedSchedule, setSelectedSchedule] = useState<ScheduledDonation | null>(null);\n  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);\n  const [cancelError, setCancelError] = useState<string | null>(null);\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    fetchSchedules();\n  }, []);\n\n  const fetchSchedules = async () => {\n    try {\n      setLoadingSchedules(true);\n      const donorSchedules = await getDonorSchedules();\n      setSchedules(donorSchedules);\n    } catch (err) {\n      Logger.error('Failed to fetch scheduled donations:', err);\n    } finally {\n      setLoadingSchedules(false);\n    }\n  };\n\n  const handleCancelClick = useCallback((schedule: ScheduledDonation) => {\n    setSelectedSchedule(schedule);\n    setCancelError(null);\n    setIsCancelModalOpen(true);\n  }, []);\n\n  const handleCloseModal = useCallback(() => {\n    setIsCancelModalOpen(false);\n  }, []);\n\n  const createCancelHandler = useCallback((schedule: ScheduledDonation) => {\n    return () => handleCancelClick(schedule);\n  }, [handleCancelClick]);\n\n  const handleConfirmCancel = async () => {\n    if (!selectedSchedule) return;\n\n    try {\n      setCancelError(null);\n      await cancelSchedule(selectedSchedule.id);\n      showToast('success', 'Scheduled donation cancelled', 'Your monthly donation schedule has been cancelled and remaining funds returned to your wallet.');\n      setIsCancelModalOpen(false);\n      fetchSchedules();\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to cancel scheduled donation';\n      setCancelError(errorMessage);\n      \n      // Check if user rejected transaction\n      if (errorMessage.includes('user rejected') || errorMessage.includes('User denied')) {\n        setCancelError('Transaction was rejected. Please confirm the transaction in your wallet to cancel the schedule.');\n      }\n    }\n  };\n\n  if (loadingSchedules) {\n    return (\n      <div className=\"flex justify-center items-center py-8\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg\">\n        <div className=\"flex\">\n          <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n          <span>{error}</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (schedules.length === 0) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Scheduled Donations</h3>\n          <p className=\"text-gray-500 mb-4\">You don&apos;t have any active monthly donation schedules.</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div>\n      <Card className=\"mb-6\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Monthly Donation Schedules</h2>\n            <Button\n              variant=\"secondary\"\n              onClick={fetchSchedules}\n              disabled={loading}\n            >\n              {loading ? 'Refreshing...' : 'Refresh'}\n            </Button>\n          </div>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {schedules.map((schedule) => (\n            <div key={schedule.id} className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row md:justify-between md:items-start\">\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <Calendar className=\"h-5 w-5 text-indigo-500 mr-2\" />\n                    <h3 className=\"text-lg font-medium text-gray-900\">Monthly Donation to {schedule.charity.substring(0, 6)}&hellip;{schedule.charity.substring(38)}</h3>\n                  </div>\n                  <div className=\"space-y-1 text-sm text-gray-500\">\n                    <p>Total Amount: {schedule.totalAmount} tokens</p>\n                    <p>Monthly Payment: {schedule.amountPerMonth} tokens</p>\n                    <p>Months Remaining: {schedule.monthsRemaining} of 12</p>\n                    <p>Next Distribution: {formatDate(schedule.nextDistribution.toISOString())}</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={createCancelHandler(schedule)}\n                  disabled={loading}\n                  className=\"mt-4 md:mt-0\"\n                >\n                  Cancel Schedule\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Cancel Confirmation Modal */}\n      {isCancelModalOpen && selectedSchedule && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"bg-red-100 rounded-full p-3\">\n                  <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n                </div>\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 text-center mb-2\">Confirm Cancellation</h3>\n              <p className=\"text-sm text-gray-500 text-center mb-6\">\n                Are you sure you want to cancel your monthly donation schedule? The remaining funds ({parseFloat(selectedSchedule.amountPerMonth) * selectedSchedule.monthsRemaining} tokens) will be returned to your wallet.\n              </p>\n              \n              {cancelError && (\n                <div className=\"mb-4 p-3 bg-red-50 text-red-600 rounded-md\">\n                  {cancelError}\n                </div>\n              )}\n              \n              <div className=\"flex justify-center space-x-3\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={handleCloseModal}\n                >\n                  Keep Schedule\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  onClick={handleConfirmCancel}\n                  disabled={loading}\n                >\n                  {loading ? 'Processing...' : 'Cancel Schedule'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/ActionButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/FeatureCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/Hero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/home/ProtocolStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/layout/StaticPageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/layout/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/settings/WalletAliasSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleDelete' function makes the dependencies of useCallback Hook (at line 71) change on every render. Move it inside the useCallback callback. Alternatively, wrap the definition of 'handleDelete' in its own useCallback() Hook.","line":59,"column":9,"nodeType":"VariableDeclarator","endLine":63,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport { useWalletAlias } from \"@/hooks/useWalletAlias\";\nimport { useWeb3 } from \"@/contexts/Web3Context\";\nimport { Button } from \"@/components/ui/Button\";\nimport { Input } from \"@/components/ui/Input\";\nimport { Card } from \"@/components/ui/Card\";\nimport { Wallet, Edit, Trash2, AlertCircle, Check } from \"lucide-react\";\nimport { shortenAddress } from \"@/utils/web3\";\n\nexport const WalletAliasSettings: React.FC = () => {\n  const { address, isConnected } = useWeb3();\n  const { alias, aliases, loading, error, setWalletAlias, deleteWalletAlias } =\n    useWalletAlias();\n  const [newAlias, setNewAlias] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setValidationError(null);\n\n    // Validate alias\n    if (!newAlias.trim()) {\n      setValidationError(\"Alias cannot be empty\");\n      return;\n    }\n\n    if (newAlias.length < 3 || newAlias.length > 20) {\n      setValidationError(\"Alias must be between 3 and 20 characters\");\n      return;\n    }\n\n    if (!/^[a-zA-Z0-9_-]+$/.test(newAlias)) {\n      setValidationError(\n        \"Alias can only contain letters, numbers, underscores, and hyphens\",\n      );\n      return;\n    }\n\n    const success = await setWalletAlias(newAlias);\n    if (success) {\n      setNewAlias(\"\");\n      setEditMode(false);\n    }\n  };\n\n  const handleEdit = () => {\n    setNewAlias(alias || \"\");\n    setEditMode(true);\n    setValidationError(null);\n  };\n\n  const handleCancel = () => {\n    setNewAlias(\"\");\n    setEditMode(false);\n    setValidationError(null);\n  };\n\n  const handleDelete = async (aliasId: string) => {\n    if (confirm(\"Are you sure you want to delete this wallet alias?\")) {\n      await deleteWalletAlias(aliasId);\n    }\n  };\n\n  // Callback handlers for better performance\n  const handleStartEdit = useCallback(() => setEditMode(true), []);\n  const createDeleteHandler = useCallback(\n    (aliasId: string) => {\n      return () => handleDelete(aliasId);\n    },\n    [handleDelete],\n  );\n\n  if (!isConnected) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"flex items-center mb-4\">\n          <Wallet className=\"h-5 w-5 text-gray-500 mr-2\" />\n          <h2 className=\"text-lg font-medium text-gray-900\">Wallet Alias</h2>\n        </div>\n        <p className=\"text-gray-600 mb-4\">\n          Connect your wallet to set a public alias that will be displayed on\n          the contribution tracker.\n        </p>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center\">\n          <Wallet className=\"h-5 w-5 text-gray-500 mr-2\" />\n          <h2 className=\"text-lg font-medium text-gray-900\">Wallet Alias</h2>\n        </div>\n        {!editMode && alias && (\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={handleEdit}\n            className=\"flex items-center\"\n          >\n            <Edit className=\"h-4 w-4 mr-1\" />\n            Edit\n          </Button>\n        )}\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 text-red-600 rounded-md flex items-start\">\n          <AlertCircle className=\"h-5 w-5 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n\n      <div className=\"mb-4\">\n        <p className=\"text-gray-600 mb-2\">\n          Set a public alias for your wallet address. This alias will be\n          displayed on the contribution tracker instead of your wallet address.\n        </p>\n        <div className=\"bg-gray-50 p-3 rounded-md\">\n          <p className=\"text-sm text-gray-500\">Current Wallet</p>\n          <p className=\"font-mono text-gray-900\">\n            {shortenAddress(address || \"\")}\n          </p>\n        </div>\n      </div>\n\n      {editMode ? (\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"Wallet Alias\"\n            value={newAlias}\n            onChange={(e) => setNewAlias(e.target.value)}\n            placeholder=\"Enter a public alias for your wallet\"\n            error={validationError || undefined}\n          />\n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex items-center\"\n            >\n              <Check className=\"h-4 w-4 mr-1\" />\n              {loading ? \"Saving...\" : \"Save Alias\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              disabled={loading}\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      ) : (\n        <div>\n          {alias ? (\n            <div className=\"bg-indigo-50 p-3 rounded-md mb-4\">\n              <p className=\"text-sm text-gray-500\">Current Alias</p>\n              <p className=\"font-medium text-indigo-900\">{alias}</p>\n            </div>\n          ) : (\n            <div className=\"mb-4\">\n              <p className=\"text-gray-600\">\n                You haven&apos;t set an alias for this wallet yet. Set an alias\n                to make your contributions more recognizable.\n              </p>\n              <Button onClick={handleStartEdit} className=\"mt-3\">\n                Set Wallet Alias\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {aliases.length > 0 && (\n        <div className=\"mt-6\">\n          <h3 className=\"text-md font-medium text-gray-900 mb-3\">\n            Your Wallet Aliases\n          </h3>\n          <div className=\"space-y-3\">\n            {aliases.map((item) => (\n              <div\n                key={item.id}\n                className=\"flex justify-between items-center p-3 bg-gray-50 rounded-md\"\n              >\n                <div>\n                  <p className=\"font-medium text-gray-900\">{item.alias}</p>\n                  <p className=\"text-xs text-gray-500 font-mono\">\n                    {shortenAddress(item.walletAddress)}\n                  </p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={createDeleteHandler(item.id)}\n                  className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Link from '@tiptap/extension-link';\nimport { Bold, Italic, Link as LinkIcon, List, ListOrdered, Heading1, Heading2, Undo, Redo } from 'lucide-react';\nimport { Button } from './Button';\nimport { cn } from '@/utils/cn';\n\ninterface EditorProps {\n  content: string;\n  onChange: (content: string) => void;\n  className?: string;\n  placeholder?: string;\n}\n\ninterface MenuButtonProps {\n  onClick: () => void;\n  active?: boolean;\n  icon: React.ComponentType<{ className?: string }>;\n  title: string;\n}\n\nexport const Editor: React.FC<EditorProps> = ({\n  content,\n  onChange,\n  className,\n  placeholder = 'Start writing...'\n}) => {\n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n      Link.configure({\n        openOnClick: false,\n        HTMLAttributes: {\n          class: 'text-indigo-600 hover:text-indigo-800 underline'\n        }\n      })\n    ],\n    content,\n    onUpdate: ({ editor }) => {\n      onChange(editor.getHTML());\n    },\n    editorProps: {\n      attributes: {\n        class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-xl focus:outline-none max-w-none',\n        placeholder\n      }\n    }\n  });\n\n  const handleBold = useCallback(() => {\n    editor?.chain().focus().toggleBold().run();\n  }, [editor]);\n\n  const handleItalic = useCallback(() => {\n    editor?.chain().focus().toggleItalic().run();\n  }, [editor]);\n\n  const handleHeading1 = useCallback(() => {\n    editor?.chain().focus().toggleHeading({ level: 1 }).run();\n  }, [editor]);\n\n  const handleHeading2 = useCallback(() => {\n    editor?.chain().focus().toggleHeading({ level: 2 }).run();\n  }, [editor]);\n\n  const handleBulletList = useCallback(() => {\n    editor?.chain().focus().toggleBulletList().run();\n  }, [editor]);\n\n  const handleOrderedList = useCallback(() => {\n    editor?.chain().focus().toggleOrderedList().run();\n  }, [editor]);\n\n  const handleLink = useCallback(() => {\n    const url = window.prompt('Enter URL');\n    if (url) {\n      editor?.chain().focus().setLink({ href: url }).run();\n    }\n  }, [editor]);\n\n  const handleUndo = useCallback(() => {\n    editor?.chain().focus().undo().run();\n  }, [editor]);\n\n  const handleRedo = useCallback(() => {\n    editor?.chain().focus().redo().run();\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  const MenuButton = ({ onClick, active, icon: Icon, title }: MenuButtonProps) => (\n    <Button\n      type=\"button\"\n      variant=\"secondary\"\n      onClick={onClick}\n      className={cn(\n        'p-2',\n        active && 'bg-indigo-100 text-indigo-900'\n      )}\n      title={title}\n    >\n      <Icon className=\"h-4 w-4\" />\n    </Button>\n  );\n\n  return (\n    <div className={cn('border border-gray-200 rounded-lg', className)}>\n      <div className=\"border-b border-gray-200 p-2 flex flex-wrap gap-1\">\n        <MenuButton\n          onClick={handleBold}\n          active={editor.isActive('bold')}\n          icon={Bold}\n          title=\"Bold\"\n        />\n        <MenuButton\n          onClick={handleItalic}\n          active={editor.isActive('italic')}\n          icon={Italic}\n          title=\"Italic\"\n        />\n        <MenuButton\n          onClick={handleHeading1}\n          active={editor.isActive('heading', { level: 1 })}\n          icon={Heading1}\n          title=\"Heading 1\"\n        />\n        <MenuButton\n          onClick={handleHeading2}\n          active={editor.isActive('heading', { level: 2 })}\n          icon={Heading2}\n          title=\"Heading 2\"\n        />\n        <MenuButton\n          onClick={handleBulletList}\n          active={editor.isActive('bulletList')}\n          icon={List}\n          title=\"Bullet List\"\n        />\n        <MenuButton\n          onClick={handleOrderedList}\n          active={editor.isActive('orderedList')}\n          icon={ListOrdered}\n          title=\"Numbered List\"\n        />\n        <MenuButton\n          onClick={handleLink}\n          active={editor.isActive('link')}\n          icon={LinkIcon}\n          title=\"Add Link\"\n        />\n        <div className=\"ml-auto flex gap-1\">\n          <MenuButton\n            onClick={handleUndo}\n            icon={Undo}\n            title=\"Undo\"\n          />\n          <MenuButton\n            onClick={handleRedo}\n            icon={Redo}\n            title=\"Redo\"\n          />\n        </div>\n      </div>\n      <EditorContent\n        editor={editor}\n        className=\"p-4 min-h-[200px] max-h-[600px] overflow-y-auto bg-indigo-50\"\n      />\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/ImageWithFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/ImportantNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/OptimizedImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Tabs.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { cn } from '@/utils/cn';\n\ninterface TabsProps {\n  defaultValue: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsTriggerProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface TabsContentProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContext = React.createContext<{\n  value: string;\n  onChange: (value: string) => void;\n} | null>(null);\n\nexport const Tabs: React.FC<TabsProps> = ({ defaultValue, children, className }) => {\n  const [value, setValue] = React.useState(defaultValue);\n\n  return (\n    <TabsContext.Provider value={{ value, onChange: setValue }}>\n      <div className={cn('space-y-2', className)}>\n        {children}\n      </div>\n    </TabsContext.Provider>\n  );\n};\n\nexport const TabsList: React.FC<TabsListProps> = ({ children, className }) => {\n  return (\n    <div className={cn('flex space-x-1 rounded-lg bg-gray-100 p-1', className)}>\n      {children}\n    </div>\n  );\n};\n\nexport const TabsTrigger: React.FC<TabsTriggerProps> = ({ value, children, className }) => {\n  const context = React.useContext(TabsContext);\n  if (!context) throw new Error('TabsTrigger must be used within Tabs');\n\n  const isActive = context.value === value;\n\n  return (\n    <button\n      onClick={() => context.onChange(value)}\n      className={cn(\n        'px-3 py-1.5 text-sm font-medium rounded-md transition-all',\n        isActive\n          ? 'bg-white text-gray-900 shadow'\n          : 'text-gray-600 hover:text-gray-900',\n        className\n      )}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport const TabsContent: React.FC<TabsContentProps> = ({ value, children, className }) => {\n  const context = React.useContext(TabsContext);\n  if (!context) throw new Error('TabsContent must be used within Tabs');\n\n  if (context.value !== value) return null;\n\n  return (\n    <div className={className}>\n      {children}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/ui/Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ApplicationAcceptance.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'hash' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { CheckCircle, X, ExternalLink } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { useVolunteerVerification } from '@/hooks/useVolunteerVerification';\nimport { useTranslation } from '@/hooks/useTranslation';\nimport { Logger } from '@/utils/logger';\n\ninterface ApplicationAcceptanceProps {\n  applicationId: string;\n  applicantName: string;\n  opportunityTitle: string;\n  onAccepted?: (hash: string) => void;\n}\n\nexport const ApplicationAcceptance: React.FC<ApplicationAcceptanceProps> = ({\n  applicationId,\n  applicantName,\n  opportunityTitle,\n  onAccepted\n}) => {\n  const { acceptApplication, loading, error } = useVolunteerVerification();\n  const [acceptanceHash, setAcceptanceHash] = useState<string | null>(null);\n  const [isAccepted, setIsAccepted] = useState(false);\n  const { t } = useTranslation();\n\n  const handleAccept = async () => {\n    try {\n      const hash = await acceptApplication(applicationId);\n      if (hash) {\n        setAcceptanceHash(hash);\n        setIsAccepted(true);\n        onAccepted?.(hash);\n      }\n    } catch (err) {\n      Logger.error('Acceptance failed:', err);\n    }\n  };\n\n  if (isAccepted) {\n    return (\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <div className=\"flex items-center mb-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n          <h3 className=\"text-lg font-medium text-green-800\">{t('volunteer.applicationAccepted', 'Application Accepted')}</h3>\n        </div>\n        <p className=\"text-sm text-green-700 mb-3\">\n          {t('volunteer.applicationRecorded', 'The volunteer application has been accepted and recorded on the blockchain.')}\n        </p>\n        {acceptanceHash && (\n          <div className=\"bg-white p-3 rounded border border-green-200\">\n            <p className=\"text-xs text-gray-500 mb-1\">{t('volunteer.acceptanceHash', 'Acceptance Hash')}</p>\n            <div className=\"flex items-center\">\n              <code className=\"text-xs font-mono text-gray-800 break-all\">\n                {acceptanceHash}\n              </code>\n              <a \n                href={`https://moonbase.moonscan.io/tx/${acceptanceHash}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"ml-2 text-indigo-600 hover:text-indigo-800\"\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n              </a>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">{applicantName}</h3>\n          <p className=\"text-sm text-gray-500\">\n            {t('volunteer.appliedFor')}: {opportunityTitle}\n          </p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={handleAccept}\n            disabled={loading}\n            className=\"flex items-center\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            {loading ? t('volunteer.processing', 'Processing...') : t('volunteer.accept')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            className=\"flex items-center\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            {t('volunteer.reject')}\n          </Button>\n        </div>\n      </div>\n      \n      {error && (\n        <div className=\"p-3 bg-red-50 text-red-700 text-sm rounded-md\">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ApplicationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/ConsentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/OpportunityForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VerificationLookup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VolunteerHoursVerification.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'hash' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'volunteerId' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { CheckCircle, X, ExternalLink } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { useVolunteerVerification } from '@/hooks/useVolunteerVerification';\nimport { formatDate } from '@/utils/date';\nimport { useTranslation } from '@/hooks/useTranslation';\nimport { Logger } from '@/utils/logger';\n\ninterface VolunteerHoursVerificationProps {\n  hoursId: string;\n  volunteerId: string;\n  volunteerName: string;\n  hours: number;\n  datePerformed: string;\n  description?: string;\n  onVerified?: (hash: string) => void;\n}\n\nexport const VolunteerHoursVerification: React.FC<VolunteerHoursVerificationProps> = ({\n  hoursId,\n  volunteerId,\n  volunteerName,\n  hours,\n  datePerformed,\n  description,\n  onVerified\n}) => {\n  const { verifyHours, loading, error } = useVolunteerVerification();\n  const [verificationHash, setVerificationHash] = useState<string | null>(null);\n  const [isVerified, setIsVerified] = useState(false);\n  const { t } = useTranslation();\n\n  const handleVerify = async () => {\n    try {\n      const hash = await verifyHours(hoursId);\n      if (hash) {\n        setVerificationHash(hash);\n        setIsVerified(true);\n        onVerified?.(hash);\n      }\n    } catch (err) {\n      Logger.error('Verification failed:', err);\n    }\n  };\n\n  if (isVerified) {\n    return (\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n        <div className=\"flex items-center mb-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n          <h3 className=\"text-lg font-medium text-green-800\">{t('volunteer.verificationComplete', 'Verification Complete')}</h3>\n        </div>\n        <p className=\"text-sm text-green-700 mb-3\">\n          {t('volunteer.hoursVerified', 'The volunteer hours have been verified and recorded on the blockchain.')}\n        </p>\n        {verificationHash && (\n          <div className=\"bg-white p-3 rounded border border-green-200\">\n            <p className=\"text-xs text-gray-500 mb-1\">{t('volunteer.verificationHash', 'Verification Hash')}</p>\n            <div className=\"flex items-center\">\n              <code className=\"text-xs font-mono text-gray-800 break-all\">\n                {verificationHash}\n              </code>\n              <a \n                href={`https://moonbase.moonscan.io/tx/${verificationHash}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"ml-2 text-indigo-600 hover:text-indigo-800\"\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n              </a>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n      <div className=\"flex justify-between items-start mb-4\">\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">{volunteerName}</h3>\n          <p className=\"text-sm text-gray-500\">\n            {hours} {t('volunteer.hours')} {formatDate(datePerformed)}\n          </p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={handleVerify}\n            disabled={loading}\n            className=\"flex items-center\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            {loading ? t('volunteer.verifying', 'Verifying...') : t('volunteer.verify')}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            className=\"flex items-center\"\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            {t('volunteer.reject')}\n          </Button>\n        </div>\n      </div>\n      \n      {description && (\n        <div className=\"mb-4\">\n          <p className=\"text-sm text-gray-500 mb-1\">{t('volunteer.description')}</p>\n          <p className=\"text-sm text-gray-700\">{description}</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"p-3 bg-red-50 text-red-700 text-sm rounded-md\">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/volunteer/VolunteerVerificationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/ConnectButton.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'wallet' is defined but never used. Allowed unused args must match /^_/u.","line":155,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Wallet,\n  ChevronDown,\n  LogOut,\n  AlertTriangle,\n  ExternalLink,\n  RefreshCw,\n  User,\n} from \"lucide-react\";\nimport { useWeb3 } from \"@/contexts/Web3Context\";\nimport { useWallet, type WalletProvider } from \"@/hooks/useWallet\";\nimport { Button } from \"../ui/Button\";\nimport { shortenAddress } from \"@/utils/web3\";\nimport { Logger } from \"@/utils/logger\";\nimport { CHAIN_IDS } from \"@/config/contracts\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useWalletAlias } from \"@/hooks/useWalletAlias\";\n\ninterface AccountMenuHeaderProps {\n  address: string;\n  getInstalledWallets: () => WalletProvider[];\n  getExplorerUrl: () => string;\n  onCopyAddress: () => void;\n}\n\n/**\n * Header section of the account menu showing wallet connection info\n * @param address - The connected wallet address\n * @param getInstalledWallets - Function to get list of installed wallets\n * @param getExplorerUrl - Function to get blockchain explorer URL\n * @param onCopyAddress - Callback to copy wallet address\n */\nconst AccountMenuHeader: React.FC<AccountMenuHeaderProps> = ({\n  address,\n  getInstalledWallets,\n  getExplorerUrl,\n  onCopyAddress,\n}) => (\n  <div className=\"p-4\">\n    <div className=\"flex items-center justify-between mb-2\">\n      <span className=\"text-sm text-gray-500\">\n        Connected with {getInstalledWallets()[0]?.name || \"Wallet\"}\n      </span>\n    </div>\n    <div className=\"flex items-center justify-between\">\n      <span className=\"font-medium\">{shortenAddress(address)}</span>\n      <div className=\"flex items-center space-x-2\">\n        <button\n          onClick={onCopyAddress}\n          className=\"text-sm text-indigo-600 hover:text-indigo-500 font-medium transition-colors\"\n        >\n          Copy\n        </button>\n        <a\n          href={getExplorerUrl()}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"text-indigo-600 hover:text-indigo-500 transition-colors\"\n        >\n          <ExternalLink className=\"h-4 w-4\" />\n        </a>\n      </div>\n    </div>\n  </div>\n);\n\ninterface AccountMenuActionsProps {\n  alias: string | null;\n  onManageAlias: () => void;\n  onDisconnect: () => void;\n}\n\n/**\n * Actions section of the account menu with manage alias and disconnect buttons\n * @param alias - Optional user-defined alias for the wallet\n * @param onManageAlias - Callback to manage wallet alias\n * @param onDisconnect - Callback to disconnect the wallet\n */\nconst AccountMenuActions: React.FC<AccountMenuActionsProps> = ({\n  alias,\n  onManageAlias,\n  onDisconnect,\n}) => (\n  <div className=\"p-2\">\n    <button\n      onClick={onManageAlias}\n      className=\"flex w-full items-center px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 transition-colors rounded-md\"\n      role=\"menuitem\"\n    >\n      <User className=\"h-4 w-4 mr-2\" />\n      {alias ? \"Change Wallet Alias\" : \"Set Wallet Alias\"}\n    </button>\n    <button\n      onClick={onDisconnect}\n      className=\"flex w-full items-center px-4 py-3 text-sm text-red-600 hover:bg-gray-50 transition-colors rounded-md\"\n      role=\"menuitem\"\n    >\n      <LogOut className=\"h-4 w-4 mr-2\" />\n      Disconnect\n    </button>\n  </div>\n);\n\ninterface AccountMenuProps {\n  address: string;\n  alias: string | null;\n  getInstalledWallets: () => WalletProvider[];\n  getExplorerUrl: () => string;\n  onDisconnect: () => void;\n  onManageAlias: () => void;\n}\n\n/**\n * Dropdown menu component displayed when a wallet is connected\n * @param address - The connected wallet address\n * @param alias - Optional user-defined alias for the wallet\n * @param getInstalledWallets - Function to get list of installed wallets\n * @param getExplorerUrl - Function to get blockchain explorer URL for the address\n * @param onDisconnect - Callback to disconnect the wallet\n * @param onManageAlias - Callback to manage wallet alias\n */\nconst AccountMenu: React.FC<AccountMenuProps> = ({\n  address,\n  alias,\n  getInstalledWallets,\n  getExplorerUrl,\n  onDisconnect,\n  onManageAlias,\n}) => {\n  const handleCopyAddress = useCallback(() => {\n    navigator.clipboard.writeText(address);\n  }, [address]);\n\n  return (\n    <div className=\"absolute right-0 mt-2 w-72 rounded-lg shadow-lg bg-white ring-1 ring-gray-200 divide-y divide-gray-100 z-50\">\n      <AccountMenuHeader\n        address={address}\n        getInstalledWallets={getInstalledWallets}\n        getExplorerUrl={getExplorerUrl}\n        onCopyAddress={handleCopyAddress}\n      />\n      <AccountMenuActions\n        alias={alias}\n        onManageAlias={onManageAlias}\n        onDisconnect={onDisconnect}\n      />\n    </div>\n  );\n};\n\ninterface WalletSelectMenuProps {\n  getInstalledWallets: () => WalletProvider[];\n  onWalletSelect: (wallet: WalletProvider) => void;\n}\n\n/**\n * Dropdown menu component for selecting a wallet to connect\n * @param getInstalledWallets - Function to get list of installed wallets\n * @param onWalletSelect - Callback when a wallet is selected for connection\n */\nconst WalletSelectMenu: React.FC<WalletSelectMenuProps> = ({\n  getInstalledWallets,\n  onWalletSelect,\n}) => {\n  const handleWalletSelect = useCallback(\n    (wallet: WalletProvider) => () => {\n      onWalletSelect(wallet);\n    },\n    [onWalletSelect],\n  );\n\n  return (\n    <div className=\"absolute right-0 mt-2 w-72 rounded-lg shadow-lg bg-white ring-1 ring-gray-200 z-50\">\n      <div className=\"p-4 border-b border-gray-100\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Connect Wallet</h3>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Choose your preferred wallet provider\n        </p>\n      </div>\n      <div className=\"p-2\">\n        {getInstalledWallets().map((wallet) => (\n          <button\n            key={wallet.name}\n            onClick={handleWalletSelect(wallet)}\n            className=\"flex items-center w-full px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 transition-colors rounded-md\"\n            role=\"menuitem\"\n          >\n            <img\n              src={`/icons/${wallet.icon}.svg`}\n              alt=\"\"\n              className=\"w-8 h-8 mr-3\"\n              aria-hidden=\"true\"\n            />\n            <div className=\"flex flex-col items-start\">\n              <span className=\"font-medium text-gray-900\">{wallet.name}</span>\n              <span className=\"text-xs text-gray-500\">\n                Connect to your {wallet.name} wallet\n              </span>\n            </div>\n          </button>\n        ))}\n        {getInstalledWallets().length === 0 && (\n          <div className=\"px-4 py-4 text-sm\">\n            <p className=\"font-medium text-gray-900 mb-1\">No wallets found</p>\n            <p className=\"text-gray-500\">Install MetaMask to continue</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst CONNECTION_TIMEOUT = 30000; // 30 seconds\nconst RETRY_DELAY = 2000; // 2 seconds\nconst MAX_RETRIES = 3;\n\n// Helper function to check if chain ID is supported\nfunction isSupportedChainId(chainId: number | string): boolean {\n  return Object.values(CHAIN_IDS).includes(Number(chainId));\n}\n\nexport function ConnectButton() {\n  const {\n    isConnected,\n    isConnecting,\n    connect,\n    disconnect,\n    address,\n    error,\n    chainId,\n    switchChain,\n  } = useWeb3();\n  const { getInstalledWallets } = useWallet();\n  const { logout, user } = useAuth();\n  const { alias } = useWalletAlias();\n  const navigate = useNavigate();\n\n  const [showWalletSelect, setShowWalletSelect] = useState(false);\n  const [showAccountMenu, setShowAccountMenu] = useState(false);\n  const [connectionError, setConnectionError] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n\n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (showWalletSelect || showAccountMenu) {\n        const target = event.target as HTMLElement;\n        if (!target.closest(\".wallet-dropdown\")) {\n          setShowWalletSelect(false);\n          setShowAccountMenu(false);\n        }\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [showWalletSelect, showAccountMenu]);\n\n  const handleConnect = useCallback(() => {\n    setConnectionError(null);\n    setRetryCount(0);\n    setIsRetrying(false);\n    setShowWalletSelect(true);\n  }, []);\n\n  const handleWalletSelect = useCallback(\n    async (wallet: { name: string; provider: unknown }) => {\n      try {\n        setConnectionError(null);\n        setIsRetrying(false);\n\n        const timeoutId = setTimeout(() => {\n          setConnectionError(\"Connection timeout. Please try again.\");\n          setShowWalletSelect(false);\n        }, CONNECTION_TIMEOUT);\n\n        await connect();\n        clearTimeout(timeoutId);\n        setShowWalletSelect(false);\n\n        // Check if connected to supported network\n        if (chainId && !isSupportedChainId(chainId)) {\n          try {\n            await switchChain(CHAIN_IDS.MOONBASE);\n          } catch (switchError) {\n            throw new Error(\"Please switch to Moonbase Alpha (TestNet)\");\n          }\n        }\n      } catch (err) {\n        const message =\n          err instanceof Error ? err.message : \"Failed to connect wallet\";\n        setConnectionError(`Wallet connection failed: ${message}`);\n        Logger.error(\"Wallet connection failed\", {\n          wallet: wallet.name,\n          error: err,\n          retryCount,\n        });\n\n        // Only retry if not user rejected\n        if (\n          retryCount < MAX_RETRIES &&\n          !message.toLowerCase().includes(\"user rejected\")\n        ) {\n          setIsRetrying(true);\n          setRetryCount((prev) => prev + 1);\n          setTimeout(\n            () => handleWalletSelect(wallet),\n            RETRY_DELAY * Math.pow(2, retryCount),\n          );\n        }\n      }\n    },\n    [connect, chainId, switchChain, retryCount],\n  );\n\n  const handleDisconnect = useCallback(async () => {\n    try {\n      // Always disconnect wallet first\n      await disconnect();\n\n      setShowAccountMenu(false);\n      setConnectionError(null);\n      setRetryCount(0);\n      setIsRetrying(false);\n\n      // Only try to logout if user is actually logged in\n      if (user) {\n        try {\n          await logout();\n          // Use window.location to stay on the same domain\n          window.location.href = `${window.location.origin}/login`;\n        } catch (logoutError) {\n          // If logout fails, redirect anyway\n          Logger.warn(\n            \"Logout failed during wallet disconnect, redirecting anyway\",\n            { error: logoutError },\n          );\n          window.location.href = `${window.location.origin}/login`;\n        }\n      } else {\n        // If not logged in, just refresh to clear any stale state\n        Logger.info(\"Wallet disconnected while not logged in, refreshing page\");\n        window.location.reload();\n      }\n    } catch (err) {\n      Logger.error(\"Wallet disconnection failed\", { error: err });\n      setShowAccountMenu(false);\n      // Even if disconnect fails, reset the UI state and refresh\n      setConnectionError(null);\n      setRetryCount(0);\n      setIsRetrying(false);\n      // Force refresh to clear any stale state\n      window.location.reload();\n    }\n  }, [disconnect, logout, user]);\n\n  const handleManageAlias = useCallback(() => {\n    setShowAccountMenu(false);\n    navigate(\"/give-dashboard\", { state: { showWalletSettings: true } });\n  }, [navigate]);\n\n  const getExplorerUrl = useCallback(() => {\n    if (!address) return \"#\";\n\n    const explorers = {\n      [CHAIN_IDS.MOONBASE]: \"https://moonbase.moonscan.io/address/\",\n      [CHAIN_IDS.MOONBEAM]: \"https://moonscan.io/address/\",\n      [CHAIN_IDS.ASTAR]: \"https://blockscout.com/astar/address/\",\n      [CHAIN_IDS.POLYGON]: \"https://polygonscan.com/address/\",\n    };\n\n    return `${explorers[chainId as keyof typeof explorers] || explorers[CHAIN_IDS.MOONBASE]}${address}`;\n  }, [address, chainId]);\n\n  if (connectionError || error) {\n    return (\n      <Button\n        onClick={handleConnect}\n        variant=\"secondary\"\n        size=\"sm\"\n        className=\"text-red-600 shadow-sm hover:shadow-md rounded-md px-4 py-2 transition-all duration-200\"\n      >\n        <AlertTriangle className=\"h-4 w-4 mr-2\" />\n        <span className=\"hidden sm:inline\">\n          {connectionError || error.message}\n        </span>\n        <span className=\"sm:hidden\">Error</span>\n        {isRetrying && <RefreshCw className=\"h-4 w-4 ml-2 animate-spin\" />}\n      </Button>\n    );\n  }\n\n  if (isConnected && address) {\n    return (\n      <div className=\"relative wallet-dropdown\">\n        <Button\n          onClick={() => setShowAccountMenu(!showAccountMenu)}\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"flex items-center shadow-sm hover:shadow-md rounded-md px-4 py-2 transition-all duration-200\"\n          aria-expanded={showAccountMenu}\n          aria-haspopup=\"true\"\n        >\n          <Wallet className=\"h-4 w-4 mr-2\" />\n          <span className=\"mr-1\">{alias || shortenAddress(address)}</span>\n          <ChevronDown className=\"h-4 w-4\" />\n        </Button>\n\n        {showAccountMenu && (\n          <AccountMenu\n            address={address}\n            alias={alias}\n            getInstalledWallets={getInstalledWallets}\n            getExplorerUrl={getExplorerUrl}\n            onDisconnect={handleDisconnect}\n            onManageAlias={handleManageAlias}\n          />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative wallet-dropdown\">\n      <Button\n        onClick={handleConnect}\n        variant=\"primary\"\n        size=\"sm\"\n        disabled={isConnecting}\n        className=\"flex items-center shadow-sm hover:shadow-md rounded-md px-4 py-2 transition-all duration-200\"\n        aria-expanded={showWalletSelect}\n        aria-haspopup=\"true\"\n      >\n        <Wallet className=\"h-4 w-4 mr-2\" />\n        <span>{isConnecting ? \"Connecting...\" : \"Connect\"}</span>\n        {isRetrying && <RefreshCw className=\"h-4 w-4 ml-2 animate-spin\" />}\n      </Button>\n\n      {showWalletSelect && (\n        <WalletSelectMenu\n          getInstalledWallets={getInstalledWallets}\n          onWalletSelect={handleWalletSelect}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Input } from '@/components/ui/Input';\nimport { Button } from '@/components/ui/Button';\n\ninterface TransactionFormProps {\n  amount: string;\n  onAmountChange: (value: string) => void;\n  onSubmit: (e: React.FormEvent) => Promise<void>;\n  loading: boolean;\n  error?: string;\n  submitLabel: string;\n}\n\nexport const TransactionForm: React.FC<TransactionFormProps> = ({\n  amount,\n  onAmountChange,\n  onSubmit,\n  loading,\n  error,\n  submitLabel\n}) => {\n  return (\n    <form onSubmit={onSubmit} className=\"space-y-4\">\n      {error && (\n        <div className=\"p-3 bg-red-50 text-red-600 rounded-md\">\n          {error}\n        </div>\n      )}\n      <Input\n        label=\"Amount (ETH)\"\n        type=\"number\"\n        min=\"0\"\n        step=\"0.01\"\n        value={amount}\n        onChange={(e) => onAmountChange(e.target.value)}\n        required\n      />\n      <Button\n        type=\"submit\"\n        disabled={loading || !amount}\n        className=\"w-full\"\n      >\n        {loading ? 'Processing...' : submitLabel}\n      </Button>\n    </form>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/TransactionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/common/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/DonationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'onClose' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'showToast' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":130,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from \"react\";\nimport { useWeb3 } from \"@/contexts/Web3Context\";\nimport { Button } from \"@/components/ui/Button\";\nimport { Input } from \"@/components/ui/Input\";\nimport { validateAmount } from \"@/utils/validation\";\nimport { useToast } from \"@/contexts/ToastContext\";\nimport { Logger } from \"@/utils/logger\";\nimport { ethers } from \"ethers\";\nimport { getContractAddress } from \"@/config/contracts\";\nimport CharityScheduledDistributionABI from \"@/contracts/CharityScheduledDistribution.sol/CharityScheduledDistribution.json\";\n\n// Error type guards for transaction errors\ninterface TransactionError {\n  code?: number;\n  message?: string;\n}\n\n/**\n * Type guard to check if an error is a transaction error with code and message properties\n * @param error - The error object to check\n * @returns True if the error is a transaction error, false otherwise\n */\nfunction isTransactionError(error: unknown): error is TransactionError {\n  return typeof error === \"object\" && error !== null;\n}\n\n/**\n * Checks if an error represents a user rejection of a transaction\n * @param error - The error object to check\n * @returns True if the error indicates user rejection (code 4001 or \"user rejected\" message), false otherwise\n */\nfunction isUserRejection(error: unknown): boolean {\n  return (\n    isTransactionError(error) &&\n    (error.code === 4001 ||\n      (typeof error.message === \"string\" &&\n        error.message.includes(\"user rejected\")))\n  );\n}\nimport { formatDate } from \"@/utils/date\";\n\ninterface SuccessMessageProps {\n  amount: string;\n  charityName: string;\n  transactionHash: string | null;\n  onClose: () => void;\n}\n\n/**\n * Component that displays a success message after a scheduled donation is created\n * @param amount - The donation amount\n * @param charityName - Name of the charity receiving the donation\n * @param transactionHash - The blockchain transaction hash\n * @param onClose - Callback function to close the success message\n */\nconst SuccessMessage: React.FC<SuccessMessageProps> = ({ amount, charityName, transactionHash, onClose }) => {\n  const startDate = new Date();\n  const endDate = new Date();\n  endDate.setMonth(endDate.getMonth() + 12);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"bg-green-50 p-4 rounded-md border border-green-200\">\n        <div className=\"flex items-start\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-green-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-green-800\">Monthly donation scheduled successfully!</h3>\n            <div className=\"mt-2 text-sm text-green-700\">\n              <p>Your donation of {amount} tokens has been scheduled.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white p-4 rounded-md border border-gray-200\">\n        <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Schedule Details:</h4>\n        <ul className=\"space-y-2 text-sm text-gray-600\">\n          <li><span className=\"font-medium\">Total Amount:</span> {amount} tokens</li>\n          <li><span className=\"font-medium\">Monthly Payment:</span> {(parseFloat(amount) / 12).toFixed(2)} tokens</li>\n          <li><span className=\"font-medium\">Start Date:</span> {formatDate(startDate.toISOString())}</li>\n          <li><span className=\"font-medium\">End Date:</span> {formatDate(endDate.toISOString())}</li>\n          <li><span className=\"font-medium\">Recipient:</span> {charityName}</li>\n        </ul>\n      </div>\n\n      {transactionHash && (\n        <div className=\"bg-gray-50 p-4 rounded-md border border-gray-200\">\n          <p className=\"text-xs text-gray-500 mb-1\">Transaction Hash:</p>\n          <a \n            href={`https://moonbase.moonscan.io/tx/${transactionHash}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs font-mono text-indigo-600 hover:text-indigo-800 break-all\"\n          >\n            {transactionHash}\n          </a>\n        </div>\n      )}\n\n      <Button onClick={onClose} className=\"w-full\">\n        Close\n      </Button>\n    </div>\n  );\n};\n\ninterface ScheduledDonationFormProps {\n  charityAddress: string;\n  charityName: string;\n  onSuccess?: () => void;\n  onClose?: () => void;\n}\n\nexport function ScheduledDonationForm({\n  charityAddress,\n  charityName,\n  onSuccess,\n  onClose,\n}: ScheduledDonationFormProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [transactionHash, setTransactionHash] = useState<string | null>(null);\n  const { provider, address, isConnected, connect } = useWeb3();\n  const { showToast } = useToast();\n\n  // Calculate start and end dates for the donation schedule\n  const startDate = new Date();\n  const endDate = new Date();\n  endDate.setMonth(endDate.getMonth() + 12);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    if (!validateAmount(parseFloat(amount))) {\n      setError(\"Please enter a valid amount between 0 and 1,000,000\");\n      return;\n    }\n\n    if (!isConnected || !provider || !address) {\n      try {\n        await connect();\n      } catch (err) {\n        setError(\"Please connect your wallet to continue\");\n        return;\n      }\n    }\n\n    try {\n      setLoading(true);\n\n      // Get the distribution contract address\n      const distributionAddress = getContractAddress(\"DISTRIBUTION\");\n\n      // Create contract instance\n      const signer = await provider.getSigner();\n      const distributionContract = new ethers.Contract(\n        distributionAddress,\n        CharityScheduledDistributionABI.abi,\n        signer,\n      );\n\n      // For now, we'll use the native token (GLMR)\n      // In a real implementation, you would get the token address from a dropdown\n      const tokenAddress = getContractAddress(\"TOKEN\");\n\n      // First, approve the token transfer\n      const tokenContract = new ethers.Contract(\n        tokenAddress,\n        [\"function approve(address spender, uint256 amount) returns (bool)\"],\n        signer,\n      );\n\n      const parsedAmount = ethers.parseEther(amount);\n\n      try {\n        const approveTx = await tokenContract.approve(\n          distributionAddress,\n          parsedAmount,\n        );\n        await approveTx.wait();\n      } catch (approveError: unknown) {\n        // Check if user rejected the transaction\n        if (isUserRejection(approveError)) {\n          throw new Error(\n            \"Transaction was rejected. Please approve the transaction in your wallet to continue.\",\n          );\n        }\n        throw approveError;\n      }\n\n      // Create the scheduled donation\n      try {\n        const tx = await distributionContract.createSchedule(\n          charityAddress,\n          tokenAddress,\n          parsedAmount,\n        );\n\n        const receipt = await tx.wait();\n        setTransactionHash(receipt.hash);\n        setShowConfirmation(true);\n\n        Logger.info(\"Scheduled donation created\", {\n          charity: charityAddress,\n          amount,\n          token: tokenAddress,\n          txHash: receipt.hash,\n        });\n      } catch (txError: unknown) {\n        // Check if user rejected the transaction\n        if (\n          txError.code === 4001 ||\n          txError.message?.includes(\"user rejected\")\n        ) {\n          throw new Error(\n            \"Transaction was rejected. Please confirm the transaction in your wallet to schedule your donation.\",\n          );\n        }\n        throw txError;\n      }\n    } catch (err) {\n      const message =\n        err instanceof Error ? err.message : \"Failed to schedule donation\";\n      setError(message);\n      Logger.error(\"Scheduled donation failed\", { error: err });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConfirmationClose = useCallback(() => {\n    setAmount(\"\");\n    setShowConfirmation(false);\n    setTransactionHash(null);\n    onSuccess?.();\n  }, [onSuccess]);\n\n  if (showConfirmation) {\n    return (\n      <SuccessMessage \n        amount={amount}\n        charityName={charityName}\n        transactionHash={transactionHash}\n        onClose={handleConfirmationClose}\n      />\n    );\n  }\n\n  if (!isConnected) {\n    return (\n      <div className=\"text-center\">\n        <p className=\"mb-4 text-gray-600\">\n          Connect your wallet to schedule monthly donations\n        </p>\n        <Button onClick={connect}>Connect Wallet</Button>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <div className=\"p-3 bg-red-50 text-red-600 rounded-md\">{error}</div>\n      )}\n\n      <div>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          Schedule a monthly donation to {charityName}. The total amount will be\n          divided into 12 equal monthly payments.\n        </p>\n      </div>\n\n      <Input\n        label=\"Total Amount (for 12 months)\"\n        type=\"number\"\n        min=\"0\"\n        step=\"0.01\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n        required\n        helperText=\"This amount will be divided into 12 equal monthly payments\"\n      />\n\n      <div className=\"bg-blue-50 p-3 rounded-md mb-2\">\n        <p className=\"text-sm text-blue-700\">\n          <span className=\"font-medium\">Monthly payment:</span>{\" \"}\n          {amount ? (parseFloat(amount) / 12).toFixed(2) : \"0.00\"} tokens\n        </p>\n        <p className=\"text-sm text-blue-700 mt-1\">\n          <span className=\"font-medium\">Schedule period:</span>{\" \"}\n          {formatDate(startDate.toISOString())} to{\" \"}\n          {formatDate(endDate.toISOString())}\n        </p>\n      </div>\n\n      <Button type=\"submit\" disabled={loading || !amount} className=\"w-full\">\n        {loading ? \"Processing...\" : \"Schedule Monthly Donation\"}\n      </Button>\n    </form>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/ScheduledDonationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/donation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'tokenAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Input } from '@/components/ui/Input';\nimport { Button } from '@/components/ui/Button';\nimport { useDonation } from '@/hooks/web3/useDonation';\nimport { validateAmount } from '@/utils/validation';\nimport { Logger } from '@/utils/logger';\n\ninterface WithdrawalFormProps {\n  onSuccess?: () => void;\n}\n\nexport function WithdrawalForm({ onSuccess }: WithdrawalFormProps) {\n  const [amount, setAmount] = useState('');\n  const [tokenAddress, setTokenAddress] = useState('');\n  const { withdraw, loading, error: withdrawalError } = useDonation();\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (!validateAmount(parseFloat(amount))) {\n      setError('Please enter a valid amount between 0 and 1,000,000');\n      return;\n    }\n\n    try {\n      await withdraw(amount);\n      setAmount('');\n      setTokenAddress('');\n      onSuccess?.();\n\n      Logger.info('Withdrawal submitted', {\n        amount,\n        token: 'GLMR'\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to process withdrawal');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {(error || withdrawalError) && (\n        <div className=\"p-3 bg-red-50 text-red-600 rounded-md\">\n          {error || withdrawalError}\n        </div>\n      )}\n\n      <Input\n        label=\"Amount (GLMR)\"\n        type=\"number\"\n        min=\"0\"\n        step=\"0.000000000000000001\"\n        value={amount}\n        onChange={(e) => setAmount(e.target.value)}\n        required\n      />\n\n      <Button\n        type=\"submit\"\n        disabled={loading || !amount}\n        className=\"w-full\"\n      >\n        {loading ? 'Processing...' : 'Withdraw'}\n      </Button>\n    </form>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/WithdrawalModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/components/web3/withdrawal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/contracts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/docs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/config/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/AuthContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'AuthError' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'ENV' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'email' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'password' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'accountType' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":76},{"ruleId":"no-unused-vars","severity":1,"message":"'email' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'email' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'password' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'metadata' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":108},{"ruleId":"no-unused-vars","severity":1,"message":"'email' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'checkError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":405,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":405,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'email' is defined but never used. Allowed unused args must match /^_/u.","line":477,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":477,"endColumn":52},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":513,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":513,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { User, AuthError } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/supabase';\nimport { useToast } from './ToastContext';\nimport { Logger } from '@/utils/logger';\nimport { ENV } from '@/config/env';\nimport { setSentryUser, clearSentryUser } from '@/lib/sentry';\n\ninterface AuthState {\n  user: User | null;\n  loading: boolean;\n  error: Error | null;\n  userType: 'donor' | 'charity' | 'admin' | null;\n}\n\ninterface AuthContextType extends AuthState {\n  login: (email: string, password: string, accountType: 'donor' | 'charity') => Promise<void>;\n  loginWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  refreshSession: () => Promise<void>;\n  register: (email: string, password: string, type: 'donor' | 'charity', metadata?: Record<string, unknown>) => Promise<void>;\n  sendUsernameReminder: (email: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nconst SESSION_REFRESH_INTERVAL = 10 * 60 * 1000; // 10 minutes\nconst MAX_RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    loading: true,\n    error: null,\n    userType: null\n  });\n  const { showToast } = useToast();\n  const [retryCount, setRetryCount] = useState(0);\n\n  const refreshSession = useCallback(async () => {\n    try {\n      const { data: { session }, error } = await supabase.auth.refreshSession();\n      if (error) {\n        Logger.error('Session refresh error', { \n          error: error.message,\n          stack: error.stack,\n          code: error.status\n        });\n        throw error;\n      }\n      \n      const userType = session?.user?.user_metadata?.type as 'donor' | 'charity' | null;\n      \n      setState(prev => ({\n        ...prev,\n        user: session?.user ?? null,\n        userType\n      }));\n\n      Logger.info('Session refreshed successfully');\n    } catch (err) {\n      Logger.error('Session refresh failed', { \n        error: err instanceof Error ? \n          { message: err.message, stack: err.stack } : \n          err,\n        retryCount\n      });\n      \n      if (retryCount < MAX_RETRY_ATTEMPTS) {\n        setRetryCount(prev => prev + 1);\n        setTimeout(refreshSession, RETRY_DELAY * Math.pow(2, retryCount));\n      } else {\n        // Force re-login if refresh fails repeatedly\n        setState(prev => ({\n          ...prev,\n          user: null,\n          userType: null,\n          error: new Error('Session expired. Please login again.')\n        }));\n        showToast('error', 'Session expired', 'Please login again');\n      }\n    }\n  }, [retryCount, showToast]);\n\n  useEffect(() => {\n    let mounted = true;\n    let refreshInterval: ReturnType<typeof setTimeout>;\n\n    const initializeAuth = async () => {\n      try {\n        // Check active session\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          Logger.error('Get session error', { \n            error: sessionError.message,\n            stack: sessionError.stack,\n            code: sessionError.status\n          });\n          throw sessionError;\n        }\n\n        if (mounted) {\n          let userType = session?.user?.user_metadata?.type as 'donor' | 'charity' | 'admin' | null;\n          \n          // If type not in metadata, fetch from profile\n          if (!userType && session?.user) {\n            const { data: profile } = await supabase\n              .from('profiles')\n              .select('type')\n              .eq('user_id', session.user.id)\n              .single();\n              \n            if (profile) {\n              userType = profile.type as 'donor' | 'charity' | 'admin';\n            }\n          }\n          \n          setState(prev => ({\n            ...prev,\n            user: session?.user ?? null,\n            userType,\n            loading: false\n          }));\n\n          // Update Sentry user context\n          if (session?.user) {\n            setSentryUser({\n              id: session.user.id,\n              email: session.user.email,\n              userType: userType || undefined\n            });\n          } else {\n            clearSentryUser();\n          }\n\n          // Start session refresh interval if user is logged in\n          if (session?.user) {\n            refreshInterval = setInterval(refreshSession, SESSION_REFRESH_INTERVAL);\n          }\n        }\n\n        // Listen for auth changes\n        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n          if (!mounted) return;\n          \n          Logger.info('Auth state changed', { event });\n          \n          let userType = session?.user?.user_metadata?.type as 'donor' | 'charity' | 'admin' | null;\n          \n          // If type not in metadata, fetch from profile\n          if (!userType && session?.user) {\n            const { data: profile } = await supabase\n              .from('profiles')\n              .select('type')\n              .eq('user_id', session.user.id)\n              .single();\n              \n            if (profile) {\n              userType = profile.type as 'donor' | 'charity' | 'admin';\n            }\n          }\n\n          if (event === 'SIGNED_IN') {\n            showToast('success', 'Signed in successfully');\n            refreshInterval = setInterval(refreshSession, SESSION_REFRESH_INTERVAL);\n          }\n\n          if (event === 'SIGNED_OUT') {\n            showToast('success', 'Signed out successfully');\n            if (refreshInterval) {\n              clearInterval(refreshInterval);\n            }\n          }\n\n          if (event === 'USER_UPDATED') {\n            showToast('success', 'Profile updated successfully');\n          }\n\n          setState(prev => ({\n            ...prev,\n            user: session?.user ?? null,\n            userType,\n            loading: false\n          }));\n\n          // Update Sentry user context on auth state change\n          if (session?.user) {\n            setSentryUser({\n              id: session.user.id,\n              email: session.user.email,\n              userType: userType || undefined\n            });\n          } else {\n            clearSentryUser();\n          }\n        });\n\n        return () => {\n          mounted = false;\n          subscription.unsubscribe();\n          if (refreshInterval) {\n            clearInterval(refreshInterval);\n          }\n        };\n      } catch (err) {\n        Logger.error('Auth initialization failed', { \n          error: err instanceof Error ? \n            { message: err.message, stack: err.stack } : \n            err \n        });\n        \n        if (mounted) {\n          setState(prev => ({\n            ...prev,\n            error: err instanceof Error ? err : new Error('Failed to initialize auth'),\n            loading: false\n          }));\n        }\n      }\n    };\n\n    initializeAuth();\n  }, [refreshSession, showToast]);\n\n  const login = async (email: string, password: string, accountType: 'donor' | 'charity') => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      \n      // First, check if the user exists\n      const { data: { user }, error: checkError } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (checkError) {\n        Logger.error('Login error from Supabase', { \n          error: checkError.message,\n          code: checkError.status,\n          email\n        });\n        throw checkError;\n      }\n      \n      // Verify the user has the correct account type\n      // First check user metadata\n      let userType = user?.user_metadata?.type;\n      \n      // If not in metadata, check the profile table\n      if (!userType && user) {\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('type')\n          .eq('user_id', user.id)\n          .single();\n          \n        if (!profileError && profile) {\n          userType = profile.type;\n        }\n      }\n      \n      // Check account type compatibility\n      // - Donor login: only allows 'donor' users\n      // - Charity login: allows both 'charity' and 'admin' users\n      const isValidLogin = (accountType === 'donor' && userType === 'donor') || \n                          (accountType === 'charity' && (userType === 'charity' || userType === 'admin'));\n      \n      if (!isValidLogin) {\n        // Sign out the user immediately to prevent session creation\n        await supabase.auth.signOut();\n        throw new Error('Account not found. Please check your email and password.');\n      }\n\n      // Determine redirect path based on actual user type (not login type)\n      let redirectPath = '/give-dashboard'; // Default for donor\n      \n      if (userType === 'admin') {\n        redirectPath = '/admin';\n      } else if (userType === 'charity') {\n        redirectPath = '/charity-portal';\n      }\n      \n      // Redirect to the appropriate dashboard on current domain\n      window.location.href = `${window.location.origin}${redirectPath}`;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to sign in';\n      showToast('error', 'Authentication Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message)\n      }));\n      throw err;\n    } finally {\n      setState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  const loginWithGoogle = async () => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      \n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/login`,\n          queryParams: {\n            access_type: 'offline',\n            prompt: 'consent'\n          }\n        }\n      });\n\n      if (error) {\n        Logger.error('Google login error', { \n          error: error.message,\n          code: error.status\n        });\n        throw error;\n      }\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to sign in with Google';\n      showToast('error', 'Authentication Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message)\n      }));\n      throw err;\n    } finally {\n      setState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        Logger.error('Logout error', { \n          error: error.message,\n          code: error.status\n        });\n        throw error;\n      }\n      \n      // Clear user state immediately\n      setState({\n        user: null,\n        userType: null,\n        loading: false,\n        error: null\n      });\n      \n      // Stay on current domain instead of redirecting\n      window.location.href = `${window.location.origin}/`;\n      \n      showToast('success', 'Logged out successfully');\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to log out';\n      showToast('error', 'Logout Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message),\n        loading: false\n      }));\n      throw err;\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      });\n\n      if (error) {\n        Logger.error('Password reset error', { \n          error: error.message,\n          code: error.status,\n          email\n        });\n        throw error;\n      }\n      showToast('success', 'Password reset email sent');\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to send reset email';\n      showToast('error', 'Reset Password Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message)\n      }));\n      throw err;\n    } finally {\n      setState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  const register = async (email: string, password: string, type: 'donor' | 'charity', metadata = {}) => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      \n      // Check if user already exists with a different account type\n      const { data: existingUser, error: checkError } = await supabase.auth.signInWithPassword({\n        email,\n        password: 'dummy-password-for-check' // This will fail if user doesn't exist, which is what we want\n      });\n      \n      // If login succeeded, the user exists with the provided password\n      if (existingUser?.user) {\n        const existingType = existingUser.user.user_metadata?.type;\n        if (existingType && existingType !== type) {\n          throw new Error(`This email is already registered as a ${existingType} account. Please use a different email.`);\n        }\n      }\n      \n      // If we get here, either the user doesn't exist or has the same account type\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            type,\n            ...metadata\n          },\n          emailRedirectTo: `${window.location.origin}/auth/callback`\n        }\n      });\n\n      if (error) {\n        Logger.error('Registration error', { \n          error: error.message,\n          code: error.status,\n          email,\n          type\n        });\n        throw error;\n      }\n\n      if (data.user) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            user_id: data.user.id,\n            type\n          });\n\n        if (profileError) {\n          Logger.error('Profile creation error', { \n            error: profileError.message,\n            code: profileError.code,\n            userId: data.user.id,\n            type\n          });\n          throw profileError;\n        }\n      }\n\n      showToast('success', 'Registration successful', 'Please check your email to verify your account');\n      \n      // Redirect to the appropriate login page\n      window.location.href = `/login?type=${type}`;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to register';\n      showToast('error', 'Registration Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message)\n      }));\n      throw err;\n    } finally {\n      setState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  const sendUsernameReminder = async (email: string) => {\n    try {\n      setState(prev => ({ ...prev, loading: true, error: null }));\n      // In a real app, this would send an email with the username\n      // For this demo, we'll just show a success message\n      showToast('success', 'Username reminder sent', 'If an account exists with this email, a reminder will be sent');\n      return Promise.resolve();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to send username reminder';\n      showToast('error', 'Username Reminder Error', message);\n      setState(prev => ({\n        ...prev,\n        error: err instanceof Error ? err : new Error(message)\n      }));\n      throw err;\n    } finally {\n      setState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      ...state,\n      login,\n      loginWithGoogle,\n      logout,\n      resetPassword,\n      refreshSession,\n      register,\n      sendUsernameReminder\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/SettingsContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'currency' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":46,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":46,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\n\nexport type Language = \n  | 'en' // English\n  | 'es' // Spanish\n  | 'de' // German\n  | 'fr' // French\n  | 'ja' // Japanese\n  | 'zh-CN' // Chinese (Simplified)\n  | 'zh-TW' // Chinese (Traditional)\n  | 'th' // Thai\n  | 'vi' // Vietnamese\n  | 'ko' // Korean\n  | 'ar' // Arabic\n  | 'hi'; // Hindi\n\nexport type Currency = \n  | 'USD' // US Dollar\n  | 'CAD' // Canadian Dollar\n  | 'EUR' // Euro\n  | 'CNY' // Chinese Yuan\n  | 'JPY' // Japanese Yen\n  | 'KRW' // Korean Won\n  | 'AED' // UAE Dirham\n  | 'AUD' // Australian Dollar\n  | 'CHF' // Swiss Franc\n  | 'GBP' // British Pound\n  | 'INR' // Indian Rupee\n  | 'MXP' // Mexican Peso\n  | 'ILS' // Israeli Shekel\n  | 'NGN' // Nigerian Naira\n  | 'HKD' // Hong Kong Dollar\n  | 'PKR'; // Pakistani Rupee\n\ninterface SettingsContextType {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  currency: Currency;\n  setCurrency: (currency: Currency) => void;\n  languageOptions: { value: Language; label: string }[];\n  currencyOptions: { value: Currency; label: string; symbol: string }[];\n}\n\nconst SettingsContext = createContext<SettingsContextType | undefined>(undefined);\n\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\nexport const SettingsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  // Initialize from localStorage or use defaults\n  const [language, setLanguageState] = useState<Language>(\n    () => (localStorage.getItem('language') as Language) || 'en'\n  );\n  \n  const [currency, setCurrencyState] = useState<Currency>(\n    () => (localStorage.getItem('currency') as Currency) || 'USD'\n  );\n\n  // Update localStorage when settings change\n  useEffect(() => {\n    localStorage.setItem('language', language);\n    document.documentElement.lang = language;\n    // In a real app, this would trigger i18next language change\n  }, [language]);\n\n  useEffect(() => {\n    localStorage.setItem('currency', currency);\n  }, [currency]);\n\n  const setLanguage = (newLanguage: Language) => {\n    setLanguageState(newLanguage);\n  };\n\n  const setCurrency = (newCurrency: Currency) => {\n    setCurrencyState(newCurrency);\n  };\n\n  const languageOptions = [\n    { value: 'en', label: 'English' },\n    { value: 'es', label: 'Español' },\n    { value: 'de', label: 'Deutsch' },\n    { value: 'fr', label: 'Français' },\n    { value: 'ja', label: '日本語' },\n    { value: 'zh-CN', label: '简体中文' },\n    { value: 'zh-TW', label: '繁體中文' },\n    { value: 'th', label: 'ไทย' },\n    { value: 'vi', label: 'Tiếng Việt' },\n    { value: 'ko', label: '한국어' },\n    { value: 'ar', label: 'العربية' },\n    { value: 'hi', label: 'हिन्दी' }\n  ];\n\n  const currencyOptions = [\n    { value: 'USD', label: 'US Dollar', symbol: '$' },\n    { value: 'CAD', label: 'Canadian Dollar', symbol: 'C$' },\n    { value: 'EUR', label: 'Euro', symbol: '€' },\n    { value: 'CNY', label: 'Chinese Yuan', symbol: '¥' },\n    { value: 'JPY', label: 'Japanese Yen', symbol: '¥' },\n    { value: 'KRW', label: 'Korean Won', symbol: '₩' },\n    { value: 'AED', label: 'UAE Dirham', symbol: 'د.إ' },\n    { value: 'AUD', label: 'Australian Dollar', symbol: 'A$' },\n    { value: 'CHF', label: 'Swiss Franc', symbol: 'CHF' },\n    { value: 'GBP', label: 'British Pound', symbol: '£' },\n    { value: 'INR', label: 'Indian Rupee', symbol: '₹' },\n    { value: 'MXP', label: 'Mexican Peso', symbol: 'Mex$' },\n    { value: 'ILS', label: 'Israeli Shekel', symbol: '₪' },\n    { value: 'NGN', label: 'Nigerian Naira', symbol: '₦' },\n    { value: 'HKD', label: 'Hong Kong Dollar', symbol: 'HK$' },\n    { value: 'PKR', label: 'Pakistani Rupee', symbol: '₨' }\n  ];\n\n  return (\n    <SettingsContext.Provider value={{ \n      language, \n      setLanguage, \n      currency, \n      setCurrency,\n      languageOptions,\n      currencyOptions\n    }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/ToastContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'title' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":6,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":63},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":10,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":10,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":67,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":67,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Toast, ToastType } from '../components/ui/Toast';\nimport { SecureRandom } from '@/utils/security/index';\n\ninterface ToastContextType {\n  showToast: (type: ToastType, title: string, message?: string) => void;\n}\n\n// Create context with undefined initial value but proper type\nexport const ToastContext = createContext<ToastContextType | undefined>(undefined);\n\n/**\n * Provides toast notification functionality to child components\n * @param children - React child elements\n * @returns JSX element with toast context provider and toast display\n */\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<Array<{\n    id: string;\n    type: ToastType;\n    title: string;\n    message?: string;\n  }>>([]);\n\n  const showToast = useCallback((type: ToastType, title: string, message?: string) => {\n    const id = SecureRandom.generateSecureId();\n    setToasts(prev => [...prev, { id, type, title, message }]);\n\n    if (type !== 'loading') {\n      setTimeout(() => {\n        setToasts(prev => prev.filter(t => t.id !== id));\n      }, 5000);\n    }\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(t => t.id !== id));\n  }, []);\n\n  const createRemoveHandler = useCallback((id: string) => {\n    return () => removeToast(id);\n  }, [removeToast]);\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      <div className=\"fixed bottom-0 right-0 p-4 space-y-4 z-50 pointer-events-none\">\n        {toasts.map(toast => (\n          <Toast\n            key={toast.id}\n            type={toast.type}\n            title={toast.title}\n            message={toast.message}\n            onClose={createRemoveHandler(toast.id)}\n          />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n}\n\n/**\n * Hook to access toast notification functionality\n * @returns Object containing showToast function for displaying toast notifications\n * @throws {Error} When used outside of ToastProvider\n */\nexport function useToast() {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within ToastProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/contexts/Web3Context.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'chainId' is defined but never used. Allowed unused args must match /^_/u.","line":60,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'switchChain'. Either include it or remove the dependency array.","line":251,"column":6,"nodeType":"ArrayExpression","endLine":251,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [switchChain]","fix":{"range":[7849,7851],"text":"[switchChain]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":347,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":347,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport { ethers } from \"ethers\";\nimport { Logger } from \"@/utils/logger\";\nimport { CHAIN_IDS } from \"@/config/contracts\";\n\n// Error type guards for Web3 errors\ninterface WalletError {\n  code?: number;\n  message?: string;\n}\n\n/**\n * Type guard to check if an error is a wallet error with code and message properties\n * @param error - The error object to check\n * @returns True if the error is a wallet error, false otherwise\n */\nfunction isWalletError(error: unknown): error is WalletError {\n  return typeof error === \"object\" && error !== null;\n}\n\n/**\n * Checks if an error has a specific error code\n * @param error - The error object to check\n * @param code - The error code to match\n * @returns True if the error has the specified code, false otherwise\n */\nfunction hasErrorCode(error: unknown, code: number): boolean {\n  return isWalletError(error) && error.code === code;\n}\n\n/**\n * Checks if an error message contains a specific substring\n * @param error - The error object to check\n * @param message - The message substring to search for\n * @returns True if the error message contains the substring, false otherwise\n */\nfunction hasErrorMessage(error: unknown, message: string): boolean {\n  return (\n    isWalletError(error) &&\n    typeof error.message === \"string\" &&\n    error.message.includes(message)\n  );\n}\n\ninterface Web3ContextType {\n  provider: ethers.Provider | null;\n  address: string | null;\n  chainId: number | null;\n  isConnected: boolean;\n  isConnecting: boolean;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  error: Error | null;\n  switchChain: (chainId: number) => Promise<void>;\n}\n\nconst Web3Context = createContext<Web3ContextType | undefined>(undefined);\n\nconst MOONBASE_CHAIN_INFO = {\n  chainId: `0x${CHAIN_IDS.MOONBASE.toString(16)}`,\n  chainName: \"Moonbase Alpha\",\n  nativeCurrency: {\n    name: \"DEV\",\n    symbol: \"DEV\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc.api.moonbase.moonbeam.network\"],\n  blockExplorerUrls: [\"https://moonbase.moonscan.io/\"],\n};\n\nexport function Web3Provider({ children }: { children: React.ReactNode }) {\n  const [provider, setProvider] = useState<ethers.Provider | null>(null);\n  const [address, setAddress] = useState<string | null>(null);\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Handle account changes\n  const handleAccountsChanged = useCallback((accounts: string[]) => {\n    if (accounts.length === 0) {\n      // User disconnected their wallet\n      setAddress(null);\n      setProvider(null);\n      setChainId(null);\n      Logger.info(\"Wallet disconnected\");\n    } else {\n      setAddress(accounts[0]);\n      Logger.info(\"Account changed\", { address: accounts[0] });\n    }\n  }, []);\n\n  // Handle chain changes\n  const handleChainChanged = useCallback((chainIdHex: string) => {\n    const newChainId = parseInt(chainIdHex, 16);\n    setChainId(newChainId);\n    Logger.info(\"Chain changed\", { chainId: newChainId });\n\n    // Reload the page when chain changes to ensure all state is fresh\n    window.location.reload();\n  }, []);\n\n  // Initialize provider and check for existing connection\n  useEffect(() => {\n    const initProvider = async () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        try {\n          // Check if already connected\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n          if (accounts.length > 0) {\n            const provider = new ethers.BrowserProvider(window.ethereum);\n            const network = await provider.getNetwork();\n\n            setProvider(provider);\n            setAddress(accounts[0]);\n            setChainId(Number(network.chainId));\n            Logger.info(\"Restored existing connection\", {\n              address: accounts[0],\n              chainId: network.chainId,\n            });\n          }\n        } catch (err: unknown) {\n          // Clear any existing connection state\n          setProvider(null);\n          setAddress(null);\n          setChainId(null);\n\n          // Handle unauthorized error specifically\n          if (hasErrorMessage(err, \"has not been authorized\")) {\n            const error = new Error(\n              'Wallet connection needs authorization. Please click \"Connect\" to continue.',\n            );\n            setError(error);\n            Logger.info(\"Wallet needs reauthorization\");\n          } else {\n            Logger.error(\"Failed to restore connection\", { error: err });\n          }\n        }\n      }\n    };\n\n    initProvider();\n  }, []);\n\n  // Set up event listeners\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n      window.ethereum.on(\"disconnect\", () => {\n        setProvider(null);\n        setAddress(null);\n        setChainId(null);\n      });\n\n      return () => {\n        if (window.ethereum?.removeListener) {\n          window.ethereum.removeListener(\n            \"accountsChanged\",\n            handleAccountsChanged,\n          );\n          window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          window.ethereum.removeListener(\"disconnect\", () => {});\n        }\n      };\n    }\n  }, [handleAccountsChanged, handleChainChanged]);\n\n  const connect = useCallback(async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      const error = new Error(\"Please install MetaMask to connect\");\n      Logger.error(\"MetaMask not found\", { error });\n      setError(error);\n      throw error;\n    }\n\n    try {\n      setIsConnecting(true);\n      setError(null);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error(\"No accounts found\");\n      }\n\n      // Create Web3 provider\n      const provider = new ethers.BrowserProvider(window.ethereum);\n\n      // Get connected chain ID\n      const network = await provider.getNetwork();\n      const currentChainId = Number(network.chainId);\n\n      // Set provider first so it's available for chain switching\n      setProvider(provider);\n\n      // Switch to Moonbase Alpha if on wrong network\n      if (currentChainId !== CHAIN_IDS.MOONBASE) {\n        try {\n          await switchChain(CHAIN_IDS.MOONBASE);\n        } catch (switchError: unknown) {\n          // If user rejected the switch, throw error\n          if (switchError?.code === 4001) {\n            throw new Error(\"Please switch to Moonbase Alpha (TestNet)\");\n          }\n          // For other errors, log warning but continue\n          Logger.warn(\"Failed to switch to Moonbase Alpha\", {\n            error: switchError,\n          });\n        }\n      }\n\n      // Get chain ID again in case it changed\n      const finalNetwork = await provider.getNetwork();\n      setChainId(Number(finalNetwork.chainId));\n\n      // Set connected account\n      setAddress(accounts[0]);\n\n      Logger.info(\"Wallet connected successfully\", {\n        address: accounts[0],\n        chainId: Number(finalNetwork.chainId),\n      });\n    } catch (err: unknown) {\n      // Handle user rejected request\n      if (hasErrorCode(err, 4001)) {\n        const error = new Error(\"User rejected wallet connection\");\n        setError(error);\n        throw error;\n      }\n\n      // Handle other errors\n      const message = err?.message || \"Failed to connect wallet\";\n      const error = new Error(message);\n      Logger.error(\"Wallet connection failed\", { error });\n      setError(error);\n      throw error;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, []);\n\n  const disconnect = useCallback(async () => {\n    try {\n      // Clear state immediately\n      setProvider(null);\n      setAddress(null);\n      setChainId(null);\n      setError(null);\n\n      // Most wallets don't have a disconnect method, but we can try various approaches\n      if (window.ethereum) {\n        try {\n          // Try the WalletConnect disconnect method if available\n          if (typeof window.ethereum.disconnect === \"function\") {\n            await window.ethereum.disconnect();\n          }\n          // Try to clear permissions (MetaMask)\n          else if (typeof window.ethereum.request === \"function\") {\n            try {\n              await window.ethereum.request({\n                method: \"wallet_revokePermissions\",\n                params: [{ eth_accounts: {} }],\n              });\n            } catch (revokeError) {\n              // Silently ignore if method doesn't exist\n              Logger.info(\"Revoke permissions not supported\", {\n                error: revokeError,\n              });\n            }\n          }\n        } catch (walletError) {\n          // Log but don't throw - state is already cleared\n          Logger.info(\"Wallet-specific disconnect failed, but state cleared\", {\n            error: walletError,\n          });\n        }\n      }\n\n      Logger.info(\"Wallet disconnected successfully\");\n    } catch (err) {\n      Logger.error(\"Error during wallet disconnect\", { error: err });\n      // Don't throw error - we still want to clear the state\n    }\n  }, []);\n\n  const switchChain = useCallback(async (targetChainId: number) => {\n    if (typeof window.ethereum === \"undefined\") {\n      throw new Error(\"Please install MetaMask to switch networks\");\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n      });\n      Logger.info(\"Switched network\", { chainId: targetChainId });\n    } catch (error: unknown) {\n      // If the chain hasn't been added to MetaMask\n      if (error.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [MOONBASE_CHAIN_INFO],\n          });\n          Logger.info(\"Added Moonbase Alpha network\");\n        } catch (addError) {\n          Logger.error(\"Failed to add network\", { error: addError });\n          throw new Error(\"Failed to add Moonbase Alpha network\");\n        }\n      } else {\n        Logger.error(\"Failed to switch network\", { error });\n        throw error;\n      }\n    }\n  }, []);\n\n  return (\n    <Web3Context.Provider\n      value={{\n        provider,\n        address,\n        chainId,\n        isConnected: !!address,\n        isConnecting,\n        connect,\n        disconnect,\n        error,\n        switchChain,\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n}\n\nexport function useWeb3() {\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error(\"useWeb3 must be used within a Web3Provider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/data/charities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/useAuthActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/auth/useAuthState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useAdminPanel.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'CharityVerification' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useToast } from '../contexts/ToastContext';\nimport { supabase } from '../lib/supabase';\nimport { useProfile } from './useProfile';\n\ninterface CharityVerification {\n  id: string;\n  charity_id: string;\n  status: 'pending' | 'approved' | 'rejected';\n  documents: Array<{\n    type: string;\n    url: string;\n  }>;\n}\n\nexport function useAdminPanel() {\n  const [loading, setLoading] = useState(false);\n  const { showToast } = useToast();\n  const { profile } = useProfile();\n\n  const fetchPendingVerifications = async () => {\n    if (!profile?.id) return [];\n\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('charity_verifications')\n        .select(`\n          id,\n          charity_id,\n          status,\n          charity_documents (\n            document_type,\n            document_url\n          )\n        `)\n        .eq('status', 'pending');\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      showToast('error', 'Failed to fetch verifications');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateVerificationStatus = async (\n    verificationId: string,\n    status: 'approved' | 'rejected',\n    reason?: string\n  ) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase\n        .from('charity_verifications')\n        .update({\n          status,\n          reviewed_at: new Date().toISOString(),\n          review_notes: reason\n        })\n        .eq('id', verificationId);\n\n      if (error) throw error;\n      showToast('success', `Verification ${status} successfully`);\n    } catch (error) {\n      showToast('error', 'Failed to update verification status');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    fetchPendingVerifications,\n    updateVerificationStatus,\n    loading\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useAuth.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'supabase' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'MAX_LOGIN_ATTEMPTS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useToast } from '@/contexts/ToastContext';\nimport { supabase } from '@/lib/supabase';\nimport { validateAuthInput } from '@/utils/validation';\nimport { UserType } from '@/types/auth';\nimport { Logger } from '@/utils/logger';\nimport { RateLimiter } from '@/utils/security/rateLimiter';\nimport { useAuth as useAuthContext } from '@/contexts/AuthContext';\nimport { useWeb3 } from '@/contexts/Web3Context';\n\nconst MAX_LOGIN_ATTEMPTS = 5;\nconst LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes\n\nexport function useAuth() {\n  const authContext = useAuthContext();\n  const { disconnect } = useWeb3();\n  const [loading, setLoading] = useState(false);\n  const { showToast } = useToast();\n  const navigate = useNavigate();\n  const rateLimiter = RateLimiter.getInstance();\n\n  const login = async (email: string, password: string, accountType: 'donor' | 'charity') => {\n    try {\n      setLoading(true);\n      validateAuthInput(email, password);\n\n      // Check rate limiting\n      if (rateLimiter.isRateLimited(email, true)) {\n        throw new Error(`Too many login attempts. Please try again in ${LOCKOUT_DURATION / 60000} minutes.`);\n      }\n\n      try {\n        await authContext.login(email, password, accountType);\n        \n        // Reset rate limiting on successful login\n        rateLimiter.reset(email);\n      } catch (authError) {\n        // Log the detailed error\n        Logger.error('Auth context login failed', { \n          error: authError instanceof Error ? \n            { message: authError.message, stack: authError.stack } : \n            authError,\n          email\n        });\n        throw authError;\n      }\n    } catch (error) {\n      rateLimiter.increment(email);\n      const message = error instanceof Error ? error.message : 'Failed to sign in';\n      \n      // If account type mismatch, disconnect wallet\n      if (message.includes('registered as a') || message.includes('account type')) {\n        // Disconnect wallet\n        await disconnect();\n      }\n      \n      showToast('error', 'Authentication Error', message);\n      Logger.error('Login failed', { \n        error: error instanceof Error ? \n          { message: error.message, stack: error.stack } : \n          error, \n        email \n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (\n    email: string,\n    password: string,\n    type: UserType,\n    metadata = {}\n  ) => {\n    try {\n      setLoading(true);\n      validateAuthInput(email, password);\n      \n      await authContext.register(email, password, type, metadata);\n      \n      // Navigate to the appropriate login page\n      navigate(`/login?type=${type}`);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to register';\n      showToast('error', 'Registration Error', message);\n      Logger.error('Registration failed', { \n        error: error instanceof Error ? \n          { message: error.message, stack: error.stack } : \n          error, \n        email, \n        type \n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true);\n      await authContext.resetPassword(email);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to send reset email';\n      showToast('error', 'Reset Password Error', message);\n      Logger.error('Password reset failed', { \n        error: error instanceof Error ? \n          { message: error.message, stack: error.stack } : \n          error, \n        email \n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendUsernameReminder = async (email: string) => {\n    try {\n      setLoading(true);\n      await authContext.sendUsernameReminder(email);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to send username reminder';\n      showToast('error', 'Username Reminder Error', message);\n      Logger.error('Username reminder failed', { \n        error: error instanceof Error ? \n          { message: error.message, stack: error.stack } : \n          error, \n        email \n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setLoading(true);\n      \n      // Disconnect wallet first\n      await disconnect();\n      \n      // Then logout from auth\n      await authContext.logout();\n      \n      // Use window.location to stay on the same domain\n      window.location.href = `${window.location.origin}/`;\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Failed to log out';\n      showToast('error', 'Logout Error', message);\n      Logger.error('Logout failed', { \n        error: error instanceof Error ? \n          { message: error.message, stack: error.stack } : \n          error \n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    ...authContext,\n    login,\n    register,\n    resetPassword,\n    sendUsernameReminder,\n    logout,\n    loading\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharityProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCharityVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCountries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useCurrency.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDebounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDonationAnalytics.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAnalytics'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAnalytics, profile.id]","fix":{"range":[1525,1538],"text":"[fetchAnalytics, profile.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useToast } from '../contexts/ToastContext';\nimport { supabase } from '../lib/supabase';\nimport { useProfile } from './useProfile';\n\ninterface DonationMetrics {\n  totalDonated: number;\n  donationCount: number;\n  averageDonation: number;\n  impactMetrics: Record<string, number>;\n}\n\ninterface TimeseriesData {\n  date: string;\n  amount: number;\n}\n\nexport function useDonationAnalytics() {\n  const [metrics, setMetrics] = useState<DonationMetrics | null>(null);\n  const [timeseriesData, setTimeseriesData] = useState<TimeseriesData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { showToast } = useToast();\n  const { profile } = useProfile();\n\n  const fetchAnalytics = async () => {\n    if (!profile?.id) return;\n\n    try {\n      setLoading(true);\n\n      // Fetch aggregate metrics\n      const { data: metricsData, error: metricsError } = await supabase\n        .rpc('get_donation_metrics', { user_id: profile.id });\n\n      if (metricsError) throw metricsError;\n\n      // Fetch timeseries data\n      const { data: timeseriesData, error: timeseriesError } = await supabase\n        .rpc('get_donation_timeseries', { user_id: profile.id });\n\n      if (timeseriesError) throw timeseriesError;\n\n      setMetrics(metricsData);\n      setTimeseriesData(timeseriesData);\n    } catch (error) {\n      showToast('error', 'Failed to fetch analytics');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [profile?.id]);\n\n  return {\n    metrics,\n    timeseriesData,\n    loading,\n    refreshAnalytics: fetchAnalytics\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useDonorData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useToast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTransactionForm.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'amount' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { validateAmount } from '@/utils/validation';\nimport { Logger } from '@/utils/logger';\n\ninterface TransactionFormConfig {\n  onSuccess?: () => void;\n}\n\nexport function useTransactionForm({ onSuccess }: TransactionFormConfig) {\n  const [amount, setAmount] = useState('');\n  const [validationError, setValidationError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent, submitFn: (amount: string) => Promise<void>) => {\n    e.preventDefault();\n    setValidationError('');\n\n    const numAmount = parseFloat(amount);\n    if (!validateAmount(numAmount)) {\n      setValidationError('Please enter a valid amount between 0 and 1,000,000');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await submitFn(amount);\n      setAmount('');\n      onSuccess?.();\n\n      Logger.info('Transaction successful', {\n        amount\n      });\n    } catch (err) {\n      Logger.error('Transaction failed', {\n        error: err instanceof Error ? err.message : String(err),\n        amount\n      });\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    amount,\n    setAmount,\n    validationError,\n    loading,\n    handleSubmit\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTransactionTracking.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTransactions'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTransactions, profile.id]","fix":{"range":[1885,1898],"text":"[fetchTransactions, profile.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useToast } from '../contexts/ToastContext';\nimport { supabase } from '../lib/supabase';\nimport { useProfile } from './useProfile';\n\nexport interface Transaction {\n  id: string;\n  type: 'donation' | 'withdrawal';\n  amount: number;\n  status: 'pending' | 'completed' | 'failed';\n  txHash?: string;\n  created_at: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport function useTransactionTracking() {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { showToast } = useToast();\n  const { profile } = useProfile();\n\n  const trackTransaction = async (\n    type: Transaction['type'],\n    amount: number,\n    txHash?: string,\n    metadata?: Record<string, unknown>\n  ) => {\n    if (!profile?.id) throw new Error('Profile not found');\n\n    try {\n      const { error } = await supabase\n        .from('transactions')\n        .insert({\n          user_id: profile.id,\n          type,\n          amount,\n          status: 'pending',\n          tx_hash: txHash,\n          metadata\n        });\n\n      if (error) throw error;\n\n      showToast('success', 'Transaction tracked successfully');\n      await fetchTransactions();\n    } catch (error) {\n      showToast('error', 'Failed to track transaction');\n      throw error;\n    }\n  };\n\n  const fetchTransactions = async () => {\n    if (!profile?.id) return;\n\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('transactions')\n        .select('*')\n        .eq('user_id', profile.id)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setTransactions(data);\n    } catch (error) {\n      showToast('error', 'Failed to fetch transactions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [profile?.id]);\n\n  return {\n    transactions,\n    trackTransaction,\n    loading\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useTranslation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useVolunteerVerification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWallet.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'address' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'chainId' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'address' is defined but never used. Allowed unused args must match /^_/u.","line":191,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Logger } from '@/utils/logger';\nimport { CHAIN_IDS } from '@/config/contracts';\n\nexport interface WalletProvider {\n  name: string;\n  icon: string;\n  isInstalled: () => boolean;\n  isConnected: (address: string) => Promise<boolean>;\n  connect: () => Promise<string>;\n  disconnect: () => Promise<void>;\n  switchChain: (chainId: number | string) => Promise<void>;\n}\n\nclass EVMWalletBase implements WalletProvider {\n  name: string;\n  icon: string;\n  protected provider: unknown;\n\n  constructor(name: string, icon: string, provider: unknown) {\n    this.name = name;\n    this.icon = icon;\n    this.provider = provider;\n  }\n\n  isInstalled(): boolean {\n    return !!this.provider;\n  }\n\n  async isConnected(address: string): Promise<boolean> {\n    try {\n      const accounts = await this.provider.request({ method: 'eth_accounts' });\n      return accounts?.includes(address) || false;\n    } catch {\n      return false;\n    }\n  }\n\n  async connect(): Promise<string> {\n    try {\n      const accounts = await this.provider.request({\n        method: 'eth_requestAccounts'\n      });\n\n      if (!accounts?.length) {\n        throw new Error('No accounts found');\n      }\n\n      return accounts[0];\n    } catch (error) {\n      Logger.error(`${this.name} connection failed`, { error });\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // Most EVM wallets don't have a disconnect method\n    return Promise.resolve();\n  }\n\n  async switchChain(chainId: number): Promise<void> {\n    try {\n      await this.provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${chainId.toString(16)}` }]\n      });\n    } catch (error: unknown) {\n      if (error.code === 4902) {\n        // Chain not added, add it\n        await this.addChain(chainId);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  protected async addChain(chainId: number): Promise<void> {\n    const chainParams = this.getChainParams(chainId);\n    if (!chainParams) throw new Error('Unsupported chain');\n\n    await this.provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [chainParams]\n    });\n  }\n\n  protected getChainParams(chainId: number) {\n    const chains = {\n      [CHAIN_IDS.MOONBASE]: {\n        chainId: `0x${CHAIN_IDS.MOONBASE.toString(16)}`,\n        chainName: 'Moonbase Alpha',\n        nativeCurrency: {\n          name: 'DEV',\n          symbol: 'DEV',\n          decimals: 18\n        },\n        rpcUrls: ['https://rpc.api.moonbase.moonbeam.network'],\n        blockExplorerUrls: ['https://moonbase.moonscan.io/']\n      },\n      [CHAIN_IDS.MOONBEAM]: {\n        chainId: `0x${CHAIN_IDS.MOONBEAM.toString(16)}`,\n        chainName: 'Moonbeam',\n        nativeCurrency: {\n          name: 'GLMR',\n          symbol: 'GLMR',\n          decimals: 18\n        },\n        rpcUrls: ['https://rpc.api.moonbeam.network'],\n        blockExplorerUrls: ['https://moonbeam.moonscan.io/']\n      },\n      [CHAIN_IDS.ASTAR]: {\n        chainId: `0x${CHAIN_IDS.ASTAR.toString(16)}`,\n        chainName: 'Astar',\n        nativeCurrency: {\n          name: 'ASTR',\n          symbol: 'ASTR',\n          decimals: 18\n        },\n        rpcUrls: ['https://astar.api.onfinality.io/public'],\n        blockExplorerUrls: ['https://blockscout.com/astar']\n      },\n      [CHAIN_IDS.POLYGON]: {\n        chainId: `0x${CHAIN_IDS.POLYGON.toString(16)}`,\n        chainName: 'Polygon',\n        nativeCurrency: {\n          name: 'MATIC',\n          symbol: 'MATIC',\n          decimals: 18\n        },\n        rpcUrls: ['https://polygon-rpc.com'],\n        blockExplorerUrls: ['https://polygonscan.com/']\n      }\n    };\n    return chains[chainId as keyof typeof chains];\n  }\n}\n\nclass MetaMaskWallet extends EVMWalletBase {\n  constructor() {\n    super('MetaMask', 'metamask', window.ethereum?.isMetaMask ? window.ethereum : null);\n  }\n\n  isInstalled(): boolean {\n    return typeof window.ethereum?.isMetaMask !== 'undefined';\n  }\n}\n\nclass CoinbaseWallet extends EVMWalletBase {\n  constructor() {\n    super('Coinbase Wallet', 'coinbase', window.ethereum?.isCoinbaseWallet ? window.ethereum : null);\n  }\n\n  isInstalled(): boolean {\n    return typeof window.ethereum?.isCoinbaseWallet !== 'undefined';\n  }\n}\n\nclass TallyWallet extends EVMWalletBase {\n  constructor() {\n    super('Tally', 'tally', window.ethereum?.isTally ? window.ethereum : null);\n  }\n\n  isInstalled(): boolean {\n    return typeof window.ethereum?.isTally !== 'undefined';\n  }\n}\n\nclass BraveWallet extends EVMWalletBase {\n  constructor() {\n    super('Brave', 'brave', window.ethereum?.isBraveWallet ? window.ethereum : null);\n  }\n\n  isInstalled(): boolean {\n    return typeof window.ethereum?.isBraveWallet !== 'undefined';\n  }\n}\n\nclass PolkadotWallet implements WalletProvider {\n  name = 'Polkadot';\n  icon = 'polkadot';\n  private injector: unknown = null;\n  private extensions: unknown[] = [];\n\n  async initialize() {\n    // Polkadot.js extension functionality removed\n  }\n\n  isInstalled(): boolean {\n    return false;\n  }\n\n  async isConnected(address: string): Promise<boolean> {\n    return false;\n  }\n\n  async connect(): Promise<string> {\n    throw new Error('Polkadot wallet connection not implemented');\n  }\n\n  async disconnect(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  async switchChain(chainId: string): Promise<void> {\n    Logger.info('Chain switch requested', { chain: chainId });\n  }\n}\n\nexport function useWallet() {\n  const wallets: WalletProvider[] = [\n    new MetaMaskWallet(),\n    new CoinbaseWallet(),\n    new TallyWallet(),\n    new BraveWallet(),\n    new PolkadotWallet()\n  ];\n\n  const getInstalledWallets = () => {\n    return wallets.filter(wallet => wallet.isInstalled());\n  };\n\n  return {\n    getInstalledWallets,\n    wallets\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWalletAlias.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWalletAlias'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [user, address, fetchWalletAlias]","fix":{"range":[934,949],"text":"[user, address, fetchWalletAlias]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserAliases'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserAliases, user]","fix":{"range":[1077,1083],"text":"[fetchUserAliases, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { WalletAlias } from '@/types/user';\nimport { Logger } from '@/utils/logger';\nimport { useToast } from '@/contexts/ToastContext';\n\nexport function useWalletAlias() {\n  const { user } = useAuth();\n  const { address } = useWeb3();\n  const { showToast } = useToast();\n  const [alias, setAlias] = useState<string>('');\n  const [aliases, setAliases] = useState<WalletAlias[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const MAX_RETRIES = 3;\n  const RETRY_DELAY = 1000; // 1 second base delay\n\n  // Fetch the current user's wallet alias\n  useEffect(() => {\n    if (user && address) {\n      fetchWalletAlias();\n    }\n  }, [user, address]);\n\n  // Fetch all wallet aliases for the current user\n  useEffect(() => {\n    if (user) {\n      fetchUserAliases();\n    }\n  }, [user]);\n\n  const fetchWalletAlias = async () => {\n    if (!user || !address) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      Logger.info('Fetching wallet alias', { address });\n\n      const { data, error: fetchError } = await supabase\n        .from('wallet_aliases')\n        .select('alias')\n        .eq('user_id', user.id)\n        .eq('wallet_address', address)\n        .maybeSingle();\n\n      if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" error\n        throw fetchError;\n      }\n\n      setAlias(data?.alias || '');\n      \n      // Reset retry count on success\n      setRetryCount(0);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      const errorStack = err instanceof Error ? err.stack : undefined;\n      \n      Logger.error('Error fetching wallet alias', { \n        error: errorMessage,\n        stack: errorStack,\n        address,\n        retryCount\n      });\n      \n      setError('Failed to fetch wallet alias');\n      \n      // Implement retry with exponential backoff\n      if (retryCount < MAX_RETRIES) {\n        const delay = RETRY_DELAY * Math.pow(2, retryCount);\n        Logger.info(`Retrying wallet alias fetch in ${delay}ms (attempt ${retryCount + 1}/${MAX_RETRIES})`);\n        \n        setTimeout(() => {\n          setRetryCount(prev => prev + 1);\n          fetchWalletAlias();\n        }, delay);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUserAliases = async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      Logger.info('Fetching user aliases');\n\n      const { data, error: fetchError } = await supabase\n        .from('wallet_aliases')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n\n      if (fetchError) {\n        throw fetchError;\n      }\n\n      setAliases(data || []);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      const errorStack = err instanceof Error ? err.stack : undefined;\n      \n      Logger.error('Error fetching user aliases', { \n        error: errorMessage,\n        stack: errorStack\n      });\n      \n      setError('Failed to fetch wallet aliases');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const setWalletAlias = async (newAlias: string) => {\n    if (!user || !address) {\n      setError('User or wallet not connected');\n      return false;\n    }\n\n    if (!newAlias.trim()) {\n      setError('Alias cannot be empty');\n      return false;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      Logger.info('Setting wallet alias', { address, alias: newAlias });\n\n      // Check if alias is already taken\n      const { data: existingAlias, error: checkError } = await supabase\n        .from('wallet_aliases')\n        .select('id')\n        .eq('alias', newAlias)\n        .not('user_id', 'eq', user.id) // Allow user to reuse their own aliases\n        .single();\n\n      if (checkError && checkError.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" error\n        throw checkError;\n      }\n\n      if (existingAlias) {\n        setError('This alias is already taken');\n        return false;\n      }\n\n      // Check if this wallet already has an alias for this user\n      const { data: existingWalletAlias, error: walletCheckError } = await supabase\n        .from('wallet_aliases')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('wallet_address', address)\n        .maybeSingle();\n\n      if (walletCheckError && walletCheckError.code !== 'PGRST116') {\n        throw walletCheckError;\n      }\n\n      let result;\n\n      if (existingWalletAlias) {\n        // Update existing alias\n        result = await supabase\n          .from('wallet_aliases')\n          .update({ alias: newAlias, updated_at: new Date().toISOString() })\n          .eq('id', existingWalletAlias.id);\n      } else {\n        // Create new alias\n        result = await supabase\n          .from('wallet_aliases')\n          .insert({\n            user_id: user.id,\n            wallet_address: address,\n            alias: newAlias\n          });\n      }\n\n      if (result.error) {\n        throw result.error;\n      }\n\n      setAlias(newAlias);\n      await fetchUserAliases(); // Refresh the list of aliases\n      showToast('success', 'Wallet alias updated', 'Your wallet alias has been successfully updated');\n      return true;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to set wallet alias';\n      const errorStack = err instanceof Error ? err.stack : undefined;\n      \n      Logger.error('Error setting wallet alias', { \n        error: message,\n        stack: errorStack\n      });\n      \n      setError(message);\n      showToast('error', 'Error', message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteWalletAlias = async (aliasId: string) => {\n    if (!user) {\n      setError('User not connected');\n      return false;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      Logger.info('Deleting wallet alias', { aliasId });\n\n      const { error: deleteError } = await supabase\n        .from('wallet_aliases')\n        .delete()\n        .eq('id', aliasId)\n        .eq('user_id', user.id); // Ensure user can only delete their own aliases\n\n      if (deleteError) {\n        throw deleteError;\n      }\n\n      // Refresh the list of aliases\n      await fetchUserAliases();\n      \n      // If the deleted alias was for the current wallet, clear the current alias\n      if (address) {\n        await fetchWalletAlias();\n      }\n      \n      showToast('success', 'Wallet alias deleted', 'Your wallet alias has been successfully removed');\n      return true;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to delete wallet alias';\n      const errorStack = err instanceof Error ? err.stack : undefined;\n      \n      Logger.error('Error deleting wallet alias', { \n        error: message,\n        stack: errorStack\n      });\n      \n      setError(message);\n      showToast('error', 'Error', message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get alias for any wallet address (for display in leaderboards, etc.)\n  const getAliasForAddress = async (walletAddress: string): Promise<string | null> => {\n    try {\n      Logger.info('Getting alias for address', { walletAddress });\n\n      const { data, error } = await supabase\n        .from('wallet_aliases')\n        .select('alias')\n        .eq('wallet_address', walletAddress)\n        .maybeSingle();\n\n      if (error) {\n        Logger.warn('No alias found for address', { walletAddress, error: error.message });\n        return null;\n      }\n\n      return data?.alias || null;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      const errorStack = err instanceof Error ? err.stack : undefined;\n      \n      Logger.error('Error getting alias for address', { \n        error: errorMessage,\n        stack: errorStack,\n        address: walletAddress\n      });\n      \n      return null;\n    }\n  };\n\n  return {\n    alias,\n    aliases,\n    loading,\n    error,\n    setWalletAlias,\n    deleteWalletAlias,\n    getAliasForAddress,\n    refreshAliases: fetchUserAliases\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/useWithdrawals.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'WithdrawalRequest' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useProfile } from '@/hooks/useProfile';\nimport { WithdrawalRequest } from '@/types/charity';\nimport { Logger } from '@/utils/logger';\n\ninterface Withdrawal {\n  id: string;\n  amount: number;\n  status: 'pending' | 'approved' | 'rejected';\n  created_at: string;\n  processed_at: string | null;\n}\n\nexport const useWithdrawals = () => {\n  const { profile } = useProfile();\n  const [withdrawals, setWithdrawals] = useState<Withdrawal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchWithdrawals = async () => {\n      if (!profile?.id) return;\n\n      try {\n        const { data, error: fetchError } = await supabase\n          .from('withdrawal_requests')\n          .select('*')\n          .eq('charity_id', profile.id)\n          .order('created_at', { ascending: false });\n\n        if (fetchError) throw fetchError;\n        setWithdrawals(data || []);\n      } catch (err) {\n        setError('Error fetching withdrawals');\n        Logger.error('Error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWithdrawals();\n  }, [profile]);\n\n  const requestWithdrawal = async (amount: number) => {\n    if (!profile?.id) return;\n\n    try {\n      setLoading(true);\n      const { error: withdrawalError, data } = await supabase\n        .from('withdrawal_requests')\n        .insert({\n          charity_id: profile.id,\n          amount,\n          status: 'pending'\n        })\n        .select()\n        .single();\n\n      if (withdrawalError) throw withdrawalError;\n      setWithdrawals(prev => [data, ...prev]);\n    } catch (err) {\n      setError('Error requesting withdrawal');\n      console.error('Error:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { withdrawals, requestWithdrawal, loading, error };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useCharity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useContract.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useDonation.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'NATIVE' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'TOKEN' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":8},{"ruleId":"no-unused-vars","severity":1,"message":"'DIRECT' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'EQUITY' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'tokenAddress' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useContract } from './useContract';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { parseEther } from 'ethers';\nimport { Logger } from '@/utils/logger';\nimport { trackTransaction } from '@/lib/sentry';\n\nexport enum DonationType {\n  NATIVE = 'native',\n  TOKEN = 'token'\n}\n\nexport enum PoolType {\n  DIRECT = 'direct',\n  EQUITY = 'equity'\n}\n\ninterface DonationParams {\n  charityAddress: string;\n  amount: string;\n  type: DonationType;\n  tokenAddress?: string;\n  poolType?: PoolType;\n}\n\nexport function useDonation() {\n  const { contract } = useContract('donation');\n  const { address } = useWeb3();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const donate = async ({ charityAddress, amount, type, tokenAddress, poolType = PoolType.DIRECT }: DonationParams) => {\n    if (!contract || !address) {\n      throw new Error('Contract or wallet not connected');\n    }\n\n    // Start Sentry transaction tracking\n    const transaction = trackTransaction('donation', {\n      amount,\n      charityId: charityAddress,\n      donationType: type,\n      status: 'started'\n    });\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const parsedAmount = parseEther(amount);\n\n      if (type === DonationType.NATIVE) {\n        // For direct donations\n        if (poolType === PoolType.DIRECT) {\n          // In ethers v6, we need to use the contract.getFunction method\n          const donateFunction = contract.getFunction('donate');\n          const tx = await donateFunction(charityAddress, {\n            value: parsedAmount\n          });\n          await tx.wait();\n        } \n        // For equity pool donations\n        else if (poolType === PoolType.EQUITY) {\n          // This would call a different contract method for equity pool donations\n          // For now, we'll use the same method\n          const donateFunction = contract.getFunction('donate');\n          const tx = await donateFunction(charityAddress, {\n            value: parsedAmount\n          });\n          await tx.wait();\n        }\n\n        Logger.info('Donation successful', {\n          amount,\n          charity: charityAddress,\n          type: 'native',\n          poolType\n        });\n\n        // Mark transaction as successful\n        transaction.finish('ok');\n      } else {\n        // For token donations, we would need to implement this\n        // based on the contract's token donation functionality\n        throw new Error('Token donations not yet implemented');\n      }\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to process donation';\n      setError(message);\n      Logger.error('Donation failed', {\n        error: err,\n        amount,\n        charity: charityAddress,\n        type\n      });\n      \n      // Mark transaction as failed\n      transaction.finish('error');\n      \n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const withdraw = async (amount: string) => {\n    if (!contract || !address) {\n      throw new Error('Contract or wallet not connected');\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const parsedAmount = parseEther(amount);\n      const withdrawFunction = contract.getFunction('withdraw');\n      const tx = await withdrawFunction(parsedAmount);\n      const receipt = await tx.wait();\n\n      Logger.info('Withdrawal successful', {\n        amount,\n        txHash: receipt.hash\n      });\n      \n      return receipt.hash;\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to process withdrawal';\n      setError(message);\n      Logger.error('Withdrawal failed', {\n        error: err,\n        amount\n      });\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    donate,\n    withdraw,\n    loading,\n    error\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useScheduledDonation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/hooks/web3/useTransactionForm.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'amount' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { validateAmount } from '@/utils/validation';\nimport { Logger } from '@/utils/logger';\n\ninterface TransactionFormConfig {\n  onSuccess?: () => void;\n}\n\nexport function useTransactionForm({ onSuccess }: TransactionFormConfig) {\n  const [amount, setAmount] = useState('');\n  const [validationError, setValidationError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent, executeFn: (amount: string) => Promise<void>) => {\n    e.preventDefault();\n    setValidationError('');\n\n    const numAmount = parseFloat(amount);\n    if (!validateAmount(numAmount)) {\n      setValidationError('Please enter a valid amount between 0 and 1,000,000');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await executeFn(amount);\n      setAmount('');\n      onSuccess?.();\n\n      Logger.info('Transaction successful', {\n        amount\n      });\n    } catch (err) {\n      Logger.error('Transaction failed', {\n        error: err instanceof Error ? err.message : String(err),\n        amount\n      });\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    amount,\n    setAmount,\n    validationError,\n    loading,\n    handleSubmit\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/de.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/en.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/es.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/fr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/hi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ja.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/ko.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/th.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/vi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/zh-CN.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/i18n/resources/zh-TW.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/lib/sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/lib/supabase.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":95},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":97,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":126}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport { ENV } from '../config/env';\n\n// Supabase client configuration\nconst supabaseUrl = ENV.SUPABASE_URL;\nconst supabaseAnonKey = ENV.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\n    'Missing Supabase environment variables. Please check VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY.'\n  );\n}\n\n// Create Supabase client with security and performance optimizations\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    // Configure auth settings\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'pkce', // Use PKCE flow for better security\n    // Storage for auth tokens\n    storage: {\n      getItem: (key: string) => {\n        if (typeof window !== 'undefined') {\n          return window.localStorage.getItem(key);\n        }\n        return null;\n      },\n      setItem: (key: string, value: string) => {\n        if (typeof window !== 'undefined') {\n          window.localStorage.setItem(key, value);\n        }\n      },\n      removeItem: (key: string) => {\n        if (typeof window !== 'undefined') {\n          window.localStorage.removeItem(key);\n        }\n      },\n    },\n  },\n  db: {\n    // Database settings\n    schema: 'public',\n  },\n  global: {\n    // Global settings\n    headers: {\n      'X-Client-Info': 'give-protocol-app',\n    },\n  },\n  realtime: {\n    // Realtime settings for live updates\n    params: {\n      eventsPerSecond: 10,\n    },\n  },\n});\n\n// Helper functions for common operations\nexport const supabaseHelpers = {\n  // Auth helpers\n  async getCurrentUser() {\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error) throw error;\n    return user;\n  },\n\n  async signOut() {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  },\n\n  async refreshSession() {\n    const { data, error } = await supabase.auth.refreshSession();\n    if (error) throw error;\n    return data;\n  },\n\n  // Database helpers\n  async handleError(error: Error | unknown, context: string) {\n    console.error(`Supabase error in ${context}:`, error);\n    \n    // Log to monitoring if available\n    if (typeof window !== 'undefined' && 'MonitoringService' in window) {\n      const monitoringService = (window as { MonitoringService?: { trackMetric: (event: string, data: Record<string, unknown>) => void } }).MonitoringService;\n      if (monitoringService?.trackMetric) {\n        monitoringService.trackMetric('supabase_error', {\n          context,\n          error: error instanceof Error ? error.message : String(error),\n          code: error instanceof Error && 'code' in error ? error.code : undefined,\n          details: error instanceof Error && 'details' in error ? error.details : undefined,\n        });\n      }\n    }\n    \n    throw error;\n  },\n\n  // Connection helpers\n  async testConnection() {\n    try {\n      const { error } = await supabase\n        .from('_supabase_test')\n        .select('*')\n        .limit(1);\n      \n      if (error && error.code !== 'PGRST116') { // PGRST116 = table not found, which is fine for test\n        throw error;\n      }\n      \n      return true;\n    } catch (error) {\n      console.warn('Supabase connection test failed:', error);\n      return false;\n    }\n  },\n};\n\n// Types for better TypeScript support\nexport type SupabaseClient = typeof supabase;\n\n// Export default client\nexport default supabase;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/middleware/errorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/middleware/security.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SecurityManager } from '../utils/security';\nimport { CSRFProtection } from '../utils/security/csrf';\nimport { InputSanitizer } from '../utils/security/sanitizer';\nimport { RateLimiter } from '../utils/security/rateLimiter';\nimport { Logger } from '../utils/logger';\n\nexport function initializeSecurity(): void {\n  try {\n    const securityManager = SecurityManager.getInstance();\n    securityManager.initialize();\n  } catch (error) {\n    Logger.error('Failed to initialize security middleware', { error });\n    throw error;\n  }\n}\n\nexport function withSecurity<T extends (...args: unknown[]) => Promise<unknown>>(\n  handler: T\n): T {\n  return (async (...args: Parameters<T>) => {\n    const csrf = CSRFProtection.getInstance();\n    const sanitizer = InputSanitizer.getInstance();\n    const rateLimiter = RateLimiter.getInstance();\n\n    try {\n      // Rate limiting check\n      const clientId = args[0]?.headers?.['x-client-id'] || 'anonymous';\n      if (rateLimiter.isRateLimited(clientId)) {\n        throw new Error('Too many requests');\n      }\n\n      // CSRF validation\n      const token = args[0]?.headers?.[csrf.getHeaders()['X-CSRF-Token']];\n      if (!csrf.validate(token)) {\n        throw new Error('Invalid CSRF token');\n      }\n\n      // Sanitize input\n      const sanitizedArgs = args.map(arg => {\n        if (typeof arg === 'object') {\n          return sanitizer.sanitizeObject(arg, {\n            // Define schema based on expected input\n            text: 'text',\n            html: 'html',\n            email: 'email',\n            url: 'url'\n          });\n        }\n        return arg;\n      });\n\n      // Execute handler with sanitized arguments\n      const result = await handler(...sanitizedArgs);\n      return result;\n    } catch (error) {\n      Logger.error('Security middleware error', { error });\n      throw error;\n    }\n  }) as T;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/About.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Newspaper' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Users, Target, Newspaper, Heart, Shield, Globe, TrendingUp } from 'lucide-react';\nimport { StaticPageLayout } from '@/components/layout/StaticPageLayout';\n\nexport const About: React.FC = () => {\n  return (\n    <StaticPageLayout \n      title=\"About Give Protocol\"\n      subtitle=\"Revolutionizing charitable giving through blockchain technology\"\n    >\n      <div className=\"space-y-16\">\n        {/* Mission & Vision */}\n        <section>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-white p-8 rounded-lg shadow-lg border border-gray-200\">\n              <div className=\"flex items-center mb-6\">\n                <Target className=\"h-8 w-8 text-indigo-600 mr-3\" />\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Our Mission</h2>\n              </div>\n              <p className=\"text-gray-600 leading-relaxed\">\n                To revolutionize charitable giving by leveraging blockchain technology, ensuring transparency, \n                efficiency, and lasting impact for both donors and charitable organizations.\n              </p>\n            </div>\n            <div className=\"bg-white p-8 rounded-lg shadow-lg border border-gray-200\">\n              <div className=\"flex items-center mb-6\">\n                <Globe className=\"h-8 w-8 text-indigo-600 mr-3\" />\n                <h2 className=\"text-2xl font-semibold text-gray-900\">Our Vision</h2>\n              </div>\n              <p className=\"text-gray-600 leading-relaxed\">\n                A world where every charitable donation creates maximum impact through transparent, \n                efficient, and sustainable giving mechanisms.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* What We Do */}\n        <section>\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">What We Do</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-indigo-100 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center\">\n                <Heart className=\"h-10 w-10 text-indigo-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Direct Donations</h3>\n              <p className=\"text-gray-600\">\n                Enable cryptocurrency donations directly to verified charitable organizations with complete transparency.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-indigo-100 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center\">\n                <Users className=\"h-10 w-10 text-indigo-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Volunteer Connection</h3>\n              <p className=\"text-gray-600\">\n                Connect volunteers with meaningful opportunities and track verified volunteer hours on the blockchain.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-indigo-100 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center\">\n                <TrendingUp className=\"h-10 w-10 text-indigo-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Portfolio Funds</h3>\n              <p className=\"text-gray-600\">\n                Support multiple organizations in the same sector through diversified giving portfolios.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Our Values */}\n        <section className=\"bg-gray-50 rounded-lg p-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Our Values</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Shield className=\"h-6 w-6 text-indigo-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Transparency</h3>\n              </div>\n              <p className=\"text-gray-600\">\n                Every donation and volunteer hour is recorded on the blockchain, providing unprecedented \n                transparency in charitable giving.\n              </p>\n            </div>\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Target className=\"h-6 w-6 text-indigo-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Impact</h3>\n              </div>\n              <p className=\"text-gray-600\">\n                We focus on measurable outcomes and ensure that every contribution creates meaningful, \n                lasting change in communities worldwide.\n              </p>\n            </div>\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Users className=\"h-6 w-6 text-indigo-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Community</h3>\n              </div>\n              <p className=\"text-gray-600\">\n                Building a global community of donors, volunteers, and organizations working together \n                for positive social change.\n              </p>\n            </div>\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <TrendingUp className=\"h-6 w-6 text-indigo-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold text-gray-900\">Innovation</h3>\n              </div>\n              <p className=\"text-gray-600\">\n                Leveraging cutting-edge blockchain technology to solve traditional challenges \n                in charitable giving and volunteer coordination.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* The Technology */}\n        <section>\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Built on Blockchain</h2>\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <p className=\"text-lg text-gray-600 mb-8\">\n              Give Protocol is built on the Moonbeam Network, providing the security and transparency \n              of blockchain technology while maintaining accessibility for users and organizations.\n            </p>\n            <div className=\"grid md:grid-cols-3 gap-6 text-sm\">\n              <div className=\"bg-white p-6 rounded-lg shadow border border-gray-200\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Smart Contracts</h4>\n                <p className=\"text-gray-600\">Automated, transparent execution of donations and volunteer agreements</p>\n              </div>\n              <div className=\"bg-white p-6 rounded-lg shadow border border-gray-200\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Immutable Records</h4>\n                <p className=\"text-gray-600\">Permanent, tamper-proof record of all charitable activities</p>\n              </div>\n              <div className=\"bg-white p-6 rounded-lg shadow border border-gray-200\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Decentralized Governance</h4>\n                <p className=\"text-gray-600\">Community-driven decision making for platform development</p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Join Us */}\n        <section className=\"text-center bg-indigo-50 rounded-lg p-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Join the Future of Giving</h2>\n          <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Whether you&apos;re a donor looking to make an impact, a volunteer ready to contribute your time, \n            or an organization seeking support, Give Protocol provides the tools you need to create \n            meaningful change.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button className=\"bg-indigo-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-indigo-700 transition-colors\">\n              Start Giving\n            </button>\n            <button className=\"border border-indigo-600 text-indigo-600 px-8 py-3 rounded-lg font-semibold hover:bg-indigo-50 transition-colors\">\n              Find Opportunities\n            </button>\n          </div>\n        </section>\n      </div>\n    </StaticPageLayout>\n  );\n};\n\nexport default About;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityBrowser.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Search, Filter, CheckCircle } from 'lucide-react';\nimport { SearchBar } from '../components/charity/SearchBar';\nimport { CharityGrid } from '../components/charity/CharityGrid';\nimport { PortfolioGrid } from '../components/charity/PortfolioGrid';\nimport { CauseGrid } from '../components/charity/CauseGrid';\nimport { Button } from '../components/ui/Button';\n\ntype ViewMode = 'charities' | 'causes' | 'portfolios';\n\nconst CharityBrowser: React.FC = () => {\n  const [viewMode, setViewMode] = useState<ViewMode>('charities');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [verifiedOnly, setVerifiedOnly] = useState(false);\n\n  const handleSearch = (term: string) => {\n    setSearchTerm(term);\n  };\n\n  const renderContent = () => {\n    switch (viewMode) {\n      case 'charities':\n        return (\n          <CharityGrid\n            searchTerm={searchTerm}\n            category={selectedCategory}\n            verifiedOnly={verifiedOnly}\n          />\n        );\n      case 'causes':\n        return (\n          <CauseGrid\n            searchTerm={searchTerm}\n            category={selectedCategory}\n          />\n        );\n      case 'portfolios':\n        return (\n          <PortfolioGrid\n            searchTerm={searchTerm}\n            category={selectedCategory}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Discover Impact Opportunities</h1>\n          \n          <div className=\"flex space-x-4 mb-6\">\n            <Button\n              variant={viewMode === 'charities' ? 'primary' : 'secondary'}\n              onClick={() => setViewMode('charities')}\n            >\n              Charities\n            </Button>\n            <Button\n              variant={viewMode === 'causes' ? 'primary' : 'secondary'}\n              onClick={() => setViewMode('causes')}\n            >\n              Causes\n            </Button>\n            <Button\n              variant={viewMode === 'portfolios' ? 'primary' : 'secondary'}\n              onClick={() => setViewMode('portfolios')}\n            >\n              Portfolio Funds\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <SearchBar\n              searchTerm={searchTerm}\n              onSearchChange={handleSearch}\n              selectedCategory={selectedCategory}\n              onCategoryChange={setSelectedCategory}\n              categories={[\n                'Water & Sanitation',\n                'Education',\n                'Healthcare',\n                'Environment',\n                'Poverty Relief',\n                'Animal Welfare'\n              ]}\n            />\n\n            {viewMode === 'charities' && (\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"verified\"\n                  checked={verifiedOnly}\n                  onChange={(e) => setVerifiedOnly(e.target.checked)}\n                  className=\"h-4 w-4 text-indigo-600 rounded border-gray-300\"\n                />\n                <label htmlFor=\"verified\" className=\"text-sm text-gray-700 flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 mr-1 text-indigo-600\" />\n                  Verified Charities Only\n                </label>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default CharityBrowser;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/CharityPortal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCharityData'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCharityData, profile?.id]","fix":{"range":[2407,2420],"text":"[fetchCharityData, profile?.id]"}}]},{"ruleId":"no-unused-vars","severity":1,"message":"'handleVerificationCreated' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":332,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":332,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchCharityData'. Either include it or remove the dependency array.","line":336,"column":6,"nodeType":"ArrayExpression","endLine":336,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCharityData]","fix":{"range":[12335,12337],"text":"[fetchCharityData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'fetchCharityData'. Either include it or remove the dependency array.","line":341,"column":6,"nodeType":"ArrayExpression","endLine":341,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCharityData]","fix":{"range":[12432,12434],"text":"[fetchCharityData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Navigate, Link } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useProfile } from '@/hooks/useProfile';\nimport { DollarSign, Users, Clock, Download, Award, ExternalLink, Plus, CheckCircle, X, ChevronUp, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { Card } from '@/components/ui/Card';\nimport { Transaction } from '@/types/contribution';\nimport { DonationExportModal } from '@/components/contribution/DonationExportModal';\nimport { formatDate } from '@/utils/date';\nimport { useTranslation } from '@/hooks/useTranslation';\nimport { CurrencyDisplay } from '@/components/CurrencyDisplay';\nimport { supabase } from '@/lib/supabase';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Logger } from '@/utils/logger';\n\ninterface VolunteerApplication {\n  id: string;\n  full_name: string;\n  opportunity?: {\n    id: string;\n    title: string;\n  };\n}\n\ninterface VolunteerHours {\n  id: string;\n  volunteer_id: string;\n  volunteerName: string;\n  hours: number;\n  date_performed: string;\n  description: string;\n}\n\nexport const CharityPortal: React.FC = () => {\n  const { user, userType } = useAuth();\n  const { profile, loading: profileLoading } = useProfile();\n  const [activeTab, setActiveTab] = useState<'transactions' | 'volunteers' | 'applications' | 'opportunities'>('transactions');\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [sortConfig, setSortConfig] = useState<{\n    key: 'date' | 'type' | 'status' | 'organization' | null;\n    direction: 'asc' | 'desc';\n  }>({ key: null, direction: 'asc' });\n  const { t } = useTranslation();\n  \n  // State for charity statistics\n  const [charityStats, setCharityStats] = useState({\n    totalDonated: 0,\n    volunteerHours: 0,\n    skillsEndorsed: 0,\n    activeVolunteers: 0\n  });\n  \n  // State for transactions, applications, and hours\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [pendingApplications, setPendingApplications] = useState<VolunteerApplication[]>([]);\n  const [pendingHours, setPendingHours] = useState<VolunteerHours[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (profile?.id) {\n      fetchCharityData();\n    }\n  }, [profile?.id]);\n\n  const fetchCharityData = async () => {\n    if (!profile?.id) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      Logger.info('Fetching charity data', { profileId: profile.id });\n      \n      // Fetch charity statistics with error handling\n      Logger.info('Fetching donations data');\n      const { data: donationsData, error: donationsError } = await supabase\n        .from('donations')\n        .select('amount')\n        .eq('charity_id', profile.id);\n        \n      if (donationsError) {\n        Logger.error('Error fetching donations data', { error: donationsError.message });\n        throw donationsError;\n      }\n      \n      // Ensure donationsData is an array\n      const donations = Array.isArray(donationsData) ? donationsData : [];\n      Logger.info('Donations data received', { count: donations.length });\n      \n      Logger.info('Fetching volunteer hours data');\n      const { data: hoursData, error: hoursDataError } = await supabase\n        .from('volunteer_hours')\n        .select('hours')\n        .eq('charity_id', profile.id)\n        .eq('status', 'approved');\n        \n      if (hoursDataError) {\n        Logger.error('Error fetching hours data', { error: hoursDataError.message });\n        throw hoursDataError;\n      }\n      \n      // Ensure hoursData is an array\n      const hours = Array.isArray(hoursData) ? hoursData : [];\n      Logger.info('Hours data received', { count: hours.length });\n      \n      Logger.info('Fetching endorsements data');\n      const { data: endorsementsData, error: endorsementsError } = await supabase\n        .from('skill_endorsements')\n        .select('id')\n        .eq('recipient_id', profile.id);\n        \n      if (endorsementsError) {\n        Logger.error('Error fetching endorsements data', { error: endorsementsError.message });\n        throw endorsementsError;\n      }\n      \n      // Ensure endorsementsData is an array\n      const endorsements = Array.isArray(endorsementsData) ? endorsementsData : [];\n      Logger.info('Endorsements data received', { count: endorsements.length });\n      \n      Logger.info('Fetching volunteers data');\n      const { data: volunteersData, error: volunteersError } = await supabase\n        .from('volunteer_hours')\n        .select('volunteer_id')\n        .eq('charity_id', profile.id)\n        .eq('status', 'approved');\n        \n      if (volunteersError) {\n        Logger.error('Error fetching volunteers data', { error: volunteersError.message });\n        throw volunteersError;\n      }\n      \n      // Ensure volunteersData is an array\n      const volunteers = Array.isArray(volunteersData) ? volunteersData : [];\n      Logger.info('Volunteers data received', { count: volunteers.length });\n      \n      // Calculate statistics with proper type checking and error handling\n      const totalDonated = donations.reduce((sum, donation) => {\n        const amount = donation?.amount ? Number(donation.amount) : 0;\n        return sum + amount;\n      }, 0);\n        \n      const totalHours = hours.reduce((sum, hour) => {\n        const hourCount = hour?.hours ? Number(hour.hours) : 0;\n        return sum + hourCount;\n      }, 0);\n        \n      const totalEndorsements = endorsements.length;\n      \n      // Create a Set of unique volunteer IDs with type checking\n      const uniqueVolunteers = new Set(\n        Array.isArray(volunteers) && volunteers.length > 0\n          ? volunteers\n              .filter(v => v?.volunteer_id)\n              .map(v => v.volunteer_id)\n          : []\n      );\n      \n      Logger.info('Calculated charity statistics', {\n        totalDonated,\n        totalHours,\n        totalEndorsements,\n        uniqueVolunteersCount: uniqueVolunteers.size\n      });\n      \n      setCharityStats({\n        totalDonated,\n        volunteerHours: totalHours,\n        skillsEndorsed: totalEndorsements,\n        activeVolunteers: uniqueVolunteers.size\n      });\n      \n      // Fetch transactions (donations) with error handling\n      Logger.info('Fetching detailed donations data');\n      const { data: detailedDonations, error: transactionsError } = await supabase\n        .from('donations')\n        .select(`\n          id,\n          amount,\n          created_at,\n          donor:donor_id (\n            id,\n            user_id\n          )\n        `)\n        .eq('charity_id', profile.id)\n        .order('created_at', { ascending: false });\n        \n      if (transactionsError) {\n        Logger.error('Error fetching detailed donations data', { error: transactionsError.message });\n        throw transactionsError;\n      }\n      \n      // Ensure detailedDonations is an array\n      const donationsList = Array.isArray(detailedDonations) ? detailedDonations : [];\n      Logger.info('Detailed donations data received', { count: donationsList.length });\n      \n      // Format transactions with type checking\n      const formattedTransactions = donationsList.map(donation => ({\n        id: donation?.id || '',\n        hash: donation?.id || '', // Using ID as hash for sample data\n        from: donation?.donor?.id || '',\n        to: profile.id || '',\n        amount: donation?.amount ? Number(donation.amount) : 0,\n        cryptoType: 'GLMR',\n        fiatValue: donation?.amount ? Number(donation.amount) : 0,\n        fee: donation?.amount ? Number(donation.amount) * 0.001 : 0,\n        timestamp: donation?.created_at || new Date().toISOString(),\n        status: 'completed',\n        purpose: 'Donation',\n        metadata: {\n          organization: donation?.donor?.id ? `Donor (${donation.donor.id.substring(0, 8)}...)` : 'Anonymous',\n          donor: donation?.donor?.id ? `Donor (${donation.donor.id.substring(0, 8)}...)` : 'Anonymous',\n          category: 'Donation'\n        }\n      }));\n      \n      setTransactions(formattedTransactions);\n      \n      // Fetch pending volunteer applications with error handling\n      Logger.info('Fetching volunteer applications');\n      \n      // First, get all opportunity IDs for this charity\n      const { data: opportunityIds, error: idsError } = await supabase\n        .from('volunteer_opportunities')\n        .select('id')\n        .eq('charity_id', profile.id);\n\n      if (idsError) {\n        Logger.error('Error fetching opportunity IDs', { error: idsError.message });\n        throw idsError;\n      }\n\n      // Ensure we have an array of IDs\n      const validOpportunityIds = Array.isArray(opportunityIds) && opportunityIds.length > 0\n        ? opportunityIds.map(opp => opp.id).filter(Boolean)\n        : [];\n\n      // Only proceed with the second query if we have IDs\n      if (validOpportunityIds.length > 0) {\n        const { data: applications, error: applicationsError } = await supabase\n          .from('volunteer_applications')\n          .select(`\n            id,\n            full_name,\n            opportunity:opportunity_id (\n              id,\n              title\n            )\n          `)\n          .eq('status', 'pending')\n          .in('opportunity_id', validOpportunityIds)\n          .order('created_at', { ascending: false });\n          \n        if (applicationsError) {\n          Logger.error('Error fetching volunteer applications', { error: applicationsError.message });\n          throw applicationsError;\n        }\n        \n        // Ensure applications is an array\n        const applicationsList = Array.isArray(applications) ? applications : [];\n        Logger.info('Applications data received', { count: applicationsList.length });\n        \n        setPendingApplications(applicationsList);\n      } else {\n        // Handle case where there are no opportunities\n        setPendingApplications([]);\n        Logger.info('No opportunities found for this charity, skipping applications fetch');\n      }\n      \n      // Fetch pending volunteer hours with error handling\n      Logger.info('Fetching volunteer hours');\n      const { data: pendingHoursData, error: hoursFetchError } = await supabase\n        .from('volunteer_hours')\n        .select(`\n          id,\n          volunteer_id,\n          hours,\n          date_performed,\n          description,\n          volunteer:volunteer_id (\n            id,\n            user_id\n          )\n        `)\n        .eq('charity_id', profile.id)\n        .eq('status', 'pending')\n        .order('created_at', { ascending: false });\n        \n      if (hoursFetchError) {\n        Logger.error('Error fetching volunteer hours', { error: hoursFetchError.message });\n        throw hoursFetchError;\n      }\n      \n      // Ensure pendingHoursData is an array\n      const pendingHoursList = Array.isArray(pendingHoursData) ? pendingHoursData : [];\n      Logger.info('Volunteer hours data received', { count: pendingHoursList.length });\n      \n      // Format volunteer hours with type checking\n      const formattedHours = pendingHoursList.map(hour => ({\n        id: hour?.id || '',\n        volunteer_id: hour?.volunteer_id || '',\n        volunteerName: hour?.volunteer?.id ? 'Volunteer' : 'Unknown Volunteer',\n        hours: hour?.hours ? Number(hour.hours) : 0,\n        date_performed: hour?.date_performed || new Date().toISOString(),\n        description: hour?.description || ''\n      }));\n      \n      setPendingHours(formattedHours);\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      const errorStack = err instanceof Error ? err.stack : '';\n      \n      Logger.error('Error fetching charity data:', { \n        error: errorMessage,\n        stack: errorStack,\n        state: {\n          profileId: profile?.id\n        }\n      });\n      \n      // Don't automatically retry - let user manually retry\n      setError('Failed to load charity data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleVerificationCreated = useCallback((hash: string) => {\n    Logger.info('Verification created with hash:', hash);\n    // Refresh data after verification\n    fetchCharityData();\n  }, []);\n\n  const handleRetry = useCallback(() => {\n    setError(null);\n    fetchCharityData();\n  }, []);\n\n  const handleTransactionsTab = useCallback(() => {\n    setActiveTab('transactions');\n  }, []);\n\n  const handleVolunteersTab = useCallback(() => {\n    setActiveTab('volunteers');\n  }, []);\n\n  const handleApplicationsTab = useCallback(() => {\n    setActiveTab('applications');\n  }, []);\n\n  const handleOpportunitiesTab = useCallback(() => {\n    setActiveTab('opportunities');\n  }, []);\n\n  const handleShowExportModal = useCallback(() => {\n    setShowExportModal(true);\n  }, []);\n\n  const handleSort = useCallback((key: 'date' | 'type' | 'status' | 'organization') => {\n    setSortConfig(prevConfig => ({\n      key,\n      direction: prevConfig.key === key && prevConfig.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  }, []);\n\n  // Individual sort handlers for better performance\n  const handleSortByDate = useCallback(() => handleSort('date'), [handleSort]);\n  const handleSortByType = useCallback(() => handleSort('type'), [handleSort]);\n  const handleSortByOrganization = useCallback(() => handleSort('organization'), [handleSort]);\n  const handleSortByStatus = useCallback(() => handleSort('status'), [handleSort]);\n\n  // Modal close handler\n  const handleCloseExportModal = useCallback(() => setShowExportModal(false), []);\n\n  const sortedTransactions = useCallback(() => {\n    if (!sortConfig.key) return transactions;\n\n    return [...transactions].sort((a, b) => {\n      let aValue: string | number;\n      let bValue: string | number;\n\n      switch (sortConfig.key) {\n        case 'date':\n          aValue = new Date(a.timestamp).getTime();\n          bValue = new Date(b.timestamp).getTime();\n          break;\n        case 'type':\n          aValue = a.purpose.toLowerCase();\n          bValue = b.purpose.toLowerCase();\n          break;\n        case 'status':\n          aValue = a.status.toLowerCase();\n          bValue = b.status.toLowerCase();\n          break;\n        case 'organization':\n          aValue = (a.metadata?.organization || a.metadata?.donor || 'Anonymous').toLowerCase();\n          bValue = (b.metadata?.organization || b.metadata?.donor || 'Anonymous').toLowerCase();\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [transactions, sortConfig]);\n\n  const getSortIcon = useCallback((columnKey: 'date' | 'type' | 'status' | 'organization') => {\n    if (sortConfig.key !== columnKey) {\n      return <ChevronUp className=\"h-4 w-4 text-gray-300\" />;\n    }\n    return sortConfig.direction === 'asc' \n      ? <ChevronUp className=\"h-4 w-4 text-gray-600\" />\n      : <ChevronDown className=\"h-4 w-4 text-gray-600\" />;\n  }, [sortConfig]);\n\n  if (!user) {\n    return <Navigate to=\"/login?type=charity\" />;\n  }\n\n  if (profileLoading || loading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"bg-red-50 p-4 rounded-md text-red-700\">\n          {error}\n          <Button \n            onClick={handleRetry}\n            variant=\"secondary\" \n            className=\"mt-4\"\n          >\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect donor users to donor portal\n  if (userType !== 'charity') {\n    return <Navigate to=\"/donor-portal\" />;\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">{t('charity.dashboard')}</h1>\n        <p className=\"mt-2 text-gray-600\">{t('charity.subtitle')}</p>\n      </div>\n\n      {/* Metrics Grid */}\n      <div className=\"grid gap-6 mb-8 md:grid-cols-4\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-indigo-100 text-indigo-600\">\n              <DollarSign className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.totalDonations')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                <CurrencyDisplay amount={charityStats.totalDonated} />\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-green-100 text-green-600\">\n              <Users className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('charity.activeVolunteers')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {charityStats.activeVolunteers}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-purple-100 text-purple-600\">\n              <Clock className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.volunteerHours')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {charityStats.volunteerHours}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-amber-100 text-amber-600\">\n              <Award className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.skillsEndorsed')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {charityStats.skillsEndorsed}\n              </p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"-mb-px flex space-x-8\">\n            <button\n              onClick={handleTransactionsTab}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'transactions'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {t('charity.transactions')}\n            </button>\n            <button\n              onClick={handleVolunteersTab}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'volunteers'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {t('charity.volunteers')}\n            </button>\n            <button\n              onClick={handleApplicationsTab}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'applications'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {t('charity.applications')}\n            </button>\n            <button\n              onClick={handleOpportunitiesTab}\n              className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                activeTab === 'opportunities'\n                  ? 'border-indigo-500 text-indigo-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {t('volunteer.opportunities')}\n            </button>\n          </nav>\n        </div>\n      </div>\n\n      {/* Transaction History */}\n      {activeTab === 'transactions' && (\n        <div className=\"bg-white rounded-lg shadow-md mb-8\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">{t('charity.transactions')}</h2>\n              <Button\n                onClick={handleShowExportModal}\n                variant=\"secondary\"\n                className=\"flex items-center\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {t('contributions.export')}\n              </Button>\n            </div>\n          </div>\n          <div className=\"overflow-x-auto\">\n            {transactions.length > 0 ? (\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead>\n                  <tr>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                      onClick={handleSortByDate}\n                    >\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{t('contributions.date')}</span>\n                        {getSortIcon('date')}\n                      </div>\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                      onClick={handleSortByType}\n                    >\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{t('contributions.type')}</span>\n                        {getSortIcon('type')}\n                      </div>\n                    </th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                      onClick={handleSortByOrganization}\n                    >\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{t('donor.volunteer', 'Donor/Volunteer')}</span>\n                        {getSortIcon('organization')}\n                      </div>\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{t('contributions.details')}</th>\n                    <th \n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                      onClick={handleSortByStatus}\n                    >\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{t('contributions.status')}</span>\n                        {getSortIcon('status')}\n                      </div>\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{t('contributions.verification')}</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200\">\n                  {sortedTransactions().map((transaction) => (\n                    <tr key={transaction.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatDate(transaction.timestamp, true)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {t(`contribution.type.${transaction.purpose.toLowerCase().replace(' ', '')}`, transaction.purpose)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {transaction.metadata?.organization || transaction.metadata?.donor || t('donor.anonymous', 'Anonymous')}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        <span>\n                          {transaction.amount} {transaction.cryptoType} (\n                          <CurrencyDisplay amount={transaction.fiatValue || 0} />)\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                          transaction.status === 'completed' \n                            ? 'bg-green-100 text-green-800'\n                            : transaction.status === 'pending'\n                            ? 'bg-yellow-100 text-yellow-800'\n                            : 'bg-red-100 text-red-800'\n                        }`}>\n                          {t(`status.${transaction.status}`, transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1))}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                        {transaction.hash ? (\n                          <a \n                            href={`https://moonscan.io/tx/${transaction.hash}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"text-indigo-600 hover:text-indigo-900 flex items-center\"\n                          >\n                            <span className=\"truncate max-w-[100px]\">\n                              {transaction.hash.substring(0, 10)}...\n                            </span>\n                            <ExternalLink className=\"h-3 w-3 ml-1\" />\n                          </a>\n                        ) : (\n                          t('common.notAvailable', 'N/A')\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                No transactions found.\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Volunteer Hours Verification */}\n      {activeTab === 'volunteers' && (\n        <div className=\"bg-white rounded-lg shadow-md mb-8\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">{t('volunteer.pendingHours', 'Pending Volunteer Hours')}</h2>\n              <Button\n                variant=\"secondary\"\n                className=\"flex items-center\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {t('contributions.export')}\n              </Button>\n            </div>\n          </div>\n          <div className=\"p-6 space-y-4\">\n            {pendingHours.length > 0 ? (\n              pendingHours.map(hours => (\n                <div key={hours.id} className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium text-gray-900\">{hours.volunteerName}</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        {hours.hours} {t('volunteer.hours')} {formatDate(hours.date_performed)}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        className=\"flex items-center\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        {t('volunteer.verify')}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        className=\"flex items-center\"\n                      >\n                        <X className=\"h-4 w-4 mr-2\" />\n                        {t('volunteer.reject')}\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  {hours.description && (\n                    <div className=\"mb-4\">\n                      <p className=\"text-sm text-gray-500 mb-1\">{t('volunteer.description')}</p>\n                      <p className=\"text-sm text-gray-700\">{hours.description}</p>\n                    </div>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                {t('volunteer.noPendingHours', 'No pending volunteer hours to verify.')}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Volunteer Applications */}\n      {activeTab === 'applications' && (\n        <div className=\"bg-white rounded-lg shadow-md mb-8\">\n          <div className=\"p-6 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">{t('volunteer.pendingApplications', 'Pending Applications')}</h2>\n          </div>\n          <div className=\"p-6 space-y-4\">\n            {pendingApplications.length > 0 ? (\n              pendingApplications.map(application => (\n                <div key={application.id} className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium text-gray-900\">{application.full_name}</h3>\n                      <p className=\"text-sm text-gray-500\">\n                        {t('volunteer.appliedFor')}: {application.opportunity?.title || 'Unknown Opportunity'}\n                      </p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        className=\"flex items-center\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        {t('volunteer.accept')}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        className=\"flex items-center\"\n                      >\n                        <X className=\"h-4 w-4 mr-2\" />\n                        {t('volunteer.reject')}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                {t('volunteer.noPendingApplications', 'No pending applications to review.')}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Volunteer Opportunities Management */}\n      {activeTab === 'opportunities' && (\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">{t('volunteer.opportunities', 'Volunteer Opportunities')}</h2>\n            <Link to=\"/charity-portal/create-opportunity\">\n              <Button className=\"flex items-center\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {t('volunteer.createNew', 'Create New')}\n              </Button>\n            </Link>\n          </div>\n          <div className=\"bg-white rounded-lg shadow-md\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">{t('volunteer.opportunities', 'Volunteer Opportunities')}</h2>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                {t('volunteer.noOpportunitiesYet', 'No opportunities created yet. Click \"Create New\" to get started.')}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Export Modal */}\n      {showExportModal && (\n        <DonationExportModal\n          donations={transactions}\n          onClose={handleCloseExportModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CharityPortal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/ComingSoon.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Send' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Send, Github, Bird, Disc as Discord } from 'lucide-react';\nimport { Logo } from '@/components/Logo';\nimport { Logger } from '@/utils/logger';\n\nconst ComingSoon: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim() || !email.includes('@')) {\n      setErrorMessage('Please enter a valid email address');\n      setStatus('error');\n      return;\n    }\n\n    setStatus('loading');\n    try {\n      // Call the MailChimp API endpoint\n      const response = await fetch('/api/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to subscribe');\n      }\n      \n      setStatus('success');\n      setEmail('');\n    } catch (err) {\n      Logger.error('Subscription error', { error: err });\n      setStatus('error');\n      setErrorMessage('Failed to join waitlist. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 -z-10\">\n        <div className=\"relative w-full h-full\">\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(79,70,229,0.1),transparent_50%)] animate-pulse\" />\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_80%_20%,rgba(167,139,250,0.1),transparent_50%)]\" />\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Logo */}\n        <div className=\"py-8 flex items-center justify-center\">\n          <Logo className=\"h-10 w-10\" />\n          <span className=\"ml-3 text-2xl font-bold text-gray-900\">Give Protocol</span>\n        </div>\n\n        {/* Hero Section */}\n        <main className=\"py-20 sm:py-24\">\n          <div className=\"text-center\">\n            <h1 className=\"text-6xl sm:text-8xl font-bold text-gray-900 mb-6\">\n              COMING SOON\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-12 max-w-3xl mx-auto\">\n              Join the future of philanthropy, with transparent, efficient and impactful social investment\n            </p>\n\n            {/* Email Form */}\n            <div className=\"max-w-md mx-auto\">\n              <form onSubmit={handleSubmit} className=\"relative\">\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email address\"\n                  className=\"w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                  disabled={status === 'loading' || status === 'success'}\n                />\n                <button\n                  type=\"submit\"\n                  disabled={status === 'loading' || status === 'success'}\n                  className={`absolute right-2 top-2 px-4 py-1 rounded-md transition-all ${\n                    status === 'loading' \n                      ? 'bg-gray-100 cursor-wait'\n                      : status === 'success'\n                      ? 'bg-green-500 text-white'\n                      : 'bg-indigo-600 text-white hover:bg-indigo-700'\n                  }`}\n                >\n                  Notify Me\n                </button>\n              </form>\n\n              {status === 'success' && (\n                <p className=\"mt-2 text-green-600\">\n                  Thanks for joining! We&apos;ll keep you updated.\n                </p>\n              )}\n              {status === 'error' && (\n                <p className=\"mt-2 text-red-600\">{errorMessage}</p>\n              )}\n            </div>\n\n            {/* Features Preview */}\n            <div className=\"mt-20 grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"p-6 bg-white/50 backdrop-blur-sm rounded-xl shadow-sm\">\n                <h3 className=\"text-lg font-semibold mb-2\">Transparent</h3>\n                <p className=\"text-gray-600\">Track your impact with blockchain-verified donations</p>\n              </div>\n              <div className=\"p-6 bg-white/50 backdrop-blur-sm rounded-xl shadow-sm\">\n                <h3 className=\"text-lg font-semibold mb-2\">Efficient</h3>\n                <p className=\"text-gray-600\">Smart contracts ensure funds reach their destination</p>\n              </div>\n              <div className=\"p-6 bg-white/50 backdrop-blur-sm rounded-xl shadow-sm\">\n                <h3 className=\"text-lg font-semibold mb-2\">Impactful</h3>\n                <p className=\"text-gray-600\">Maximize your giving through innovative DeFi strategies</p>\n              </div>\n            </div>\n          </div>\n        </main>\n\n        {/* Footer */}\n        <footer className=\"py-12\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"flex space-x-6\">\n              <a href=\"https://giveprotocol.bsky.social\" className=\"text-gray-400 hover:text-gray-600\">\n                <Bird className=\"h-6 w-6\" />\n              </a>\n              <a href=\"https://github.com/giveprotocol\" className=\"text-gray-400 hover:text-gray-600\">\n                <Github className=\"h-6 w-6\" />\n              </a>\n              <a href=\"https://discord.gg/giveprotocol\" className=\"text-gray-400 hover:text-gray-600\">\n                <Discord className=\"h-6 w-6\" />\n              </a>\n            </div>\n            <p className=\"text-sm text-gray-500\">\n              © {new Date().getFullYear()} Give Protocol. All rights reserved.\n            </p>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default ComingSoon;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/ContributionTracker.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Globe' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Globe, Search, Download, Filter } from 'lucide-react';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/Tabs';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Card } from '@/components/ui/Card';\nimport { DonationLeaderboard } from '@/components/contribution/DonationLeaderboard';\nimport { VolunteerLeaderboard } from '@/components/contribution/VolunteerLeaderboard';\nimport { GlobalStats } from '@/components/contribution/GlobalStats';\nimport { RegionFilter } from '@/components/contribution/RegionFilter';\nimport { TimeRangeFilter } from '@/components/contribution/TimeRangeFilter';\nimport { useWalletAlias } from '@/hooks/useWalletAlias';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { useToast } from '@/contexts/ToastContext';\nimport { Logger } from '@/utils/logger';\n\ntype TimeRange = 'all' | 'year' | 'month' | 'week';\ntype Region = 'all' | 'na' | 'eu' | 'asia' | 'africa' | 'sa' | 'oceania';\n\nexport const ContributionTracker: React.FC = () => {\n  const location = useLocation();\n  const [timeRange, setTimeRange] = useState<TimeRange>('all');\n  const [region, setRegion] = useState<Region>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showOptOut, setShowOptOut] = useState(false);\n  const [showAliasModal, setShowAliasModal] = useState(false);\n  const [newAlias, setNewAlias] = useState('');\n  const { alias, setWalletAlias } = useWalletAlias();\n  const { isConnected, address } = useWeb3();\n  const { showToast } = useToast();\n  const [activeTab, setActiveTab] = useState<'donations' | 'volunteer'>(\n    (location.state?.activeTab as 'donations' | 'volunteer') || 'donations'\n  );\n\n  useEffect(() => {\n    if (location.state?.activeTab) {\n      setActiveTab(location.state.activeTab);\n    }\n  }, [location.state]);\n\n  const handleExport = useCallback((format: 'csv' | 'pdf') => {\n    // Implement export functionality\n    Logger.info(`Exporting contributions as ${format}`, { format });\n  }, []);\n\n  const handleExportCsv = useCallback(() => handleExport('csv'), [handleExport]);\n  const handleExportPdf = useCallback(() => handleExport('pdf'), [handleExport]);\n  const handleShowAliasModal = useCallback(() => setShowAliasModal(true), []);\n  const handleHideAliasModal = useCallback(() => setShowAliasModal(false), []);\n  const handleChangeAlias = useCallback(() => {\n    setNewAlias(alias);\n    setShowAliasModal(true);\n  }, [alias]);\n\n  const handleSetAlias = async () => {\n    if (!isConnected || !address) {\n      showToast('error', 'Wallet not connected', 'Please connect your wallet to set an alias');\n      return;\n    }\n\n    if (!newAlias.trim()) {\n      showToast('error', 'Invalid alias', 'Please enter a valid alias');\n      return;\n    }\n\n    const success = await setWalletAlias(newAlias);\n    if (success) {\n      setNewAlias('');\n      setShowAliasModal(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Global Impact Rankings</h1>\n        <p className=\"mt-2 text-gray-600\">\n          Track and celebrate the collective impact of our community\n        </p>\n      </div>\n\n      {/* Global Stats */}\n      <GlobalStats />\n\n      {/* Filters */}\n      <div className=\"mb-8 bg-white p-6 rounded-lg shadow-md\">\n        <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center\">\n          <div className=\"flex-grow\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search contributors...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n          \n          <TimeRangeFilter value={timeRange} onChange={(value) => setTimeRange(value as TimeRange)} />\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"secondary\"\n              onClick={handleExportCsv}\n              className=\"flex items-center\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={handleExportPdf}\n              className=\"flex items-center\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export PDF\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"mt-4 flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <RegionFilter value={region} onChange={(value) => setRegion(value as Region)} />\n            \n            <label className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <input\n                type=\"checkbox\"\n                checked={showOptOut}\n                onChange={(e) => setShowOptOut(e.target.checked)}\n                className=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n              />\n              <span>Hide my contributions from rankings</span>\n            </label>\n          </div>\n          \n          {isConnected && (\n            <div>\n              {alias ? (\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-600\">Your alias: <span className=\"font-medium text-indigo-600\">{alias}</span></span>\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={handleChangeAlias}\n                  >\n                    Change\n                  </Button>\n                </div>\n              ) : (\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={handleShowAliasModal}\n                >\n                  Set Wallet Alias\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Alias Modal */}\n      {showAliasModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full\">\n            <div className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Set Wallet Alias</h2>\n              <p className=\"text-gray-600 mb-4\">\n                Your alias will be displayed on the contribution tracker instead of your wallet address.\n              </p>\n              <Input\n                label=\"Alias\"\n                value={newAlias}\n                onChange={(e) => setNewAlias(e.target.value)}\n                placeholder=\"Enter your preferred alias\"\n                className=\"mb-4\"\n              />\n              <div className=\"flex justify-end space-x-3\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={handleHideAliasModal}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSetAlias}\n                >\n                  Save Alias\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Rankings Tabs */}\n      <Tabs defaultValue={activeTab} value={activeTab} onValueChange={(value: string) => setActiveTab(value as 'donations' | 'volunteer')} className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"donations\">Donation Rankings</TabsTrigger>\n          <TabsTrigger value=\"volunteer\">Volunteer Rankings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"donations\">\n          <Card className=\"p-6\">\n            <DonationLeaderboard\n              timeRange={timeRange}\n              region={region}\n              searchTerm={searchTerm}\n            />\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"volunteer\">\n          <Card className=\"p-6\">\n            <VolunteerLeaderboard\n              timeRange={timeRange}\n              region={region}\n              searchTerm={searchTerm}\n              highlightSkill={location.state?.skill}\n              section={location.state?.section}\n            />\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ContributionTracker;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Documentation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/DonorPortal.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":13,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useProfile } from '@/hooks/useProfile';\nimport { useDonorData } from '@/hooks/useDonorData';\nimport { DonorStats } from '@/components/donor/DonorStats';\nimport { DonationHistory } from '@/components/donor/DonationHistory';\nimport { Transaction } from '@/types/contribution';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\n\nexport const DonorPortal: React.FC = () => {\n  const { user, userType } = useAuth();\n  const { profile, loading: profileLoading } = useProfile();\n  const { data, loading: dataLoading, error } = useDonorData();\n\n  // Convert donation data to Transaction format for the DonationHistory component\n  const formatDonationsAsTransactions = (): Transaction[] => {\n    if (!data?.donations) return [];\n    \n    return data.donations.map(donation => ({\n      id: donation.id,\n      hash: donation.id, // Using ID as hash for sample data\n      from: '0x1234567890123456789012345678901234567890', // Sample sender address\n      to: '0x0987654321098765432109876543210987654321', // Sample recipient address\n      amount: donation.amount,\n      cryptoType: 'GLMR', // Default to GLMR\n      fiatValue: donation.amount, // Using the same value for sample data\n      fee: donation.amount * 0.001, // Sample fee calculation\n      timestamp: donation.date,\n      status: 'completed',\n      purpose: 'Donation',\n      metadata: {\n        organization: donation.charity,\n        impactGrowth: donation.impactGrowth\n      }\n    }));\n  };\n\n  if (!user) {\n    return <Navigate to=\"/login?type=donor\" />;\n  }\n\n  if (profileLoading || dataLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"bg-red-50 p-4 rounded-md text-red-700\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect charity users to charity portal\n  if (userType === 'charity') {\n    return <Navigate to=\"/charity-portal\" />;\n  }\n\n  const transactions = formatDonationsAsTransactions();\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Donor Dashboard</h1>\n        <p className=\"mt-2 text-gray-600\">Welcome back!</p>\n      </div>\n\n      {data && (\n        <>\n          <DonorStats\n            totalDonated={data.totalDonated}\n            impactGrowth={data.impactGrowth}\n            charitiesSupported={data.charitiesSupported}\n          />\n          <div className=\"mt-8\">\n            <DonationHistory donations={transactions} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DonorPortal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/GiveDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":64,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":75},{"ruleId":"no-unused-vars","severity":1,"message":"'view' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'setView' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'setContributions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":137,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { DollarSign, Clock, Award, Download, Filter, Calendar, CheckCircle, ExternalLink, Settings, ChevronUp, ChevronDown } from 'lucide-react';\nimport { Card } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Transaction } from '@/types/contribution';\nimport { DonationExportModal } from '@/components/contribution/DonationExportModal';\nimport { formatDate } from '@/utils/date';\nimport { useTranslation } from '@/hooks/useTranslation';\nimport { CurrencyDisplay } from '@/components/CurrencyDisplay';\nimport { WalletAliasSettings } from '@/components/settings/WalletAliasSettings';\nimport { ScheduledDonations } from '@/components/donor/ScheduledDonations';\n\ntype View = 'select' | 'donor' | 'charity' | 'forgotPassword' | 'forgotUsername';\n\nexport const GiveDashboard: React.FC = () => {\n  const [view, setView] = useState<View>('select');\n  const { user, userType } = useAuth();\n  const { isConnected, connect } = useWeb3();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [selectedYear, setSelectedYear] = useState<string>('all');\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [showWalletSettings, setShowWalletSettings] = useState(false);\n  const [showScheduledDonations, setShowScheduledDonations] = useState(false);\n  const [sortConfig, setSortConfig] = useState<{\n    key: 'date' | 'type' | 'status' | 'organization' | null;\n    direction: 'asc' | 'desc';\n  }>({ key: null, direction: 'asc' });\n  const { t } = useTranslation();\n  \n  // Check if we should show wallet settings from location state\n  useEffect(() => {\n    if (location.state?.showWalletSettings) {\n      setShowWalletSettings(true);\n    }\n  }, [location.state]);\n  \n  // Sample data - replace with actual data fetching\n  const [contributions, setContributions] = useState<Transaction[]>([\n    {\n      id: '1',\n      hash: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',\n      from: '0x1234567890123456789012345678901234567890',\n      to: '0x0987654321098765432109876543210987654321',\n      amount: 0.5,\n      cryptoType: 'GLMR',\n      fiatValue: 500,\n      fee: 0.0001,\n      timestamp: '2024-03-15T10:30:00Z',\n      status: 'completed',\n      purpose: 'Donation',\n      metadata: {\n        organization: 'Global Water Foundation',\n        category: 'Water & Sanitation'\n      }\n    },\n    {\n      id: '2',\n      hash: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890',\n      from: '0x1234567890123456789012345678901234567890',\n      to: '0x2345678901234567890123456789012345678901',\n      amount: 0.3,\n      cryptoType: 'GLMR',\n      fiatValue: 300,\n      fee: 0.0001,\n      timestamp: '2023-12-20T14:45:00Z',\n      status: 'completed',\n      purpose: 'Donation',\n      metadata: {\n        organization: 'Climate Action Now',\n        category: 'Environment'\n      }\n    },\n    {\n      id: '3',\n      hash: '0x7890abcdef1234567890abcdef1234567890abcdef1234567890abcdef123456',\n      from: '0x1234567890123456789012345678901234567890',\n      to: '0x3456789012345678901234567890123456789012',\n      amount: 1.2,\n      cryptoType: 'GLMR',\n      fiatValue: 1200,\n      fee: 0.0002,\n      timestamp: '2024-03-14T09:15:00Z',\n      status: 'completed',\n      purpose: 'Donation',\n      metadata: {\n        organization: 'Education for All',\n        category: 'Education'\n      }\n    },\n    // Volunteer contribution examples\n    {\n      id: '4',\n      hash: '0xef89012345678901234567890123456789012345678901234567890123456789',\n      from: '0x1234567890123456789012345678901234567890',\n      to: '0x4567890123456789012345678901234567890123',\n      amount: 0,\n      cryptoType: '',\n      fiatValue: 0,\n      fee: 0,\n      timestamp: '2024-04-05T13:20:00Z',\n      status: 'completed',\n      purpose: 'Volunteer Application',\n      metadata: {\n        organization: 'Education for All',\n        opportunity: 'Web Development for Education Platform',\n        verificationHash: '0xef89012345678901234567890123456789012345678901234567890123456789',\n        blockNumber: 1234567\n      }\n    },\n    {\n      id: '5',\n      hash: '0x23456789012345678901234567890123456789012345678901234567890123ef',\n      from: '0x1234567890123456789012345678901234567890',\n      to: '0x5678901234567890123456789012345678901234',\n      amount: 0,\n      cryptoType: '',\n      fiatValue: 0,\n      fee: 0,\n      timestamp: '2024-04-10T15:45:00Z',\n      status: 'completed',\n      purpose: 'Volunteer Hours',\n      metadata: {\n        organization: 'Global Water Foundation',\n        hours: 8,\n        description: 'Website development for donation portal',\n        verificationHash: '0x23456789012345678901234567890123456789012345678901234567890123ef',\n        blockNumber: 1235678\n      }\n    }\n  ]);\n\n  const isActive = (path: string) => \n    location.pathname === path ? 'bg-primary-100 text-primary-900' : 'text-gray-700 hover:bg-primary-50';\n\n  const handleSkillClick = (skill: string) => {\n    navigate('/contributions', { \n      state: { \n        activeTab: 'volunteer',\n        section: 'endorsements',\n        skill \n      }\n    });\n  };\n\n  const handleSort = useCallback((key: 'date' | 'type' | 'status' | 'organization') => {\n    setSortConfig(prevConfig => ({\n      key,\n      direction: prevConfig.key === key && prevConfig.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  }, []);\n\n  const getSortIcon = useCallback((key: 'date' | 'type' | 'status' | 'organization') => {\n    if (sortConfig.key !== key) {\n      return <ChevronUp className=\"h-4 w-4 text-gray-400\" />;\n    }\n    return sortConfig.direction === 'asc' \n      ? <ChevronUp className=\"h-4 w-4 text-gray-600\" />\n      : <ChevronDown className=\"h-4 w-4 text-gray-600\" />;\n  }, [sortConfig]);\n\n  const filteredContributions = contributions.filter(contribution => {\n    const contributionDate = new Date(contribution.timestamp);\n    const matchesYear = selectedYear === 'all' || \n      contributionDate.getFullYear().toString() === selectedYear;\n    const matchesType = selectedType === 'all' || \n      contribution.purpose === selectedType;\n    return matchesYear && matchesType;\n  }).sort((a, b) => {\n    if (!sortConfig.key) return 0;\n\n    let aValue: string | number;\n    let bValue: string | number;\n\n    switch (sortConfig.key) {\n      case 'date':\n        aValue = new Date(a.timestamp).getTime();\n        bValue = new Date(b.timestamp).getTime();\n        break;\n      case 'type':\n        aValue = a.purpose.toLowerCase();\n        bValue = b.purpose.toLowerCase();\n        break;\n      case 'status':\n        aValue = a.status.toLowerCase();\n        bValue = b.status.toLowerCase();\n        break;\n      case 'organization':\n        aValue = (a.metadata?.organization || '').toLowerCase();\n        bValue = (b.metadata?.organization || '').toLowerCase();\n        break;\n      default:\n        return 0;\n    }\n\n    if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  const years = ['all', ...new Set(contributions.map(c => \n    new Date(c.timestamp).getFullYear().toString()\n  ))].sort((a, b) => b.localeCompare(a));\n\n  if (!user) {\n    return <Navigate to=\"/login?type=donor\" />;\n  }\n\n  // Redirect charity users to charity portal\n  if (userType === 'charity') {\n    return <Navigate to=\"/charity-portal\" />;\n  }\n\n  // Show blank page for admin users - they should use /admin instead\n  if (userType === 'admin') {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Admin Dashboard</h2>\n          <p className=\"text-gray-600 mb-6\">\n            Please use the admin panel to manage the platform.\n          </p>\n          <Button onClick={() => window.location.href = `${window.location.origin}/admin`}>\n            Go to Admin Panel\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isConnected) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Connect Your Wallet</h2>\n          <p className=\"text-gray-600 mb-6\">\n            To view your dashboard and make donations, please connect your wallet.\n          </p>\n          <Button onClick={connect}>Connect Wallet</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">{t('dashboard.title')}</h1>\n            <p className=\"mt-2 text-gray-600\">{t('dashboard.subtitle')}</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowScheduledDonations(!showScheduledDonations)}\n              className=\"flex items-center\"\n            >\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              {showScheduledDonations ? 'Hide' : 'View'} Monthly Donations\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowWalletSettings(!showWalletSettings)}\n              className=\"flex items-center\"\n            >\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Wallet Settings\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {showWalletSettings && (\n        <div className=\"mb-8\">\n          <WalletAliasSettings />\n        </div>\n      )}\n\n      {showScheduledDonations && (\n        <div className=\"mb-8\">\n          <ScheduledDonations />\n        </div>\n      )}\n\n      {/* Metrics Grid */}\n      <div className=\"grid gap-6 mb-8 md:grid-cols-3\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-indigo-100 text-indigo-600\">\n              <DollarSign className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.totalDonations')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                <CurrencyDisplay amount={2450} />\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-green-100 text-green-600\">\n              <Clock className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.volunteerHours')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">48</p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center\">\n            <div className=\"p-3 rounded-full bg-purple-100 text-purple-600\">\n              <Award className=\"h-6 w-6\" />\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">{t('dashboard.skillsEndorsed')}</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">12</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Contributions */}\n      <div className=\"bg-white rounded-lg shadow-md mb-8\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">{t('dashboard.contributions')}</h2>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"h-5 w-5 text-gray-400\" />\n                <select\n                  value={selectedYear}\n                  onChange={(e) => setSelectedYear(e.target.value)}\n                  className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n                  aria-label=\"Filter by year\"\n                >\n                  {years.map(year => (\n                    <option key={year} value={year}>\n                      {year === 'all' ? t('filter.allYears', 'All Years') : year}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5 text-gray-400\" />\n                <select\n                  value={selectedType}\n                  onChange={(e) => setSelectedType(e.target.value)}\n                  className=\"rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\n                  aria-label=\"Filter by type\"\n                >\n                  <option value=\"all\">{t('filter.allTypes', 'All Types')}</option>\n                  <option value=\"Donation\">{t('filter.donations', 'Donations')}</option>\n                  <option value=\"Volunteer Application\">{t('filter.volunteerApplications', 'Volunteer Applications')}</option>\n                  <option value=\"Volunteer Hours\">{t('filter.volunteerHours', 'Volunteer Hours')}</option>\n                </select>\n              </div>\n              <Button\n                onClick={() => setShowExportModal(true)}\n                variant=\"secondary\"\n                className=\"flex items-center\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                {t('contributions.export')}\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                  onClick={() => handleSort('date')}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{t('contributions.date')}</span>\n                    {getSortIcon('date')}\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                  onClick={() => handleSort('type')}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{t('contributions.type')}</span>\n                    {getSortIcon('type')}\n                  </div>\n                </th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                  onClick={() => handleSort('organization')}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{t('contributions.organization')}</span>\n                    {getSortIcon('organization')}\n                  </div>\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{t('contributions.details')}</th>\n                <th \n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 select-none\"\n                  onClick={() => handleSort('status')}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{t('contributions.status')}</span>\n                    {getSortIcon('status')}\n                  </div>\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">{t('contributions.verification')}</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {filteredContributions.map((contribution) => (\n                <tr key={contribution.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(contribution.timestamp, true)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {t(`contribution.type.${contribution.purpose.toLowerCase().replace(' ', '')}`, contribution.purpose)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {contribution.metadata?.organization || t('common.unknown', 'Unknown')}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {contribution.purpose === 'Donation' ? (\n                      <span>\n                        {contribution.amount} {contribution.cryptoType} (\n                        <CurrencyDisplay amount={contribution.fiatValue || 0} />)\n                      </span>\n                    ) : contribution.purpose === 'Volunteer Hours' ? (\n                      <span>{contribution.metadata?.hours} {t('volunteer.hours')} - {contribution.metadata?.description}</span>\n                    ) : (\n                      <span>{contribution.metadata?.opportunity}</span>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                      contribution.status === 'completed' \n                        ? 'bg-green-100 text-green-800'\n                        : contribution.status === 'pending'\n                        ? 'bg-yellow-100 text-yellow-800'\n                        : 'bg-red-100 text-red-800'\n                    }`}>\n                      {t(`status.${contribution.status}`, contribution.status.charAt(0).toUpperCase() + contribution.status.slice(1))}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {contribution.hash || contribution.metadata?.verificationHash ? (\n                      <a \n                        href={`https://moonscan.io/tx/${contribution.hash || contribution.metadata?.verificationHash}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-indigo-600 hover:text-indigo-900 flex items-center\"\n                      >\n                        <span className=\"truncate max-w-[100px]\">\n                          {(contribution.hash || contribution.metadata?.verificationHash || '').substring(0, 10)}...\n                        </span>\n                        <ExternalLink className=\"h-3 w-3 ml-1\" />\n                      </a>\n                    ) : (\n                      t('common.notAvailable', 'N/A')\n                    )}\n                    {contribution.metadata?.blockNumber && (\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {t('blockchain.block', 'Block')} #{contribution.metadata.blockNumber}\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Skills & Endorsements */}\n      <div className=\"bg-white rounded-lg shadow-md\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">{t('skills.endorsements', 'Skills & Endorsements')}</h2>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {[\n              { skill: 'Web Development', endorsements: 5 },\n              { skill: 'Project Management', endorsements: 3 },\n              { skill: 'Event Planning', endorsements: 4 }\n            ].map((item) => (\n              <button\n                key={item.skill}\n                onClick={() => handleSkillClick(item.skill)}\n                className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                <div>\n                  <h3 className=\"font-medium text-gray-900\">{item.skill}</h3>\n                  <p className=\"text-sm text-gray-500\">{item.endorsements} {t('skills.endorsements', 'endorsements')}</p>\n                </div>\n                <Award className=\"h-5 w-5 text-indigo-600\" />\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Export Modal */}\n      {showExportModal && (\n        <DonationExportModal\n          donations={contributions}\n          onClose={() => setShowExportModal(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GiveDashboard;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Governance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Home.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Legal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Login.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'view' is defined but never used. Allowed unused args must match /^_/u.","line":136,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, Navigate, useLocation, useSearchParams } from 'react-router-dom';\nimport { Building2, Users } from 'lucide-react';\nimport { DonorLogin } from '../components/auth/DonorLogin';\nimport { CharityLogin } from '../components/auth/CharityLogin';\nimport { ForgotPassword } from '../components/auth/ForgotPassword';\nimport { ForgotUsername } from '../components/auth/ForgotUsername';\nimport { Button } from '../components/ui/Button';\nimport { Logo } from '../components/Logo';\nimport { useAuth } from '@/contexts/AuthContext';\n\ntype View = 'select' | 'donor' | 'charity' | 'forgotPassword' | 'forgotUsername';\n\nconst Login: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const typeParam = searchParams.get('type');\n  const [view, setView] = useState<View>(typeParam === 'charity' ? 'charity' : typeParam === 'donor' ? 'donor' : 'select');\n  const { user, userType } = useAuth();\n  const location = useLocation();\n\n  // Get the intended destination from location state, or default to dashboard\n  const from = location.state?.from?.pathname || (userType === 'charity' ? '/charity-portal' : '/give-dashboard');\n\n  // Set view based on URL parameter on mount and when it changes\n  useEffect(() => {\n    if (typeParam === 'charity') {\n      setView('charity');\n    } else if (typeParam === 'donor') {\n      setView('donor');\n    }\n  }, [typeParam]);\n\n  // Redirect if already logged in\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  const renderView = () => {\n    switch (view) {\n      case 'select':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-center text-gray-900\">Choose Account Type</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button\n                onClick={() => setView('donor')}\n                variant=\"secondary\"\n                className=\"p-6 h-auto flex flex-col items-center space-y-2\"\n              >\n                <Users className=\"h-8 w-8\" />\n                <span className=\"text-lg font-medium\">Donor Login</span>\n                <span className=\"text-sm text-gray-500\">For donors and volunteers</span>\n              </Button>\n              \n              <Button\n                onClick={() => setView('charity')}\n                variant=\"secondary\"\n                className=\"p-6 h-auto flex flex-col items-center space-y-2\"\n              >\n                <Building2 className=\"h-8 w-8\" />\n                <span className=\"text-lg font-medium\">Charity Login</span>\n                <span className=\"text-sm text-gray-500\">For registered charities</span>\n              </Button>\n            </div>\n            \n            <div className=\"text-center space-y-2 mt-6\">\n              <p className=\"text-sm text-gray-600\">Don&apos;t have an account?</p>\n              <Link\n                to=\"/register\"\n                className=\"text-sm text-indigo-600 hover:text-indigo-500 font-medium\"\n              >\n                Create new account\n              </Link>\n            </div>\n          </div>\n        );\n      case 'forgotPassword':\n        return <ForgotPassword onBack={() => setView('select')} />;\n      case 'forgotUsername':\n        return <ForgotUsername onBack={() => setView('select')} />;\n      case 'donor':\n        return (\n          <>\n            <div className=\"mb-6\">\n              <button\n                onClick={() => setView('select')}\n                className=\"text-sm text-gray-600 hover:text-gray-900\"\n              >\n                ← Back to selection\n              </button>\n              <h2 className=\"mt-4 text-2xl font-semibold text-center\">Donor Portal Login</h2>\n              <p className=\"text-center text-sm text-gray-500 mt-1\">\n                Access your donor dashboard and volunteer opportunities\n              </p>\n            </div>\n            <DonorLogin />\n            <LoginHelpers setView={setView} />\n          </>\n        );\n      case 'charity':\n        return (\n          <>\n            <div className=\"mb-6\">\n              <button\n                onClick={() => setView('select')}\n                className=\"text-sm text-gray-600 hover:text-gray-900\"\n              >\n                ← Back to selection\n              </button>\n              <h2 className=\"mt-4 text-2xl font-semibold text-center\">Charity Portal Login</h2>\n              <p className=\"text-center text-sm text-gray-500 mt-1\">\n                Manage your charity profile and donations\n              </p>\n            </div>\n            <CharityLogin />\n            <LoginHelpers setView={setView} />\n          </>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-4rem)] flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-md\">\n        <div className=\"flex justify-center mb-8\">\n          <Link to=\"/\" className=\"flex items-center\">\n            <Logo className=\"h-12 w-12\" />\n          </Link>\n        </div>\n        {renderView()}\n      </div>\n    </div>\n  );\n};\n\nconst LoginHelpers: React.FC<{ setView: (view: View) => void }> = ({ setView }) => (\n  <div className=\"mt-6 space-y-4\">\n    <div className=\"relative\">\n      <div className=\"absolute inset-0 flex items-center\">\n        <div className=\"w-full border-t border-gray-200\" />\n      </div>\n      <div className=\"relative flex justify-center text-sm\">\n        <span className=\"px-2 bg-white text-gray-500\">Need help?</span>\n      </div>\n    </div>\n    \n    <div className=\"grid grid-cols-2 gap-4\">\n      <button\n        onClick={() => setView('forgotUsername')}\n        className=\"text-sm text-indigo-600 hover:text-indigo-500\"\n      >\n        Forgot username?\n      </button>\n      <button\n        onClick={() => setView('forgotPassword')}\n        className=\"text-sm text-indigo-600 hover:text-indigo-500\"\n      >\n        Forgot password?\n      </button>\n    </div>\n\n    <div className=\"text-center pt-4 border-t border-gray-200\">\n      <p className=\"text-sm text-gray-600\">Don&apos;t have an account?</p>\n      <Link\n        to=\"/register\"\n        className=\"text-sm text-indigo-600 hover:text-indigo-500 font-medium\"\n      >\n        Create new account\n      </Link>\n    </div>\n  </div>\n);\n\nexport default Login;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/PortfolioFundDetail.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CharityCard } from '@/components/charity/CharityCard';\nimport { DonationButton } from '@/components/web3/donation/DonationButton';\nimport { formatCurrency } from '@/utils/money';\n\n// Sample data - replace with actual API calls\nconst SAMPLE_PORTFOLIO = {\n  id: '1',\n  name: 'Environmental Impact Fund',\n  description: 'Supporting climate action and conservation projects across multiple organizations focused on environmental conservation, renewable energy, and sustainable practices.',\n  category: 'Environmental',\n  totalDonated: 1000000,\n  image: 'https://images.unsplash.com/photo-1498925008800-019c7d59d903?auto=format&fit=crop&w=800'\n};\n\nconst SAMPLE_CHARITIES = [\n  {\n    id: '1',\n    name: 'Ocean Conservation Alliance',\n    description: 'Protecting marine ecosystems and promoting sustainable ocean practices',\n    category: 'Environmental',\n    image: 'https://images.unsplash.com/photo-1583212292454-1fe6229603b7?auto=format&fit=crop&w=800',\n    verified: true,\n    country: 'United States',\n    causes: []\n  },\n  {\n    id: '2',\n    name: 'Rainforest Protection Initiative',\n    description: 'Preserving rainforests and supporting indigenous communities',\n    category: 'Environmental',\n    image: 'https://images.unsplash.com/photo-1516026672322-bc52d61a55d5?auto=format&fit=crop&w=800',\n    verified: true,\n    country: 'Brazil',\n    causes: []\n  },\n  {\n    id: '3',\n    name: 'Clean Energy Foundation',\n    description: 'Accelerating the transition to renewable energy sources',\n    category: 'Environmental',\n    image: 'https://images.unsplash.com/photo-1509391366360-2e959784a276?auto=format&fit=crop&w=800',\n    verified: true,\n    country: 'Germany',\n    causes: []\n  },\n  {\n    id: '4',\n    name: 'Wildlife Conservation Trust',\n    description: 'Protecting endangered species and their habitats',\n    category: 'Environmental',\n    image: 'https://images.unsplash.com/photo-1474511320723-9a56873867b5?auto=format&fit=crop&w=800',\n    verified: true,\n    country: 'Kenya',\n    causes: []\n  },\n  {\n    id: '5',\n    name: 'Sustainable Agriculture Project',\n    description: 'Promoting eco-friendly farming practices and food security',\n    category: 'Environmental',\n    image: 'https://images.unsplash.com/photo-1495107334309-fcf20504a5ab?auto=format&fit=crop&w=800',\n    verified: true,\n    country: 'India',\n    causes: []\n  }\n];\n\nconst PortfolioFundDetail: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  \n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"relative h-64 rounded-xl overflow-hidden mb-6\">\n          <img\n            src={SAMPLE_PORTFOLIO.image}\n            alt={SAMPLE_PORTFOLIO.name}\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-black bg-opacity-40\" />\n          <div className=\"absolute bottom-0 left-0 right-0 p-6 text-white\">\n            <h1 className=\"text-3xl font-bold mb-2\">{SAMPLE_PORTFOLIO.name}</h1>\n            <p className=\"text-lg opacity-90\">{SAMPLE_PORTFOLIO.description}</p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <p className=\"text-sm text-gray-500\">Total Donated</p>\n            <p className=\"text-2xl font-bold text-gray-900\">\n              {formatCurrency(SAMPLE_PORTFOLIO.totalDonated)}\n            </p>\n          </div>\n          <div className=\"w-1/2\">\n            <DonationButton\n              charityName={SAMPLE_PORTFOLIO.name}\n              charityAddress={SAMPLE_PORTFOLIO.id}\n              buttonText=\"Donate to Fund\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">\n          Supported Organizations\n        </h2>\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {SAMPLE_CHARITIES.map((charity) => (\n            <CharityCard key={charity.id} charity={charity} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PortfolioFundDetail;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Privacy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/SentryTest.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'nonExistentFunction' is not defined.","line":92,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/Button\";\nimport { Logger } from \"@/utils/logger\";\nimport { captureCustomEvent } from \"@/lib/sentry\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function SentryTest() {\n  const [testResults, setTestResults] = useState<string[]>([]);\n  const { user } = useAuth();\n\n  const addResult = (result: string) => {\n    setTestResults((prev) => [\n      ...prev,\n      `${new Date().toLocaleTimeString()}: ${result}`,\n    ]);\n  };\n\n  const testJavaScriptError = () => {\n    try {\n      addResult(\"Throwing JavaScript error...\");\n      throw new Error(\n        \"Test JavaScript Error - This is a test error from Sentry integration\",\n      );\n    } catch (error) {\n      addResult(\"Error thrown and should be captured by Sentry\");\n      throw error; // Re-throw to let Sentry catch it\n    }\n  };\n\n  const testLoggerInfo = () => {\n    addResult(\"Sending info log...\");\n    Logger.info(\"Test Info Log\", {\n      testType: \"manual\",\n      timestamp: new Date().toISOString(),\n      user: user?.email,\n    });\n    addResult(\"Info log sent to Logger (and Sentry in production)\");\n  };\n\n  const testLoggerWarning = () => {\n    addResult(\"Sending warning log...\");\n    Logger.warn(\"Test Warning Log\", {\n      testType: \"manual\",\n      warningLevel: \"medium\",\n      details: \"This is a test warning\",\n    });\n    addResult(\"Warning log sent to Logger (and Sentry in production)\");\n  };\n\n  const testLoggerError = () => {\n    addResult(\"Sending error log...\");\n    Logger.error(\"Test Error Log\", {\n      error: new Error(\"Test error object\"),\n      severity: \"high\",\n      context: \"SentryTest component\",\n    });\n    addResult(\"Error log sent to Logger (and Sentry in production)\");\n  };\n\n  const testCustomEvent = () => {\n    addResult(\"Sending custom event...\");\n    captureCustomEvent(\"test_custom_event\", {\n      action: \"button_click\",\n      component: \"SentryTest\",\n      timestamp: new Date().toISOString(),\n    });\n    addResult(\"Custom event sent directly to Sentry (in production)\");\n  };\n\n  const testAsyncError = async () => {\n    addResult(\"Triggering async error...\");\n    setTimeout(() => {\n      throw new Error(\"Test Async Error - Delayed error after 2 seconds\");\n    }, 2000);\n    addResult(\"Async error will be thrown in 2 seconds...\");\n  };\n\n  const testNetworkError = async () => {\n    addResult(\"Triggering network error...\");\n    try {\n      await fetch(\"https://nonexistent-api-endpoint.example.com/test\");\n    } catch (error) {\n      addResult(\"Network error occurred and should be captured\");\n      Logger.error(\"Network request failed\", { error });\n    }\n  };\n\n  const testReferenceError = () => {\n    addResult(\"Triggering reference error...\");\n    // @ts-ignore - Intentionally causing error\n    // eslint-disable-next-line no-undef\n    nonExistentFunction(); // This will cause a ReferenceError\n  };\n\n  const clearResults = () => {\n    setTestResults([]);\n    addResult(\"Test results cleared\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-6\">\n          Sentry Integration Test Page\n        </h1>\n\n        <div className=\"bg-yellow-50 border border-yellow-200 p-4 mb-6 rounded-lg\">\n          <p className=\"text-sm text-yellow-800\">\n            <strong>Note:</strong> Sentry is only active in production by\n            default. To test in development, temporarily modify{\" \"}\n            <code>src/lib/sentry.ts</code> line 6: change{\" \"}\n            <code>if (!import.meta.env.PROD)</code> to <code>if (false)</code>\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Test Actions</h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button onClick={testJavaScriptError} variant=\"danger\">\n              Throw JavaScript Error\n            </Button>\n            <Button onClick={testLoggerInfo} variant=\"secondary\">\n              Test Logger Info\n            </Button>\n            <Button onClick={testLoggerWarning} variant=\"secondary\">\n              Test Logger Warning\n            </Button>\n            <Button onClick={testLoggerError} variant=\"danger\">\n              Test Logger Error\n            </Button>\n            <Button onClick={testCustomEvent} variant=\"primary\">\n              Send Custom Event\n            </Button>\n            <Button onClick={testAsyncError} variant=\"danger\">\n              Trigger Async Error\n            </Button>\n            <Button onClick={testNetworkError} variant=\"secondary\">\n              Trigger Network Error\n            </Button>\n            <Button onClick={testReferenceError} variant=\"danger\">\n              Trigger Reference Error\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">Test Results</h2>\n            <Button onClick={clearResults} size=\"sm\" variant=\"secondary\">\n              Clear Results\n            </Button>\n          </div>\n          <div className=\"bg-gray-50 rounded p-4 min-h-[200px]\">\n            {testResults.length === 0 ? (\n              <p className=\"text-gray-500\">\n                No test results yet. Click a button above to test.\n              </p>\n            ) : (\n              <ul className=\"space-y-2\">\n                {/* skipcq: JS-0437 - Test results are append-only log entries, index is appropriate */}\n                {testResults.map((result, index) => (\n                  <li key={index} className=\"text-sm font-mono\">\n                    {result}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n\n        <div className=\"mt-6 bg-blue-50 border border-blue-200 p-4 rounded-lg\">\n          <h3 className=\"font-semibold mb-2\">How to Verify in Sentry:</h3>\n          <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n            <li>Go to your Sentry dashboard at sentry.io</li>\n            <li>Navigate to Issues to see captured errors</li>\n            <li>Check the Events tab for custom events and logs</li>\n            <li>Look for user context (if logged in)</li>\n            <li>Verify error details, stack traces, and metadata</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/VolunteerOpportunities.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Search, Filter, Award, Clock, Users, Globe } from 'lucide-react';\nimport { Card } from '../components/ui/Card';\nimport { ApplicationForm } from '../components/volunteer/ApplicationForm';\nimport { ConsentForm } from '../components/volunteer/ConsentForm';\nimport { useTranslation } from '@/hooks/useTranslation';\nimport { WorkLanguage } from '@/types/volunteer';\nimport { useToast } from '@/contexts/ToastContext';\n\ninterface Opportunity {\n  id: number;\n  title: string;\n  organization: string;\n  description: string;\n  skills: string[];\n  commitment: string;\n  location: string;\n  type: 'onsite' | 'remote' | 'hybrid';\n  workLanguage: WorkLanguage;\n  image: string;\n}\n\nconst SAMPLE_OPPORTUNITIES: Opportunity[] = [\n  {\n    id: 1,\n    title: \"Web Development for Education Platform\",\n    organization: \"Global Education Initiative\",\n    description: \"Help build an educational platform for underprivileged students. Looking for React and Node.js developers.\",\n    skills: [\"React\", \"Node.js\", \"TypeScript\"],\n    commitment: \"5-10 hours/week\",\n    location: \"Remote\",\n    type: \"remote\",\n    workLanguage: WorkLanguage.ENGLISH,\n    image: \"https://images.unsplash.com/photo-1517694712202-14dd9538aa97?auto=format&fit=crop&w=800\"\n  },\n  {\n    id: 2,\n    title: \"Environmental Data Analysis\",\n    organization: \"EcoWatch Foundation\",\n    description: \"Analyze environmental data to help track climate change impact. Need experience with data analysis and visualization.\",\n    skills: [\"Python\", \"Data Analysis\", \"Visualization\"],\n    commitment: \"8 hours/week\",\n    location: \"Hybrid - New York\",\n    type: \"hybrid\",\n    workLanguage: WorkLanguage.ENGLISH,\n    image: \"https://images.unsplash.com/photo-1527474305487-b87b222841cc?auto=format&fit=crop&w=800\"\n  },\n  {\n    id: 3,\n    title: \"Community Health App Development\",\n    organization: \"HealthBridge NGO\",\n    description: \"Create a mobile app for community health workers. Seeking mobile developers with React Native experience.\",\n    skills: [\"React Native\", \"Mobile Development\"],\n    commitment: \"15 hours/week\",\n    location: \"Remote\",\n    type: \"remote\",\n    workLanguage: WorkLanguage.SPANISH,\n    image: \"https://images.unsplash.com/photo-1576091160399-112ba8d25d1d?auto=format&fit=crop&w=800\"\n  },\n  {\n    id: 4,\n    title: \"Translation Services for Medical Documents\",\n    organization: \"Doctors Without Borders\",\n    description: \"Help translate medical documents and patient information. Fluency in both English and Spanish required.\",\n    skills: [\"Translation\", \"Medical Terminology\", \"Spanish\"],\n    commitment: \"10 hours/week\",\n    location: \"Remote\",\n    type: \"remote\",\n    workLanguage: WorkLanguage.SPANISH,\n    image: \"https://images.unsplash.com/photo-1532938911079-1b06ac7ceec7?auto=format&fit=crop&w=800\"\n  },\n  {\n    id: 5,\n    title: \"Disaster Relief Coordination\",\n    organization: \"Global Relief Initiative\",\n    description: \"Assist in coordinating disaster relief efforts. German language skills needed for communication with local teams.\",\n    skills: [\"Project Management\", \"Coordination\", \"German\"],\n    commitment: \"20 hours/week\",\n    location: \"Onsite - Berlin\",\n    type: \"onsite\",\n    workLanguage: WorkLanguage.GERMAN,\n    image: \"https://images.unsplash.com/photo-1469571486292-b53601021a68?auto=format&fit=crop&w=800\"\n  },\n  {\n    id: 6,\n    title: \"Educational Content Creation in Japanese\",\n    organization: \"Global Learning Foundation\",\n    description: \"Create educational content for children in Japanese. Teaching experience preferred.\",\n    skills: [\"Content Creation\", \"Education\", \"Japanese\"],\n    commitment: \"8 hours/week\",\n    location: \"Remote\",\n    type: \"remote\",\n    workLanguage: WorkLanguage.JAPANESE,\n    image: \"https://images.unsplash.com/photo-1503676260728-1c00da094a0b?auto=format&fit=crop&w=800\"\n  }\n];\n\nconst SKILLS = [\"React\", \"Node.js\", \"Python\", \"Data Analysis\", \"Mobile Development\", \"UI/UX\", \"Project Management\", \"Translation\", \"Content Creation\", \"Japanese\", \"Spanish\", \"German\"];\nconst TYPES = [\"remote\", \"onsite\", \"hybrid\"];\nconst LANGUAGES = Object.values(WorkLanguage);\n\nconst VolunteerOpportunities: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSkill, setSelectedSkill] = useState('');\n  const [selectedType, setSelectedType] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [selectedOpportunity, setSelectedOpportunity] = useState<Opportunity | null>(null);\n  const [showConsentForm, setShowConsentForm] = useState(false);\n  const [showApplicationForm, setShowApplicationForm] = useState(false);\n  const { t } = useTranslation();\n  const { showToast } = useToast();\n\n  const filteredOpportunities = SAMPLE_OPPORTUNITIES.filter(opportunity => {\n    const matchesSearch = \n      opportunity.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      opportunity.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSkill = !selectedSkill || opportunity.skills.includes(selectedSkill);\n    const matchesType = !selectedType || opportunity.type === selectedType;\n    const matchesLanguage = !selectedLanguage || opportunity.workLanguage === selectedLanguage;\n    \n    return matchesSearch && matchesSkill && matchesType && matchesLanguage;\n  });\n\n  const handleApply = useCallback((opportunity: Opportunity) => {\n    setSelectedOpportunity(opportunity);\n    setShowConsentForm(true);\n  }, []);\n\n  const createApplyHandler = useCallback((opportunity: Opportunity) => {\n    return () => handleApply(opportunity);\n  }, [handleApply]);\n\n  const handleConsentAccept = () => {\n    setShowConsentForm(false);\n    setShowApplicationForm(true);\n  };\n\n  const handleConsentDecline = () => {\n    setShowConsentForm(false);\n    setSelectedOpportunity(null);\n  };\n\n  const handleApplicationClose = () => {\n    setShowApplicationForm(false);\n    setSelectedOpportunity(null);\n  };\n\n  const formatLanguageName = (language: string): string => {\n    return language\n      .split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"space-y-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">{t('volunteer.opportunities', 'Volunteer Opportunities')}</h1>\n          \n          <div className=\"flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4\">\n            <div className=\"relative flex-grow\">\n              <input\n                type=\"text\"\n                placeholder={t('volunteer.searchOpportunities', 'Search opportunities...')}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              <Search className=\"absolute left-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n            \n            <select\n              value={selectedSkill}\n              onChange={(e) => setSelectedSkill(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n              aria-label={t('volunteer.selectSkill', 'Select skill')}\n            >\n              <option value=\"\">{t('volunteer.allSkills', 'All Skills')}</option>\n              {SKILLS.map((skill) => (\n                <option key={skill} value={skill}>{skill}</option>\n              ))}\n            </select>\n\n            <select\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n              aria-label={t('volunteer.selectType', 'Select type')}\n            >\n              <option value=\"\">{t('volunteer.allTypes', 'All Types')}</option>\n              {TYPES.map((type) => (\n                <option key={type} value={type}>\n                  {t(`volunteer.type.${type}`, type.charAt(0).toUpperCase() + type.slice(1))}\n                </option>\n              ))}\n            </select>\n\n            <select\n              value={selectedLanguage}\n              onChange={(e) => setSelectedLanguage(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500\"\n              aria-label={t('volunteer.selectLanguage', 'Select language')}\n            >\n              <option value=\"\">{t('volunteer.allLanguages', 'All Languages')}</option>\n              {LANGUAGES.map((language) => (\n                <option key={language} value={language}>\n                  {t(`language.${language}`, formatLanguageName(language))}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredOpportunities.map((opportunity) => (\n            <Card key={opportunity.id} className=\"overflow-hidden\">\n              <img\n                src={opportunity.image}\n                alt={opportunity.title}\n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{opportunity.title}</h3>\n                <p className=\"text-sm font-medium text-indigo-600 mb-2\">{opportunity.organization}</p>\n                <p className=\"text-gray-600 mb-4\">{opportunity.description}</p>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    {opportunity.commitment}\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    {opportunity.location}\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <Globe className=\"h-4 w-4 mr-2\" />\n                    {t(`language.${opportunity.workLanguage}`, formatLanguageName(opportunity.workLanguage))}\n                  </div>\n                  <div className=\"flex flex-wrap gap-2 mt-3\">\n                    {opportunity.skills.map((skill) => (\n                      <span\n                        key={skill}\n                        className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800\"\n                      >\n                        <Award className=\"h-3 w-3 mr-1\" />\n                        {skill}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <button\n                  onClick={createApplyHandler(opportunity)}\n                  className=\"mt-4 w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors\"\n                >\n                  {t('volunteer.applyNow', 'Apply Now')}\n                </button>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {filteredOpportunities.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">{t('volunteer.noOpportunitiesFound', 'No opportunities found matching your criteria.')}</p>\n          </div>\n        )}\n      </div>\n\n      {showConsentForm && selectedOpportunity && (\n        <ConsentForm\n          onAccept={handleConsentAccept}\n          onDecline={handleConsentDecline}\n        />\n      )}\n\n      {showApplicationForm && selectedOpportunity && (\n        <ApplicationForm\n          opportunityId={selectedOpportunity.id.toString()}\n          opportunityTitle={selectedOpportunity.title}\n          onClose={handleApplicationClose}\n          onSuccess={() => {\n            handleApplicationClose();\n            showToast('success', 'Application Submitted', 'Your volunteer application has been submitted successfully.');\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default VolunteerOpportunities;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/admin/AdminDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'supabase' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAdminStats'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAdminStats, user?.id]","fix":{"range":[953,963],"text":"[fetchAdminStats, user?.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/Card';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/lib/supabase';\nimport { trackEvent } from '@/lib/sentry';\n\ninterface AdminStats {\n  totalUsers: number;\n  totalDonations: number;\n  totalCharities: number;\n  totalVolunteers: number;\n  recentActivity: Array<{\n    id: string;\n    type: 'donation' | 'registration' | 'verification';\n    description: string;\n    timestamp: string;\n    amount?: number;\n  }>;\n}\n\nconst AdminDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const [stats, setStats] = useState<AdminStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchAdminStats();\n    trackEvent('admin_dashboard_viewed', { userId: user?.id });\n  }, [user?.id]);\n\n  const fetchAdminStats = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // In a real implementation, these would be actual database queries\n      // For now, we'll use mock data since the full backend might not be set up\n      const mockStats: AdminStats = {\n        totalUsers: 1250,\n        totalDonations: 89,\n        totalCharities: 23,\n        totalVolunteers: 156,\n        recentActivity: [\n          {\n            id: '1',\n            type: 'donation',\n            description: 'New donation to Education for All',\n            timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n            amount: 250\n          },\n          {\n            id: '2',\n            type: 'registration',\n            description: 'New charity registered: Ocean Cleanup Initiative',\n            timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString()\n          },\n          {\n            id: '3',\n            type: 'verification',\n            description: 'Volunteer hours verified for Clean Water Project',\n            timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString()\n          },\n          {\n            id: '4',\n            type: 'donation',\n            description: 'Large donation to Climate Action Now',\n            timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString(),\n            amount: 1000\n          }\n        ]\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setStats(mockStats);\n    } catch (err) {\n      console.error('Failed to fetch admin stats:', err);\n      setError('Failed to load dashboard data. Please try again.');\n      trackEvent('admin_dashboard_error', { \n        error: err instanceof Error ? err.message : String(err),\n        userId: user?.id \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatRelativeTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) {\n      const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n      return `${diffInMinutes} minutes ago`;\n    } else if (diffInHours < 24) {\n      return `${diffInHours} hours ago`;\n    } else {\n      const diffInDays = Math.floor(diffInHours / 24);\n      return `${diffInDays} days ago`;\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'donation':\n        return '💰';\n      case 'registration':\n        return '📝';\n      case 'verification':\n        return '✅';\n      default:\n        return '📊';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <Card className=\"p-6 text-center\">\n          <h2 className=\"text-xl font-semibold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={fetchAdminStats}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n          >\n            Retry\n          </button>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return null;\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n        <button\n          onClick={fetchAdminStats}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n        >\n          Refresh\n        </button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalUsers.toLocaleString()}</p>\n            </div>\n            <div className=\"text-2xl\">👥</div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Donations</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalDonations}</p>\n            </div>\n            <div className=\"text-2xl\">💰</div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Verified Charities</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalCharities}</p>\n            </div>\n            <div className=\"text-2xl\">🏛️</div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Volunteers</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{stats.totalVolunteers}</p>\n            </div>\n            <div className=\"text-2xl\">🤝</div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card className=\"p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Recent Activity</h2>\n        <div className=\"space-y-4\">\n          {stats.recentActivity.map((activity) => (\n            <div key={activity.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-2xl\">{getActivityIcon(activity.type)}</span>\n                <div>\n                  <p className=\"font-medium text-gray-900\">{activity.description}</p>\n                  <p className=\"text-sm text-gray-500\">{formatRelativeTime(activity.timestamp)}</p>\n                </div>\n              </div>\n              {activity.amount && (\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-green-600\">{formatCurrency(activity.amount)}</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <div className=\"text-2xl mb-2\">📊</div>\n            <div className=\"font-medium\">View Reports</div>\n            <div className=\"text-sm text-gray-500\">Generate detailed analytics</div>\n          </button>\n          \n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <div className=\"text-2xl mb-2\">🏛️</div>\n            <div className=\"font-medium\">Manage Charities</div>\n            <div className=\"text-sm text-gray-500\">Review and approve organizations</div>\n          </button>\n          \n          <button className=\"p-4 border rounded-lg hover:bg-gray-50 text-left\">\n            <div className=\"text-2xl mb-2\">⚙️</div>\n            <div className=\"font-medium\">System Settings</div>\n            <div className=\"text-sm text-gray-500\">Configure platform parameters</div>\n          </button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/CleanWaterInitiative.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/EducationAccessProgram.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/causes/ReforestationProject.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/ClimateActionNow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/EducationForAll.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charities/GlobalWaterFoundation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/charity/CreateOpportunity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/donor/ScheduledDonationsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/EducationPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/EnvironmentPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/portfolio/PovertyPortfolioDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/pages/volunteer/VerifyContribution.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'getVerificationByHash'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [getVerificationByHash, hash]","fix":{"range":[1348,1354],"text":"[getVerificationByHash, hash]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { ArrowLeft, CheckCircle, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { useVolunteerVerification } from '@/hooks/useVolunteerVerification';\nimport { VolunteerVerificationCard } from '@/components/volunteer/VolunteerVerificationCard';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Logger } from '@/utils/logger';\nimport { VolunteerVerification } from '@/types/volunteer';\n\nconst VerifyContribution: React.FC = () => {\n  const { hash } = useParams<{ hash: string }>();\n  const navigate = useNavigate();\n  const { getVerificationByHash, loading, error } = useVolunteerVerification();\n  const [verification, setVerification] = React.useState<VolunteerVerification | null>(null);\n  const [verificationChecked, setVerificationChecked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (hash) {\n      const fetchVerification = async () => {\n        try {\n          const result = await getVerificationByHash(hash);\n          setVerification(result);\n          setVerificationChecked(true);\n        } catch (err) {\n          Logger.error('Verification lookup failed:', err);\n          setVerificationChecked(true);\n        }\n      };\n      \n      fetchVerification();\n    }\n  }, [hash]);\n\n  if (loading) {\n    return (\n      <div className=\"max-w-3xl mx-auto px-4 py-12\">\n        <div className=\"flex flex-col items-center justify-center py-12\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"mt-4 text-gray-600\">Verifying contribution&hellip;</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto px-4 py-12\">\n      <Button\n        variant=\"ghost\"\n        onClick={() => navigate(-1)}\n        className=\"mb-6 flex items-center text-gray-600 hover:text-gray-900\"\n      >\n        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n        Back\n      </Button>\n\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Volunteer Contribution Verification</h1>\n        </div>\n\n        <div className=\"p-6\">\n          {verificationChecked ? (\n            verification ? (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center p-4 bg-green-50 rounded-lg\">\n                  <CheckCircle className=\"h-6 w-6 text-green-500 mr-3\" />\n                  <div>\n                    <h2 className=\"text-lg font-medium text-green-800\">Verification Successful</h2>\n                    <p className=\"text-sm text-green-700\">\n                      This volunteer contribution has been verified and recorded on the blockchain.\n                    </p>\n                  </div>\n                </div>\n\n                <VolunteerVerificationCard\n                  verification={{\n                    id: verification.id,\n                    applicantName: verification.profiles?.name || 'Unknown Volunteer',\n                    opportunityTitle: verification.volunteer_opportunities?.title || 'Unknown Opportunity',\n                    charityName: verification.volunteer_opportunities?.charity_details?.name || 'Unknown Organization',\n                    acceptanceHash: verification.acceptanceHash,\n                    verificationHash: verification.verificationHash,\n                    acceptedAt: verification.acceptedAt,\n                    verifiedAt: verification.verifiedAt,\n                    blockchainReference: verification.blockchainReference\n                  }}\n                />\n              </div>\n            ) : (\n              <div className=\"flex items-center p-4 bg-yellow-50 rounded-lg\">\n                <AlertCircle className=\"h-6 w-6 text-yellow-500 mr-3\" />\n                <div>\n                  <h2 className=\"text-lg font-medium text-yellow-800\">Verification Failed</h2>\n                  <p className=\"text-sm text-yellow-700\">\n                    The verification hash {hash} could not be found or is invalid.\n                  </p>\n                </div>\n              </div>\n            )\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No verification hash provided.</p>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"mt-4 p-4 bg-red-50 text-red-700 rounded-lg\">\n              {error}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VerifyContribution;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/ProtectedRoute.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":22,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useProfile } from '@/hooks/useProfile';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Logger } from '@/utils/logger';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n  requireWallet?: boolean;\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  requiredRoles = [],\n  requireWallet = false\n}) => {\n  const location = useLocation();\n  const { user, userType } = useAuth();\n  const { profile, loading: profileLoading } = useProfile();\n  const { isConnected: isWalletConnected, connect } = useWeb3();\n\n  // Handle loading states\n  if (profileLoading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  // Check authentication\n  if (!user) {\n    Logger.info('Unauthorized access attempt', {\n      path: location.pathname,\n      timestamp: new Date().toISOString()\n    });\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // Check role requirements\n  if (requiredRoles.length > 0 && !requiredRoles.includes(userType || '')) {\n    Logger.warn('Invalid role access attempt', {\n      path: location.pathname,\n      userRole: userType,\n      requiredRoles,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Redirect to appropriate dashboard based on user type\n    if (userType === 'donor') {\n      return <Navigate to=\"/give-dashboard\" replace />;\n    } else if (userType === 'charity') {\n      return <Navigate to=\"/charity-portal\" replace />;\n    } else if (userType === 'admin') {\n      return <Navigate to=\"/admin\" replace />;\n    }\n    \n    return <Navigate to=\"/\" replace />;\n  }\n\n  // Check wallet connection\n  if (requireWallet && !isWalletConnected) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center space-y-4\">\n        <h2 className=\"text-xl font-semibold\">Wallet Connection Required</h2>\n        <p className=\"text-gray-600\">Please connect your wallet to continue</p>\n        <button\n          onClick={connect}\n          className=\"rounded-md bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700\"\n        >\n          Connect Wallet\n        </button>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/RouteTransition.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/routes/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'React' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense, lazy } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { RouteTransition } from './RouteTransition';\nimport { ProtectedRoute } from './ProtectedRoute';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\n\n// Eagerly load critical routes\nimport ComingSoon from '@/pages/ComingSoon';\nimport Login from '@/pages/Login';\nimport Register from '@/pages/Register';\n\n// Lazy load other routes\nconst Home = lazy(() => import('@/pages/Home'));\nconst CharityBrowser = lazy(() => import('@/pages/CharityBrowser'));\nconst SentryTest = lazy(() => import('@/pages/SentryTest'));\nconst GlobalWaterFoundation = lazy(() => import('@/pages/charities/GlobalWaterFoundation'));\nconst EducationForAll = lazy(() => import('@/pages/charities/EducationForAll'));\nconst ClimateActionNow = lazy(() => import('@/pages/charities/ClimateActionNow'));\nconst EnvironmentPortfolioDetail = lazy(() => import('@/pages/portfolio/EnvironmentPortfolioDetail'));\nconst EducationPortfolioDetail = lazy(() => import('@/pages/portfolio/EducationPortfolioDetail'));\nconst PovertyPortfolioDetail = lazy(() => import('@/pages/portfolio/PovertyPortfolioDetail'));\nconst ContributionTracker = lazy(() => import('@/pages/ContributionTracker'));\nconst VolunteerOpportunities = lazy(() => import('@/pages/VolunteerOpportunities'));\nconst About = lazy(() => import('@/pages/About').then(m => ({ default: m.About })));\nconst Legal = lazy(() => import('@/pages/Legal').then(m => ({ default: m.Legal })));\nconst Privacy = lazy(() => import('@/pages/Privacy').then(m => ({ default: m.Privacy })));\nconst Governance = lazy(() => import('@/pages/Governance').then(m => ({ default: m.Governance })));\nconst GiveDashboard = lazy(() => import('@/pages/GiveDashboard').then(m => ({ default: m.GiveDashboard })));\nconst CharityPortal = lazy(() => import('@/pages/CharityPortal').then(m => ({ default: m.CharityPortal })));\nconst CreateOpportunity = lazy(() => import('@/pages/charity/CreateOpportunity'));\nconst NotFound = lazy(() => import('@/pages/NotFound'));\nconst VerifyContribution = lazy(() => import('@/pages/volunteer/VerifyContribution'));\nconst ScheduledDonationsPage = lazy(() => import('@/pages/donor/ScheduledDonationsPage'));\nconst Documentation = lazy(() => import('@/pages/Documentation'));\n\n// Admin routes\nconst AdminDashboard = lazy(() => import('@/pages/admin/AdminDashboard'));\n\n// Lazy load cause pages\nconst CleanWaterInitiative = lazy(() => import('@/pages/causes/CleanWaterInitiative'));\nconst EducationAccessProgram = lazy(() => import('@/pages/causes/EducationAccessProgram'));\nconst ReforestationProject = lazy(() => import('@/pages/causes/ReforestationProject'));\n\nconst LoadingFallback = () => (\n  <div className=\"flex min-h-screen items-center justify-center\">\n    <LoadingSpinner size=\"lg\" />\n  </div>\n);\n\nexport function AppRoutes() {\n  const { user } = useAuth();\n\n  return (\n    <Suspense fallback={<LoadingFallback />}>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <RouteTransition>\n              <ComingSoon />\n            </RouteTransition>\n          }\n        />\n\n        {/* Admin Routes */}\n        <Route\n          path=\"/admin/*\"\n          element={\n            <ProtectedRoute requiredRoles={['admin']}>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <AdminDashboard />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Cause Routes */}\n        <Route\n          path=\"/causes/clean-water-initiative\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <CleanWaterInitiative />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/causes/education-access-program\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <EducationAccessProgram />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/causes/reforestation-project\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <ReforestationProject />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n\n        {/* Charity Routes */}\n        <Route\n          path=\"/charity/global-water-foundation\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <GlobalWaterFoundation />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/charity/education-for-all\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <EducationForAll />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/charity/climate-action-now\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <ClimateActionNow />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n\n        {/* Portfolio Routes */}\n        <Route\n          path=\"/portfolio/environmental\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <EnvironmentPortfolioDetail />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/portfolio/education\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <EducationPortfolioDetail />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/portfolio/poverty\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <PovertyPortfolioDetail />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/portfolio/poverty-relief\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <PovertyPortfolioDetail />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n\n        {/* Volunteer Verification Routes */}\n        <Route\n          path=\"/verify/:hash\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <VerifyContribution />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n\n        {/* Charity Management Routes */}\n        <Route\n          path=\"/charity-portal/create-opportunity\"\n          element={\n            <ProtectedRoute requiredRoles={['charity']}>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <CreateOpportunity />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Donor Routes */}\n        <Route\n          path=\"/scheduled-donations\"\n          element={\n            <ProtectedRoute requiredRoles={['donor']}>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <ScheduledDonationsPage />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Other Routes */}\n        <Route\n          path=\"/privacy\"\n          element={\n            <RouteTransition>\n              <Privacy />\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/sentry-test\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <SentryTest />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/app\"\n          element={\n            <RouteTransition>\n              <Home />\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/give-dashboard/*\"\n          element={\n            <ProtectedRoute>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <GiveDashboard />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/donor-portal\"\n          element={\n            <ProtectedRoute requiredRoles={['donor']}>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <Navigate to=\"/give-dashboard\" replace />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/charity-portal/*\"\n          element={\n            <ProtectedRoute requiredRoles={['charity']}>\n              <RouteTransition>\n                <Suspense fallback={<LoadingFallback />}>\n                  <CharityPortal />\n                </Suspense>\n              </RouteTransition>\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/browse\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <CharityBrowser />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/opportunities\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <VolunteerOpportunities />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/contributions\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <ContributionTracker />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/governance\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <Governance />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/about\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <About />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/docs\"\n          element={\n            <Navigate to=\"/documentation\" replace />\n          }\n        />\n        <Route\n          path=\"/documentation\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <Documentation />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route\n          path=\"/legal\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <Legal />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/register\" element={<Register />} />\n        <Route\n          path=\"*\"\n          element={\n            <RouteTransition>\n              <Suspense fallback={<LoadingFallback />}>\n                <NotFound />\n              </Suspense>\n            </RouteTransition>\n          }\n        />\n      </Routes>\n    </Suspense>\n  );\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/styles/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/styles/colors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/mocks/handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/test/utils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":29,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":29,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { PropsWithChildren } from 'react';\nimport { render } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { ToastProvider } from '@/contexts/ToastContext';\nimport { Web3Provider } from '@/contexts/Web3Context';\n\nexport function renderWithProviders(\n  ui: React.ReactElement,\n  { route = '/' } = {}\n) {\n  window.history.pushState({}, 'Test page', route);\n\n  return render(ui, {\n    wrapper: ({ children }: PropsWithChildren) => (\n      <BrowserRouter future={{ v7_relativeSplatPath: true }}>\n        <ToastProvider>\n          <AuthProvider>\n            <Web3Provider>\n              {children}\n            </Web3Provider>\n          </AuthProvider>\n        </ToastProvider>\n      </BrowserRouter>\n    )\n  });\n}\n\nexport * from '@testing-library/react';","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/blockchain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/charity.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'PENDING' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'ACTIVE' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'PAUSED' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'COMPLETED' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'ARCHIVED' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'EDUCATION' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'HEALTHCARE' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'ENVIRONMENT' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'POVERTY' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'DISASTER_RELIEF' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'ANIMAL_WELFARE' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'ARTS_CULTURE' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'COMMUNITY' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Address, Timestamp, UUID } from './common';\nimport { TokenAmount } from './blockchain';\n\nexport enum CharityStatus {\n  PENDING = 'pending',\n  ACTIVE = 'active',\n  PAUSED = 'paused',\n  COMPLETED = 'completed',\n  ARCHIVED = 'archived'\n}\n\nexport enum CharityCategory {\n  EDUCATION = 'education',\n  HEALTHCARE = 'healthcare',\n  ENVIRONMENT = 'environment',\n  POVERTY = 'poverty',\n  DISASTER_RELIEF = 'disaster_relief',\n  ANIMAL_WELFARE = 'animal_welfare',\n  ARTS_CULTURE = 'arts_culture',\n  COMMUNITY = 'community'\n}\n\nexport interface CharityBase {\n  readonly id: UUID;\n  name: string;\n  description: string;\n  category: CharityCategory;\n  status: CharityStatus;\n  walletAddress: Address;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n\nexport interface CharityMeta {\n  logoUrl?: string;\n  bannerUrl?: string;\n  website?: string;\n  socialLinks: Partial<Record<'twitter' | 'facebook' | 'instagram' | 'linkedin', string>>;\n  documents: CharityDocument[];\n}\n\nexport interface CharityDocument {\n  id: UUID;\n  type: 'registration' | 'audit' | 'report';\n  url: string;\n  verifiedAt?: Timestamp;\n}\n\nexport interface CharityStats {\n  totalDonations: number;\n  totalAmount: TokenAmount;\n  donorCount: number;\n  avgDonation: TokenAmount;\n  successRate: number;\n  impactMetrics: ImpactMetric[];\n}\n\nexport interface ImpactMetric {\n  id: UUID;\n  name: string;\n  value: number;\n  unit: string;\n  category: string;\n  timestamp: Timestamp;\n}\n\nexport interface CharityVerification {\n  isVerified: boolean;\n  verifiedAt?: Timestamp;\n  verifiedBy?: UUID;\n  documents: VerificationDocument[];\n}\n\nexport interface VerificationDocument {\n  id: UUID;\n  type: string;\n  status: 'pending' | 'verified' | 'rejected';\n  verifiedAt?: Timestamp;\n  verifiedBy?: UUID;\n}\n\nexport interface Charity extends CharityBase {\n  meta: CharityMeta;\n  stats: CharityStats;\n  verification: CharityVerification;\n  campaigns: Campaign[];\n}\n\nexport interface Campaign {\n  readonly id: UUID;\n  charityId: UUID;\n  title: string;\n  description: string;\n  targetAmount: TokenAmount;\n  currentAmount: TokenAmount;\n  startDate: Timestamp;\n  endDate: Timestamp;\n  status: CampaignStatus;\n  updates: CampaignUpdate[];\n}\n\nexport type CampaignStatus = \n  | 'draft'\n  | 'active'\n  | 'paused'\n  | 'completed'\n  | 'cancelled';\n\nexport interface CampaignUpdate {\n  readonly id: UUID;\n  campaignId: UUID;\n  title: string;\n  content: string;\n  createdAt: Timestamp;\n  attachments: CampaignAttachment[];\n}\n\nexport interface CampaignAttachment {\n  id: UUID;\n  type: 'image' | 'document';\n  url: string;\n  mimeType: string;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/components.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'charityId' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'charityId' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'charity' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'categories' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'verified' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'campaignId' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'campaign' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'amount' is defined but never used. Allowed unused args must match /^_/u.","line":59,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'charity' is defined but never used. Allowed unused args must match /^_/u.","line":68,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'donation' is defined but never used. Allowed unused args must match /^_/u.","line":75,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'donationId' is defined but never used. Allowed unused args must match /^_/u.","line":76,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, CSSProperties } from 'react';\nimport { Charity, Campaign, CharityCategory } from './charity';\nimport { TokenAmount } from './blockchain';\n\n// Base Component Props\nexport interface BaseComponentProps {\n  className?: string;\n  style?: CSSProperties;\n  testId?: string;\n  children?: ReactNode;\n}\n\n// Charity Component Props\nexport interface CharityCardProps extends BaseComponentProps {\n  charity: Charity;\n  onDonate?: (charityId: string) => void;\n  onShare?: (charityId: string) => void;\n  showStats?: boolean;\n  compact?: boolean;\n}\n\nexport interface CharityListProps extends BaseComponentProps {\n  charities: Charity[];\n  loading?: boolean;\n  error?: Error;\n  onCharityClick?: (charity: Charity) => void;\n  layout?: 'grid' | 'list';\n  showPagination?: boolean;\n}\n\nexport interface CharityFilterProps extends BaseComponentProps {\n  categories: CharityCategory[];\n  selectedCategories: CharityCategory[];\n  onCategoryChange: (categories: CharityCategory[]) => void;\n  showVerifiedOnly: boolean;\n  onVerifiedChange: (verified: boolean) => void;\n}\n\n// Campaign Component Props\nexport interface CampaignCardProps extends BaseComponentProps {\n  campaign: Campaign;\n  onDonate?: (campaignId: string) => void;\n  showProgress?: boolean;\n  showTimeLeft?: boolean;\n}\n\nexport interface CampaignListProps extends BaseComponentProps {\n  campaigns: Campaign[];\n  loading?: boolean;\n  error?: Error;\n  onCampaignClick?: (campaign: Campaign) => void;\n  layout?: 'grid' | 'list';\n}\n\n// Form Component Props\nexport interface DonationFormProps extends BaseComponentProps {\n  charityId: string;\n  campaignId?: string;\n  onSubmit: (amount: TokenAmount) => Promise<void>;\n  onCancel?: () => void;\n  minAmount?: TokenAmount;\n  maxAmount?: TokenAmount;\n}\n\n// Context Types\nexport interface CharityContextType {\n  selectedCharity?: Charity;\n  setSelectedCharity: (charity?: Charity) => void;\n  loading: boolean;\n  error?: Error;\n}\n\nexport interface DonationContextType {\n  pendingDonations: PendingDonation[];\n  addDonation: (donation: Omit<PendingDonation, 'status'>) => void;\n  removeDonation: (donationId: string) => void;\n}\n\nexport interface PendingDonation {\n  id: string;\n  charityId: string;\n  campaignId?: string;\n  amount: TokenAmount;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n}\n\n// UI Component Props\nexport interface ButtonProps extends BaseComponentProps {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  loading?: boolean;\n  onClick?: () => void;\n}\n\nexport interface InputProps extends BaseComponentProps {\n  label?: string;\n  error?: string;\n  helperText?: string;\n  type?: 'text' | 'number' | 'email' | 'password';\n  value: string | number;\n  onChange: (value: string) => void;\n  required?: boolean;\n  disabled?: boolean;\n}\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: 'sm' | 'md' | 'lg';\n  color?: 'primary' | 'secondary' | 'white';\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/contribution.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/hooks.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'amount' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'charityId' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":65,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":66,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'search' is defined but never used. Allowed unused args must match /^_/u.","line":79,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'categories' is defined but never used. Allowed unused args must match /^_/u.","line":80,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'verified' is defined but never used. Allowed unused args must match /^_/u.","line":81,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Charity, Campaign, CharityCategory } from './charity';\nimport { TokenAmount, TransactionHash } from './blockchain';\nimport { ApiError, QueryOptions } from './common';\n\n// Data Fetching Hooks\nexport interface UseCharityResult {\n  charity?: Charity;\n  loading: boolean;\n  error?: ApiError;\n  refetch: () => Promise<void>;\n}\n\nexport interface UseCampaignResult {\n  campaign?: Campaign;\n  loading: boolean;\n  error?: ApiError;\n  refetch: () => Promise<void>;\n}\n\nexport interface UseInfiniteDataOptions<T> extends QueryOptions {\n  fetchFn: (options: QueryOptions) => Promise<T[]>;\n  pageSize?: number;\n  initialData?: T[];\n}\n\nexport interface UseInfiniteDataResult<T> {\n  data: T[];\n  loading: boolean;\n  error?: Error;\n  hasMore: boolean;\n  loadMore: () => Promise<void>;\n  refresh: () => Promise<void>;\n}\n\n// Web3 Hooks\nexport interface UseWalletResult {\n  address?: string;\n  isConnected: boolean;\n  isConnecting: boolean;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  error?: Error;\n}\n\nexport interface UseDonationResult {\n  donate: (amount: TokenAmount, charityId: string) => Promise<TransactionHash>;\n  loading: boolean;\n  error?: Error;\n}\n\nexport interface UseTransactionResult {\n  hash?: TransactionHash;\n  status: 'pending' | 'confirmed' | 'failed';\n  loading: boolean;\n  error?: Error;\n}\n\n// Form Hooks\nexport interface UseFormResult<T> {\n  values: T;\n  errors: Record<keyof T, string>;\n  touched: Record<keyof T, boolean>;\n  handleChange: (field: keyof T, value: T[keyof T]) => void;\n  handleBlur: (field: keyof T) => void;\n  handleSubmit: (e: React.FormEvent) => void;\n  isValid: boolean;\n  isDirty: boolean;\n  resetForm: () => void;\n}\n\n// Filter Hooks\nexport interface UseFiltersResult {\n  filters: {\n    search: string;\n    categories: CharityCategory[];\n    verifiedOnly: boolean;\n  };\n  setSearch: (search: string) => void;\n  setCategories: (categories: CharityCategory[]) => void;\n  setVerifiedOnly: (verified: boolean) => void;\n  resetFilters: () => void;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/types/volunteer.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Address' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'ACTIVE' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'COMPLETED' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'CANCELLED' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'PENDING' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'APPROVED' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'REJECTED' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'PENDING' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'APPROVED' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'REJECTED' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'ONE_TIME' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'SHORT_TERM' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'LONG_TERM' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'ONSITE' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'REMOTE' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'HYBRID' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'ENGLISH' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'SPANISH' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'GERMAN' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'FRENCH' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'JAPANESE' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'CHINESE_SIMPLIFIED' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'CHINESE_TRADITIONAL' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'THAI' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'VIETNAMESE' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'KOREAN' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'ARABIC' is defined but never used. Allowed unused vars must match /^_/u.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'HINDI' is defined but never used. Allowed unused vars must match /^_/u.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":8},{"ruleId":"no-unused-vars","severity":1,"message":"'MULTIPLE' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UUID, Address, Timestamp } from './common';\n\nexport enum VolunteerOpportunityStatus {\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled'\n}\n\nexport enum VolunteerApplicationStatus {\n  PENDING = 'pending',\n  APPROVED = 'approved',\n  REJECTED = 'rejected'\n}\n\nexport enum VolunteerHoursStatus {\n  PENDING = 'pending',\n  APPROVED = 'approved',\n  REJECTED = 'rejected'\n}\n\nexport enum CommitmentType {\n  ONE_TIME = 'one-time',\n  SHORT_TERM = 'short-term',\n  LONG_TERM = 'long-term'\n}\n\nexport enum OpportunityType {\n  ONSITE = 'onsite',\n  REMOTE = 'remote',\n  HYBRID = 'hybrid'\n}\n\nexport enum WorkLanguage {\n  ENGLISH = 'english',\n  SPANISH = 'spanish',\n  GERMAN = 'german',\n  FRENCH = 'french',\n  JAPANESE = 'japanese',\n  CHINESE_SIMPLIFIED = 'chinese_simplified',\n  CHINESE_TRADITIONAL = 'chinese_traditional',\n  THAI = 'thai',\n  VIETNAMESE = 'vietnamese',\n  KOREAN = 'korean',\n  ARABIC = 'arabic',\n  HINDI = 'hindi',\n  MULTIPLE = 'multiple'\n}\n\nexport interface VolunteerOpportunity {\n  id: UUID;\n  charityId: UUID;\n  title: string;\n  description: string;\n  skills: string[];\n  commitment: CommitmentType;\n  location: string;\n  type: OpportunityType;\n  status: VolunteerOpportunityStatus;\n  workLanguage: WorkLanguage;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n\nexport interface VolunteerApplication {\n  id: UUID;\n  opportunityId: UUID;\n  applicantId: UUID;\n  fullName: string;\n  phoneNumber: string;\n  email: string;\n  dateOfBirth?: string;\n  availability: {\n    days: string[];\n    times: string[];\n  };\n  commitmentType: CommitmentType;\n  experience?: string;\n  skills?: string[];\n  certifications?: string[];\n  interests?: string[];\n  referenceContacts?: {\n    name: string;\n    contact: string;\n  }[];\n  workSamples?: string[];\n  status: VolunteerApplicationStatus;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n  acceptanceHash?: string; // Hash created when application is accepted\n}\n\nexport interface VolunteerHours {\n  id: UUID;\n  volunteerId: UUID;\n  charityId: UUID;\n  opportunityId?: UUID;\n  hours: number;\n  description?: string;\n  datePerformed: string;\n  status: VolunteerHoursStatus;\n  createdAt: Timestamp;\n  approvedAt?: Timestamp;\n  approvedBy?: UUID;\n  verificationHash?: string; // Hash created when hours are verified\n}\n\nexport interface VolunteerVerification {\n  id: UUID;\n  applicantId: UUID;\n  opportunityId: UUID;\n  charityId: UUID;\n  acceptanceHash: string; // Hash for application acceptance\n  verificationHash?: string; // Hash for hours verification\n  acceptedAt: Timestamp;\n  verifiedAt?: Timestamp;\n  blockchainReference?: {\n    network: string;\n    transactionId: string;\n    blockNumber: number;\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/cn.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/__tests__/validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/caching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/date.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/errorBoundary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/inputValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/money.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/caching.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/performance/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/security/sanitizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/volunteer.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useWeb3' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'getContractAddress' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'VOLUNTEER_VERIFICATION_ABI' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":10,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'applicantAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":205,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'hours' is defined but never used. Allowed unused args must match /^_/u.","line":232,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'volunteerAddress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":253,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ethers } from 'ethers';\nimport { supabase } from '@/lib/supabase';\nimport { VolunteerApplication, VolunteerHours, VolunteerVerification } from '@/types/volunteer';\nimport { Logger } from './logger';\nimport { useWeb3 } from '@/contexts/Web3Context';\nimport { getContractAddress } from '@/config/contracts';\nimport { SecureRandom } from '@/utils/security/index';\n\n// ABI for the VolunteerVerification contract\nconst VOLUNTEER_VERIFICATION_ABI = [\n  \"function verifyApplication(bytes32 _applicationHash, address _applicant) external\",\n  \"function verifyHours(bytes32 _hoursHash, address _volunteer, uint256 _hours) external\",\n  \"function checkApplicationVerification(bytes32 _applicationHash) external view returns (bool isVerified, address applicant, address charity, uint256 timestamp)\",\n  \"function checkHoursVerification(bytes32 _hoursHash) external view returns (bool isVerified, address volunteer, address charity, uint256 hours, uint256 timestamp)\"\n];\n\n/**\n * Generates a unique hash for volunteer activity verification\n * @param data Object containing data to hash\n * @returns Keccak256 hash of the data\n */\nexport const generateVerificationHash = (data: Record<string, unknown>): string => {\n  try {\n    // Add timestamp to ensure uniqueness\n    const dataWithTimestamp = {\n      ...data,\n      timestamp: Date.now()\n    };\n    \n    // Convert to string and hash using ethers v6 pattern\n    const dataString = JSON.stringify(dataWithTimestamp);\n    return ethers.keccak256(ethers.toUtf8Bytes(dataString));\n  } catch (error) {\n    Logger.error('Error generating verification hash', { error });\n    throw new Error('Failed to generate verification hash');\n  }\n};\n\n/**\n * Creates a hash for volunteer application acceptance\n * @param application The volunteer application\n * @returns The generated hash\n */\nexport const createAcceptanceHash = async (application: VolunteerApplication): Promise<string> => {\n  try {\n    // Generate hash from application data\n    const hash = generateVerificationHash({\n      applicantId: application.applicantId,\n      opportunityId: application.opportunityId,\n      status: application.status,\n      acceptedAt: new Date().toISOString()\n    });\n    \n    // Update application with hash\n    const { error } = await supabase\n      .from('volunteer_applications')\n      .update({ \n        acceptance_hash: hash,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', application.id);\n    \n    if (error) throw error;\n    \n    // Create verification record\n    const { error: verificationError } = await supabase\n      .from('volunteer_verifications')\n      .insert({\n        applicant_id: application.applicantId,\n        opportunity_id: application.opportunityId,\n        charity_id: application.charityId, // Assuming this is available\n        acceptance_hash: hash,\n        accepted_at: new Date().toISOString()\n      });\n    \n    if (verificationError) throw verificationError;\n    \n    // Record on blockchain\n    try {\n      await recordApplicationOnChain(application.applicantId, hash);\n    } catch (blockchainError) {\n      Logger.warn('Failed to record application on blockchain', { \n        error: blockchainError, \n        applicationId: application.id \n      });\n      // Continue even if blockchain recording fails\n    }\n    \n    return hash;\n  } catch (error) {\n    Logger.error('Error creating acceptance hash', { error, applicationId: application.id });\n    throw new Error('Failed to create acceptance hash');\n  }\n};\n\n/**\n * Creates a hash for volunteer hours verification\n * @param hours The volunteer hours record\n * @returns The generated hash\n */\nexport const createVerificationHash = async (hours: VolunteerHours): Promise<string> => {\n  try {\n    // Generate hash from hours data\n    const hash = generateVerificationHash({\n      volunteerId: hours.volunteerId,\n      charityId: hours.charityId,\n      opportunityId: hours.opportunityId,\n      hours: hours.hours,\n      datePerformed: hours.datePerformed,\n      status: hours.status,\n      verifiedAt: new Date().toISOString()\n    });\n    \n    // Update hours with hash\n    const { error } = await supabase\n      .from('volunteer_hours')\n      .update({ \n        verification_hash: hash,\n        approved_at: new Date().toISOString()\n      })\n      .eq('id', hours.id);\n    \n    if (error) throw error;\n    \n    // Update verification record if exists\n    const { data: verificationData } = await supabase\n      .from('volunteer_verifications')\n      .select('id')\n      .eq('applicant_id', hours.volunteerId)\n      .eq('charity_id', hours.charityId)\n      .eq('opportunity_id', hours.opportunityId || '')\n      .maybeSingle();\n    \n    if (verificationData) {\n      const { error: updateError } = await supabase\n        .from('volunteer_verifications')\n        .update({\n          verification_hash: hash,\n          verified_at: new Date().toISOString()\n        })\n        .eq('id', verificationData.id);\n      \n      if (updateError) throw updateError;\n    } else {\n      // Create new verification record if not exists\n      const { error: insertError } = await supabase\n        .from('volunteer_verifications')\n        .insert({\n          applicant_id: hours.volunteerId,\n          opportunity_id: hours.opportunityId || '',\n          charity_id: hours.charityId,\n          verification_hash: hash,\n          verified_at: new Date().toISOString()\n        });\n      \n      if (insertError) throw insertError;\n    }\n    \n    // Record on blockchain\n    try {\n      await recordHoursOnChain(hours.volunteerId, hash, hours.hours);\n    } catch (blockchainError) {\n      Logger.warn('Failed to record hours on blockchain', { \n        error: blockchainError, \n        hoursId: hours.id \n      });\n      // Continue even if blockchain recording fails\n    }\n    \n    return hash;\n  } catch (error) {\n    Logger.error('Error creating verification hash', { error, hoursId: hours.id });\n    throw new Error('Failed to create verification hash');\n  }\n};\n\n/**\n * Records application verification on blockchain\n * @param applicantId The applicant's ID\n * @param hash The verification hash\n */\nexport const recordApplicationOnChain = async (\n  applicantId: string,\n  hash: string\n): Promise<{ transactionId: string; blockNumber: number }> => {\n  try {\n    // Get applicant's wallet address from profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('user_id')\n      .eq('id', applicantId)\n      .single();\n    \n    if (profileError) throw profileError;\n    \n    // Get wallet address from wallet_aliases\n    const { data: walletData, error: walletError } = await supabase\n      .from('wallet_aliases')\n      .select('wallet_address')\n      .eq('user_id', profileData.user_id)\n      .maybeSingle();\n    \n    if (walletError) throw walletError;\n    \n    const applicantAddress = walletData?.wallet_address || '0x0000000000000000000000000000000000000000';\n    \n    // For development/testing, return simulated blockchain data\n    return {\n      transactionId: SecureRandom.generateTransactionId(),\n      blockNumber: SecureRandom.generateSecureNumber(1, 1000000)\n    };\n  } catch (error) {\n    Logger.error('Error recording application on chain', { error, applicantId, hash });\n    \n    // For development/testing, return simulated blockchain data\n    return {\n      transactionId: SecureRandom.generateTransactionId(),\n      blockNumber: SecureRandom.generateSecureNumber(1, 1000000)\n    };\n  }\n};\n\n/**\n * Records hours verification on blockchain\n * @param volunteerId The volunteer's ID\n * @param hash The verification hash\n * @param hours The number of hours\n */\nexport const recordHoursOnChain = async (\n  volunteerId: string,\n  hash: string,\n  hours: number\n): Promise<{ transactionId: string; blockNumber: number }> => {\n  try {\n    // Get volunteer's wallet address from profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('user_id')\n      .eq('id', volunteerId)\n      .single();\n    \n    if (profileError) throw profileError;\n    \n    // Get wallet address from wallet_aliases\n    const { data: walletData, error: walletError } = await supabase\n      .from('wallet_aliases')\n      .select('wallet_address')\n      .eq('user_id', profileData.user_id)\n      .maybeSingle();\n    \n    if (walletError) throw walletError;\n    \n    const volunteerAddress = walletData?.wallet_address || '0x0000000000000000000000000000000000000000';\n    \n    // For development/testing, return simulated blockchain data\n    return {\n      transactionId: SecureRandom.generateTransactionId(),\n      blockNumber: SecureRandom.generateSecureNumber(1, 1000000)\n    };\n  } catch (error) {\n    Logger.error('Error recording hours on chain', { error, volunteerId, hash });\n    \n    // For development/testing, return simulated blockchain data\n    return {\n      transactionId: SecureRandom.generateTransactionId(),\n      blockNumber: SecureRandom.generateSecureNumber(1, 1000000)\n    };\n  }\n};\n\n/**\n * Records verification hash on blockchain\n * @param verification The volunteer verification record\n * @returns Transaction details\n */\nexport const recordVerificationOnChain = async (\n  verification: VolunteerVerification\n): Promise<{ transactionId: string; blockNumber: number }> => {\n  try {\n    if (verification.verificationHash) {\n      // This is a hours verification\n      return await recordHoursOnChain(\n        verification.applicantId,\n        verification.verificationHash,\n        10 // Default hours value, should be retrieved from the actual hours record\n      );\n    } else if (verification.acceptanceHash) {\n      // This is an application verification\n      return await recordApplicationOnChain(\n        verification.applicantId,\n        verification.acceptanceHash\n      );\n    }\n    \n    throw new Error('No verification hash provided');\n  } catch (error) {\n    Logger.error('Error recording verification on chain', { error, verificationId: verification.id });\n    \n    // For development/testing, return simulated blockchain data\n    return {\n      transactionId: SecureRandom.generateTransactionId(),\n      blockNumber: SecureRandom.generateSecureNumber(1, 1000000)\n    };\n  }\n};\n\n/**\n * Verifies a volunteer verification hash\n * @param hash The hash to verify\n * @returns Boolean indicating if hash is valid\n */\nexport const verifyVolunteerHash = async (hash: string): Promise<boolean> => {\n  try {\n    // Check if hash exists in database\n    const { data, error } = await supabase\n      .from('volunteer_verifications')\n      .select('*')\n      .or(`acceptance_hash.eq.${hash},verification_hash.eq.${hash}`)\n      .maybeSingle();\n    \n    if (error) throw error;\n    \n    return !!data;\n  } catch (error) {\n    Logger.error('Error verifying volunteer hash', { error, hash });\n    return false;\n  }\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/utils/web3.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/drigo/projects/Duration/src/vite-env.d.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Window' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":9,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'callback' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":63},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'callback' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":75},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'ImportMeta' is defined but never used. Allowed unused vars must match /^_/u.","line":45,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n\ninterface Window {\n  ethereum?: {\n    isMetaMask?: boolean;\n    isCoinbaseWallet?: boolean;\n    isTally?: boolean;\n    isBraveWallet?: boolean;\n    request: (args: { method: string; params?: unknown[] }) => Promise<unknown>;\n    on: (event: string, callback: (...args: unknown[]) => void) => void;\n    removeListener: (event: string, callback: (...args: unknown[]) => void) => void;\n    removeAllListeners: (event: string) => void;\n    disconnect?: () => Promise<void>;\n  };\n}\n\ninterface ImportMetaEnv {\n  readonly VITE_SUPABASE_URL: string;\n  readonly VITE_SUPABASE_ANON_KEY: string;\n  readonly VITE_APP_DOMAIN: string;\n  readonly VITE_DONATION_CONTRACT_ADDRESS: string;\n  readonly VITE_TOKEN_CONTRACT_ADDRESS: string;\n  readonly VITE_VERIFICATION_CONTRACT_ADDRESS: string;\n  readonly VITE_DISTRIBUTION_CONTRACT_ADDRESS: string;\n  readonly VITE_NETWORK: string;\n  readonly VITE_NETWORK_ENDPOINT: string;\n  readonly VITE_ENABLE_GOOGLE_AUTH: string;\n  readonly VITE_ENABLE_MAGIC_LINKS: string;\n  readonly VITE_MAX_LOGIN_ATTEMPTS: string;\n  readonly VITE_LOGIN_COOLDOWN_MINUTES: string;\n  readonly VITE_CACHE_TTL_MINUTES: string;\n  readonly VITE_API_TIMEOUT_MS: string;\n  readonly VITE_ENABLE_ANALYTICS: string;\n  readonly VITE_ANALYTICS_SAMPLE_RATE: string;\n  readonly VITE_MONITORING_API_KEY?: string;\n  readonly VITE_MONITORING_APP_ID?: string;\n  readonly VITE_MONITORING_ENVIRONMENT?: string;\n  readonly VITE_MONITORING_ENABLED_MONITORS?: string;\n  readonly VITE_MONITORING_ENDPOINT?: string;\n  readonly VITE_SENTRY_DSN?: string;\n  readonly VITE_APP_VERSION?: string;\n  readonly VITE_MOONBASE_RPC_URL?: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]