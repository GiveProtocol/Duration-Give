/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DurationDonationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAXIMUM_DONATION"
      | "MINIMUM_DONATION"
      | "WITHDRAWAL_COOLDOWN"
      | "charities"
      | "donate"
      | "donations"
      | "getCharityInfo"
      | "getDonationAmount"
      | "owner"
      | "pause"
      | "paused"
      | "registerCharity"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateCharityStatus"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CharityRegistered"
      | "CharityStatusUpdated"
      | "DonationReceived"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "WithdrawalProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAXIMUM_DONATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DONATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "donate", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCharityInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonationAmount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerCharity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCharityStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXIMUM_DONATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DONATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "charities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCharityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCharityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CharityRegisteredEvent {
  export type InputTuple = [charity: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [charity: string, timestamp: bigint];
  export interface OutputObject {
    charity: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharityStatusUpdatedEvent {
  export type InputTuple = [charity: AddressLike, isActive: boolean];
  export type OutputTuple = [charity: string, isActive: boolean];
  export interface OutputObject {
    charity: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    donor: AddressLike,
    charity: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    donor: string,
    charity: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    donor: string;
    charity: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalProcessedEvent {
  export type InputTuple = [
    charity: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    charity: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    charity: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DurationDonation extends BaseContract {
  connect(runner?: ContractRunner | null): DurationDonation;
  waitForDeployment(): Promise<this>;

  interface: DurationDonationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAXIMUM_DONATION: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_DONATION: TypedContractMethod<[], [bigint], "view">;

  WITHDRAWAL_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  charities: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, boolean, bigint] & {
        isRegistered: boolean;
        walletAddress: string;
        totalReceived: bigint;
        availableBalance: bigint;
        isActive: boolean;
        lastWithdrawal: bigint;
      }
    ],
    "view"
  >;

  donate: TypedContractMethod<
    [_charityAddress: AddressLike],
    [void],
    "payable"
  >;

  donations: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getCharityInfo: TypedContractMethod<
    [_charityAddress: AddressLike],
    [
      [boolean, string, bigint, bigint, boolean, bigint] & {
        isRegistered: boolean;
        walletAddress: string;
        totalReceived: bigint;
        availableBalance: bigint;
        isActive: boolean;
        lastWithdrawal: bigint;
      }
    ],
    "view"
  >;

  getDonationAmount: TypedContractMethod<
    [_donor: AddressLike, _charity: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerCharity: TypedContractMethod<
    [_charityAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCharityStatus: TypedContractMethod<
    [_charityAddress: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAXIMUM_DONATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_DONATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WITHDRAWAL_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "charities"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, boolean, bigint] & {
        isRegistered: boolean;
        walletAddress: string;
        totalReceived: bigint;
        availableBalance: bigint;
        isActive: boolean;
        lastWithdrawal: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[_charityAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCharityInfo"
  ): TypedContractMethod<
    [_charityAddress: AddressLike],
    [
      [boolean, string, bigint, bigint, boolean, bigint] & {
        isRegistered: boolean;
        walletAddress: string;
        totalReceived: bigint;
        availableBalance: bigint;
        isActive: boolean;
        lastWithdrawal: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonationAmount"
  ): TypedContractMethod<
    [_donor: AddressLike, _charity: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerCharity"
  ): TypedContractMethod<[_charityAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCharityStatus"
  ): TypedContractMethod<
    [_charityAddress: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CharityRegistered"
  ): TypedContractEvent<
    CharityRegisteredEvent.InputTuple,
    CharityRegisteredEvent.OutputTuple,
    CharityRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "CharityStatusUpdated"
  ): TypedContractEvent<
    CharityStatusUpdatedEvent.InputTuple,
    CharityStatusUpdatedEvent.OutputTuple,
    CharityStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalProcessed"
  ): TypedContractEvent<
    WithdrawalProcessedEvent.InputTuple,
    WithdrawalProcessedEvent.OutputTuple,
    WithdrawalProcessedEvent.OutputObject
  >;

  filters: {
    "CharityRegistered(address,uint256)": TypedContractEvent<
      CharityRegisteredEvent.InputTuple,
      CharityRegisteredEvent.OutputTuple,
      CharityRegisteredEvent.OutputObject
    >;
    CharityRegistered: TypedContractEvent<
      CharityRegisteredEvent.InputTuple,
      CharityRegisteredEvent.OutputTuple,
      CharityRegisteredEvent.OutputObject
    >;

    "CharityStatusUpdated(address,bool)": TypedContractEvent<
      CharityStatusUpdatedEvent.InputTuple,
      CharityStatusUpdatedEvent.OutputTuple,
      CharityStatusUpdatedEvent.OutputObject
    >;
    CharityStatusUpdated: TypedContractEvent<
      CharityStatusUpdatedEvent.InputTuple,
      CharityStatusUpdatedEvent.OutputTuple,
      CharityStatusUpdatedEvent.OutputObject
    >;

    "DonationReceived(address,address,uint256,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WithdrawalProcessed(address,uint256,uint256)": TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;
    WithdrawalProcessed: TypedContractEvent<
      WithdrawalProcessedEvent.InputTuple,
      WithdrawalProcessedEvent.OutputTuple,
      WithdrawalProcessedEvent.OutputObject
    >;
  };
}
