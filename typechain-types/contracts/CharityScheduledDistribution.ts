/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CharityScheduledDistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISTRIBUTION_INTERVAL"
      | "MIN_TOKEN_VALUE_USD"
      | "addCharity"
      | "cancelSchedule"
      | "createSchedule"
      | "donationSchedules"
      | "executeDistributions"
      | "getDonorSchedules"
      | "getTokenPrice"
      | "nextScheduleId"
      | "owner"
      | "removeCharity"
      | "renounceOwnership"
      | "setTokenPrice"
      | "tokenPrices"
      | "transferOwnership"
      | "verifiedCharities"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CharityAdded"
      | "CharityRemoved"
      | "DistributionExecuted"
      | "OwnershipTransferred"
      | "ScheduleCancelled"
      | "ScheduleCreated"
      | "TokenPriceSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TOKEN_VALUE_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCharity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSchedule",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donationSchedules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDistributions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorSchedules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextScheduleId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCharity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedCharities",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TOKEN_VALUE_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCharity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextScheduleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedCharities",
    data: BytesLike
  ): Result;
}

export namespace CharityAddedEvent {
  export type InputTuple = [charity: AddressLike];
  export type OutputTuple = [charity: string];
  export interface OutputObject {
    charity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharityRemovedEvent {
  export type InputTuple = [charity: AddressLike];
  export type OutputTuple = [charity: string];
  export interface OutputObject {
    charity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionExecutedEvent {
  export type InputTuple = [
    scheduleId: BigNumberish,
    charity: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    monthsRemaining: BigNumberish
  ];
  export type OutputTuple = [
    scheduleId: bigint,
    charity: string,
    token: string,
    amount: bigint,
    monthsRemaining: bigint
  ];
  export interface OutputObject {
    scheduleId: bigint;
    charity: string;
    token: string;
    amount: bigint;
    monthsRemaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleCancelledEvent {
  export type InputTuple = [scheduleId: BigNumberish];
  export type OutputTuple = [scheduleId: bigint];
  export interface OutputObject {
    scheduleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScheduleCreatedEvent {
  export type InputTuple = [
    scheduleId: BigNumberish,
    donor: AddressLike,
    charity: AddressLike,
    token: AddressLike,
    totalAmount: BigNumberish,
    amountPerMonth: BigNumberish,
    months: BigNumberish
  ];
  export type OutputTuple = [
    scheduleId: bigint,
    donor: string,
    charity: string,
    token: string,
    totalAmount: bigint,
    amountPerMonth: bigint,
    months: bigint
  ];
  export interface OutputObject {
    scheduleId: bigint;
    donor: string;
    charity: string;
    token: string;
    totalAmount: bigint;
    amountPerMonth: bigint;
    months: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPriceSetEvent {
  export type InputTuple = [token: AddressLike, price: BigNumberish];
  export type OutputTuple = [token: string, price: bigint];
  export interface OutputObject {
    token: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CharityScheduledDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): CharityScheduledDistribution;
  waitForDeployment(): Promise<this>;

  interface: CharityScheduledDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISTRIBUTION_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  MIN_TOKEN_VALUE_USD: TypedContractMethod<[], [bigint], "view">;

  addCharity: TypedContractMethod<[charity: AddressLike], [void], "nonpayable">;

  cancelSchedule: TypedContractMethod<
    [scheduleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createSchedule: TypedContractMethod<
    [charity: AddressLike, token: AddressLike, totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  donationSchedules: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        donor: string;
        charity: string;
        token: string;
        totalAmount: bigint;
        amountPerMonth: bigint;
        monthsRemaining: bigint;
        nextDistributionTimestamp: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  executeDistributions: TypedContractMethod<
    [scheduleIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getDonorSchedules: TypedContractMethod<
    [donor: AddressLike],
    [bigint[]],
    "view"
  >;

  getTokenPrice: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  nextScheduleId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeCharity: TypedContractMethod<
    [charity: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTokenPrice: TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenPrices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifiedCharities: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISTRIBUTION_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TOKEN_VALUE_USD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCharity"
  ): TypedContractMethod<[charity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelSchedule"
  ): TypedContractMethod<[scheduleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSchedule"
  ): TypedContractMethod<
    [charity: AddressLike, token: AddressLike, totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donationSchedules"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        donor: string;
        charity: string;
        token: string;
        totalAmount: bigint;
        amountPerMonth: bigint;
        monthsRemaining: bigint;
        nextDistributionTimestamp: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeDistributions"
  ): TypedContractMethod<[scheduleIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDonorSchedules"
  ): TypedContractMethod<[donor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTokenPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextScheduleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeCharity"
  ): TypedContractMethod<[charity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenPrice"
  ): TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenPrices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifiedCharities"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "CharityAdded"
  ): TypedContractEvent<
    CharityAddedEvent.InputTuple,
    CharityAddedEvent.OutputTuple,
    CharityAddedEvent.OutputObject
  >;
  getEvent(
    key: "CharityRemoved"
  ): TypedContractEvent<
    CharityRemovedEvent.InputTuple,
    CharityRemovedEvent.OutputTuple,
    CharityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionExecuted"
  ): TypedContractEvent<
    DistributionExecutedEvent.InputTuple,
    DistributionExecutedEvent.OutputTuple,
    DistributionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleCancelled"
  ): TypedContractEvent<
    ScheduleCancelledEvent.InputTuple,
    ScheduleCancelledEvent.OutputTuple,
    ScheduleCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ScheduleCreated"
  ): TypedContractEvent<
    ScheduleCreatedEvent.InputTuple,
    ScheduleCreatedEvent.OutputTuple,
    ScheduleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPriceSet"
  ): TypedContractEvent<
    TokenPriceSetEvent.InputTuple,
    TokenPriceSetEvent.OutputTuple,
    TokenPriceSetEvent.OutputObject
  >;

  filters: {
    "CharityAdded(address)": TypedContractEvent<
      CharityAddedEvent.InputTuple,
      CharityAddedEvent.OutputTuple,
      CharityAddedEvent.OutputObject
    >;
    CharityAdded: TypedContractEvent<
      CharityAddedEvent.InputTuple,
      CharityAddedEvent.OutputTuple,
      CharityAddedEvent.OutputObject
    >;

    "CharityRemoved(address)": TypedContractEvent<
      CharityRemovedEvent.InputTuple,
      CharityRemovedEvent.OutputTuple,
      CharityRemovedEvent.OutputObject
    >;
    CharityRemoved: TypedContractEvent<
      CharityRemovedEvent.InputTuple,
      CharityRemovedEvent.OutputTuple,
      CharityRemovedEvent.OutputObject
    >;

    "DistributionExecuted(uint256,address,address,uint256,uint256)": TypedContractEvent<
      DistributionExecutedEvent.InputTuple,
      DistributionExecutedEvent.OutputTuple,
      DistributionExecutedEvent.OutputObject
    >;
    DistributionExecuted: TypedContractEvent<
      DistributionExecutedEvent.InputTuple,
      DistributionExecutedEvent.OutputTuple,
      DistributionExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ScheduleCancelled(uint256)": TypedContractEvent<
      ScheduleCancelledEvent.InputTuple,
      ScheduleCancelledEvent.OutputTuple,
      ScheduleCancelledEvent.OutputObject
    >;
    ScheduleCancelled: TypedContractEvent<
      ScheduleCancelledEvent.InputTuple,
      ScheduleCancelledEvent.OutputTuple,
      ScheduleCancelledEvent.OutputObject
    >;

    "ScheduleCreated(uint256,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      ScheduleCreatedEvent.InputTuple,
      ScheduleCreatedEvent.OutputTuple,
      ScheduleCreatedEvent.OutputObject
    >;
    ScheduleCreated: TypedContractEvent<
      ScheduleCreatedEvent.InputTuple,
      ScheduleCreatedEvent.OutputTuple,
      ScheduleCreatedEvent.OutputObject
    >;

    "TokenPriceSet(address,uint256)": TypedContractEvent<
      TokenPriceSetEvent.InputTuple,
      TokenPriceSetEvent.OutputTuple,
      TokenPriceSetEvent.OutputObject
    >;
    TokenPriceSet: TypedContractEvent<
      TokenPriceSetEvent.InputTuple,
      TokenPriceSetEvent.OutputTuple,
      TokenPriceSetEvent.OutputObject
    >;
  };
}
